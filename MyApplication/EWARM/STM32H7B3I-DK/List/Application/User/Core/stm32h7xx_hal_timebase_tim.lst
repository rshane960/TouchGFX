###############################################################################
#
# IAR ANSI C/C++ Compiler V9.20.1.318/W64 for ARM         05/Feb/2022  17:09:26
# Copyright 1999-2021 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        D:\99_Project\GitHub\TouchGFX\MyApplication\Core\Src\stm32h7xx_hal_timebase_tim.c
#        [UTF-8]
#    Command line      =
#        -f
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Application\User\Core\stm32h7xx_hal_timebase_tim.o.rsp
#        (D:\99_Project\GitHub\TouchGFX\MyApplication\Core\Src\stm32h7xx_hal_timebase_tim.c
#        -D USE_HAL_DRIVER -D STM32H7B3xxQ -D USE_BPP=24 -lC
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\Application\User\Core
#        -lA
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\Application\User\Core
#        -o
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Application\User\Core
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.0\arm\inc\c\DLib_Config_Full.h" -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Core/Inc\ -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/App\ -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/target/generated\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/target\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/STM32H7xx_HAL_Driver/Inc\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/STM32H7xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM4F\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/CMSIS/Device/ST/STM32H7xx/Include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/BSP/Components/Common\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/BSP/STM32H7B3I-DK\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Middlewares/ST/touchgfx/framework/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/fonts/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/gui_generated/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/images/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/texts/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/gui/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/videos/include\
#        -Ol --source_encoding utf8 --text_out utf8 --utf8_text_in)
#        --dependencies=n
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Application\User\Core\stm32h7xx_hal_timebase_tim.o.d
#    Locale            =  C
#    List file         =
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\Application\User\Core\stm32h7xx_hal_timebase_tim.lst
#    Object file       =
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Application\User\Core\stm32h7xx_hal_timebase_tim.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

D:\99_Project\GitHub\TouchGFX\MyApplication\Core\Src\stm32h7xx_hal_timebase_tim.c
      1          /* USER CODE BEGIN Header */
      2          /**
      3            ******************************************************************************
      4            * @file    stm32h7xx_hal_timebase_TIM.c 
      5            * @brief   HAL time base based on the hardware TIM.
      6            ******************************************************************************
      7            * @attention
      8            *
      9            * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
     10            * All rights reserved.</center></h2>
     11            *
     12            * This software component is licensed by ST under Ultimate Liberty license
     13            * SLA0044, the "License"; You may not use this file except in compliance with
     14            * the License. You may obtain a copy of the License at:
     15            *                             www.st.com/SLA0044
     16            *
     17            ******************************************************************************
     18            */
     19          /* USER CODE END Header */
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "stm32h7xx_hal.h"
     23          #include "stm32h7xx_hal_tim.h"
     24          
     25          /* Private typedef -----------------------------------------------------------*/
     26          /* Private define ------------------------------------------------------------*/
     27          /* Private macro -------------------------------------------------------------*/
     28          /* Private variables ---------------------------------------------------------*/

   \                                 In section .bss, align 4
     29          TIM_HandleTypeDef        htim6;
   \                     htim6:
   \        0x0                      DS8 76
     30          /* Private function prototypes -----------------------------------------------*/
     31          /* Private functions ---------------------------------------------------------*/
     32          
     33          /**
     34            * @brief  This function configures the TIM6 as a time base source.
     35            *         The time source is configured  to have 1ms time base with a dedicated
     36            *         Tick interrupt priority.
     37            * @note   This function is called  automatically at the beginning of program after
     38            *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
     39            * @param  TickPriority: Tick interrupt priority.
     40            * @retval HAL status
     41            */

   \                                 In section .text, align 2, keep-with-next
     42          HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
     43          {
   \                     HAL_InitTick: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0xB08A             SUB      SP,SP,#+40
   \        0x4   0x0004             MOVS     R4,R0
     44            RCC_ClkInitTypeDef    clkconfig;
     45            uint32_t              uwTimclock, uwAPB1Prescaler;
     46          
     47            uint32_t              uwPrescalerValue;
     48            uint32_t              pFLatency;
     49          /*Configure the TIM6 IRQ priority */
     50            if (TickPriority < (1UL << __NVIC_PRIO_BITS))
   \        0x6   0x2C10             CMP      R4,#+16
   \        0x8   0xD21D             BCS.N    ??HAL_InitTick_0
     51            {
     52            HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
   \        0xA   0x2200             MOVS     R2,#+0
   \        0xC   0x0021             MOVS     R1,R4
   \        0xE   0x2036             MOVS     R0,#+54
   \       0x10   0x.... 0x....      BL       HAL_NVIC_SetPriority
     53          
     54            /* Enable the TIM6 global Interrupt */
     55            HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
   \       0x14   0x2036             MOVS     R0,#+54
   \       0x16   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
     56              uwTickPrio = TickPriority;
   \       0x1A   0x....             LDR.N    R0,??DataTable2
   \       0x1C   0x6004             STR      R4,[R0, #+0]
     57              }
     58            else
     59            {
     60              return HAL_ERROR;
     61            }
     62          
     63            /* Enable TIM6 clock */
     64            __HAL_RCC_TIM6_CLK_ENABLE();
   \       0x1E   0x....             LDR.N    R0,??DataTable2_1
   \       0x20   0x6801             LDR      R1,[R0, #+0]
   \       0x22   0xF051 0x0110      ORRS     R1,R1,#0x10
   \       0x26   0x6001             STR      R1,[R0, #+0]
   \       0x28   0x6800             LDR      R0,[R0, #+0]
   \       0x2A   0xF010 0x0010      ANDS     R0,R0,#0x10
   \       0x2E   0x9000             STR      R0,[SP, #+0]
   \       0x30   0x9800             LDR      R0,[SP, #+0]
     65          
     66            /* Get clock configuration */
     67            HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
   \       0x32   0xA901             ADD      R1,SP,#+4
   \       0x34   0xA802             ADD      R0,SP,#+8
   \       0x36   0x.... 0x....      BL       HAL_RCC_GetClockConfig
     68          
     69            /* Get APB1 prescaler */
     70            uwAPB1Prescaler = clkconfig.APB1CLKDivider;
   \       0x3A   0x9807             LDR      R0,[SP, #+28]
     71            /* Compute TIM6 clock */
     72            if (uwAPB1Prescaler == RCC_HCLK_DIV1)
   \       0x3C   0x2800             CMP      R0,#+0
   \       0x3E   0xD104             BNE.N    ??HAL_InitTick_1
     73            {
     74              uwTimclock = HAL_RCC_GetPCLK1Freq();
   \       0x40   0x.... 0x....      BL       HAL_RCC_GetPCLK1Freq
   \       0x44   0xE004             B.N      ??HAL_InitTick_2
     75            }
   \                     ??HAL_InitTick_0: (+1)
   \       0x46   0x2001             MOVS     R0,#+1
   \       0x48   0xE01B             B.N      ??HAL_InitTick_3
     76            else
     77            {
     78              uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
   \                     ??HAL_InitTick_1: (+1)
   \       0x4A   0x.... 0x....      BL       HAL_RCC_GetPCLK1Freq
   \       0x4E   0x0040             LSLS     R0,R0,#+1
     79            }
     80          
     81            /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
     82            uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
   \                     ??HAL_InitTick_2: (+1)
   \       0x50   0x....             LDR.N    R1,??DataTable2_2
   \       0x52   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \       0x56   0x1E40             SUBS     R0,R0,#+1
     83          
     84            /* Initialize TIM6 */
     85            htim6.Instance = TIM6;
   \       0x58   0x....             LDR.N    R4,??DataTable2_3
   \       0x5A   0x....             LDR.N    R1,??DataTable2_4
   \       0x5C   0x6021             STR      R1,[R4, #+0]
     86          
     87            /* Initialize TIMx peripheral as follow:
     88            + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
     89            + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
     90            + ClockDivision = 0
     91            + Counter direction = Up
     92            */
     93            htim6.Init.Period = (1000000U / 1000U) - 1U;
   \       0x5E   0xF240 0x31E7      MOVW     R1,#+999
   \       0x62   0x60E1             STR      R1,[R4, #+12]
     94            htim6.Init.Prescaler = uwPrescalerValue;
   \       0x64   0x6060             STR      R0,[R4, #+4]
     95            htim6.Init.ClockDivision = 0;
   \       0x66   0x2000             MOVS     R0,#+0
   \       0x68   0x6120             STR      R0,[R4, #+16]
     96            htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
   \       0x6A   0x2000             MOVS     R0,#+0
   \       0x6C   0x60A0             STR      R0,[R4, #+8]
     97          
     98            if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
   \       0x6E   0x0020             MOVS     R0,R4
   \       0x70   0x.... 0x....      BL       HAL_TIM_Base_Init
   \       0x74   0x2800             CMP      R0,#+0
   \       0x76   0xD103             BNE.N    ??HAL_InitTick_4
     99            {
    100              /* Start the TIM time Base generation in interrupt mode */
    101              return HAL_TIM_Base_Start_IT(&htim6);
   \       0x78   0x0020             MOVS     R0,R4
   \       0x7A   0x.... 0x....      BL       HAL_TIM_Base_Start_IT
   \       0x7E   0xE000             B.N      ??HAL_InitTick_3
    102            }
    103          
    104            /* Return function status */
    105            return HAL_ERROR;
   \                     ??HAL_InitTick_4: (+1)
   \       0x80   0x2001             MOVS     R0,#+1
   \                     ??HAL_InitTick_3: (+1)
   \       0x82   0xB00A             ADD      SP,SP,#+40
   \       0x84   0xBD10             POP      {R4,PC}
    106          }
    107          
    108          /**
    109            * @brief  Suspend Tick increment.
    110            * @note   Disable the tick increment by disabling TIM6 update interrupt.
    111            * @param  None
    112            * @retval None
    113            */

   \                                 In section .text, align 2, keep-with-next
    114          void HAL_SuspendTick(void)
    115          {
    116            /* Disable TIM6 update Interrupt */
    117            __HAL_TIM_DISABLE_IT(&htim6, TIM_IT_UPDATE);
   \                     HAL_SuspendTick: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable2_3
   \        0x2   0x6801             LDR      R1,[R0, #+0]
   \        0x4   0x68C9             LDR      R1,[R1, #+12]
   \        0x6   0x0849             LSRS     R1,R1,#+1
   \        0x8   0x0049             LSLS     R1,R1,#+1
   \        0xA   0x6800             LDR      R0,[R0, #+0]
   \        0xC   0x60C1             STR      R1,[R0, #+12]
    118          }
   \        0xE   0x4770             BX       LR
    119          
    120          /**
    121            * @brief  Resume Tick increment.
    122            * @note   Enable the tick increment by Enabling TIM6 update interrupt.
    123            * @param  None
    124            * @retval None
    125            */

   \                                 In section .text, align 2, keep-with-next
    126          void HAL_ResumeTick(void)
    127          {
    128            /* Enable TIM6 Update interrupt */
    129            __HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
   \                     HAL_ResumeTick: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable2_3
   \        0x2   0x6801             LDR      R1,[R0, #+0]
   \        0x4   0x68C9             LDR      R1,[R1, #+12]
   \        0x6   0xF051 0x0101      ORRS     R1,R1,#0x1
   \        0xA   0x6800             LDR      R0,[R0, #+0]
   \        0xC   0x60C1             STR      R1,[R0, #+12]
    130          }
   \        0xE   0x4770             BX       LR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x....'....        DC32     uwTickPrio

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0x5802'4548        DC32     0x58024548

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \        0x0   0x000F'4240        DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \        0x0   0x....'....        DC32     htim6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \        0x0   0x4000'1000        DC32     0x40001000
    131          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   HAL_InitTick
        48   -> HAL_NVIC_EnableIRQ
        48   -> HAL_NVIC_SetPriority
        48   -> HAL_RCC_GetClockConfig
        48   -> HAL_RCC_GetPCLK1Freq
        48   -> HAL_TIM_Base_Init
        48   -> HAL_TIM_Base_Start_IT
       0   HAL_ResumeTick
       0   HAL_SuspendTick


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
     134  HAL_InitTick
      16  HAL_ResumeTick
      16  HAL_SuspendTick
      76  htim6

 
  76 bytes in section .bss
 186 bytes in section .text
 
 186 bytes of CODE memory
  76 bytes of DATA memory

Errors: none
Warnings: none
