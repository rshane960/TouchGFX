###############################################################################
#
# IAR ANSI C/C++ Compiler V9.20.1.318/W64 for ARM         09/Feb/2022  10:51:11
# Copyright 1999-2021 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\TouchGFX\target\generated\TouchGFXGeneratedHAL.cpp
#        [UTF-8]
#    Command line                 =
#        -f
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Application\User\TouchGFX\target\generated\TouchGFXGeneratedHAL.o.rsp
#        (D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\TouchGFX\target\generated\TouchGFXGeneratedHAL.cpp
#        -D USE_HAL_DRIVER -D STM32H7B3xxQ -D USE_BPP=24 -lC
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\Application\User\TouchGFX\target\generated
#        -lA
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\Application\User\TouchGFX\target\generated
#        -o
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Application\User\TouchGFX\target\generated
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.0\arm\inc\c\DLib_Config_Full.h" -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Core/Inc\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/App\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/target/generated\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/target\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/STM32H7xx_HAL_Driver/Inc\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/STM32H7xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM4F\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/CMSIS/Device/ST/STM32H7xx/Include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/BSP/Components/Common\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/BSP/STM32H7B3I-DK\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Middlewares/ST/touchgfx/framework/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/fonts/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/gui_generated/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/images/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/texts/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/gui/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/videos/include\
#        -Ol --c++ --no_exceptions --no_rtti --no_static_destruction
#        --source_encoding utf8 --text_out utf8 --utf8_text_in)
#        --dependencies=n
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Application\User\TouchGFX\target\generated\TouchGFXGeneratedHAL.o.d
#    Locale                       =  C
#    List file                    =
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\Application\User\TouchGFX\target\generated\TouchGFXGeneratedHAL.lst
#    Object file                  =
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Application\User\TouchGFX\target\generated\TouchGFXGeneratedHAL.o
#    Runtime model:                  
#      __CPP_Exceptions           =  Disabled
#      __CPP_Language             =  C++14
#      __CPP_Library              =  DLib
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_full_locale_support =  1
#      __dlib_version             =  6
#
###############################################################################

D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\TouchGFX\target\generated\TouchGFXGeneratedHAL.cpp
      1          /**
      2            ******************************************************************************
      3            * File Name          : TouchGFXGeneratedHAL.cpp
      4            ******************************************************************************
      5            * This file is generated by TouchGFX Generator 4.18.1. Please, do not edit!
      6            ******************************************************************************
      7            * @attention
      8            *
      9            * Copyright (c) 2022 STMicroelectronics.
     10            * All rights reserved.
     11            *
     12            * This software is licensed under terms that can be found in the LICENSE file
     13            * in the root directory of this software component.
     14            * If no LICENSE file comes with this software, it is provided AS-IS.
     15            *
     16            ******************************************************************************
     17            */
     18          
     19          #include <TouchGFXGeneratedHAL.hpp>

   \                                 In section .text, align 4
   \   __vfp touchgfx::HAL *touchgfx::HAL::getInstance()
   \                     _ZN8touchgfx3HAL11getInstanceEv: (+1)
   \        0x0   0x4801             LDR.N    R0,??getInstance_0
   \        0x2   0x6800             LDR      R0,[R0, #+0]
   \        0x4   0x4770             BX       LR
   \        0x6   0xBF00             Nop
   \                     ??getInstance_0:
   \        0x8   0x....'....        DC32     _ZN8touchgfx3HAL8instanceE

   \                                 In section .text, align 2
   \   __vfp void touchgfx::HAL::setDisplayOrientation(touchgfx::DisplayOrientation)
   \                     _ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE: (+1)
   \        0x0   0xF880 0x1074      STRB     R1,[R0, #+116]
   \        0x4   0x2101             MOVS     R1,#+1
   \        0x6   0xF880 0x1075      STRB     R1,[R0, #+117]
   \        0xA   0x4770             BX       LR

   \                                 In section .text, align 4
   \   __vfp void touchgfx::HAL::setFrameBufferSize(uint16_t, uint16_t)
   \                     _ZN8touchgfx3HAL18setFrameBufferSizeEtt: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x000D             MOVS     R5,R1
   \        0x4   0x0014             MOVS     R4,R2
   \        0x6   0x0028             MOVS     R0,R5
   \        0x8   0x490B             LDR.N    R1,??setFrameBufferSize_0
   \        0xA   0x8809             LDRH     R1,[R1, #+0]
   \        0xC   0xB280             UXTH     R0,R0
   \        0xE   0x4288             CMP      R0,R1
   \       0x10   0xD305             BCC.N    ??setFrameBufferSize_1
   \       0x12   0x0020             MOVS     R0,R4
   \       0x14   0x4909             LDR.N    R1,??setFrameBufferSize_0+0x4
   \       0x16   0x8809             LDRH     R1,[R1, #+0]
   \       0x18   0xB280             UXTH     R0,R0
   \       0x1A   0x4288             CMP      R0,R1
   \       0x1C   0xD206             BCS.N    ??setFrameBufferSize_2
   \                     ??setFrameBufferSize_1: (+1)
   \       0x1E   0x229E             MOVS     R2,#+158
   \       0x20   0x4907             LDR.N    R1,??setFrameBufferSize_0+0x8
   \       0x22   0x4808             LDR.N    R0,??setFrameBufferSize_0+0xC
   \       0x24   0x.... 0x....      BL       __aeabi_assert
   \       0x28   0x.... 0x....      BL       __iar_EmptyStepPoint
   \                     ??setFrameBufferSize_2: (+1)
   \       0x2C   0x4806             LDR.N    R0,??setFrameBufferSize_0+0x10
   \       0x2E   0x8005             STRH     R5,[R0, #+0]
   \       0x30   0x4806             LDR.N    R0,??setFrameBufferSize_0+0x14
   \       0x32   0x8004             STRH     R4,[R0, #+0]
   \       0x34   0xBD31             POP      {R0,R4,R5,PC}
   \       0x36   0xBF00             Nop
   \                     ??setFrameBufferSize_0:
   \       0x38   0x....'....        DC32     _ZN8touchgfx3HAL13DISPLAY_WIDTHE
   \       0x3C   0x....'....        DC32     _ZN8touchgfx3HAL14DISPLAY_HEIGHTE
   \       0x40   0x....'....        DC32     _ZZN8touchgfx3HAL18setFrameBufferSizeEttEs_1
   \       0x44   0x....'....        DC32     _ZZN8touchgfx3HAL18setFrameBufferSizeEttEs_0
   \       0x48   0x....'....        DC32     _ZN8touchgfx3HAL18FRAME_BUFFER_WIDTHE
   \       0x4C   0x....'....        DC32     _ZN8touchgfx3HAL19FRAME_BUFFER_HEIGHTE

   \                                 In section .text, align 2
   \   __vfp void touchgfx::HAL::frontPorchEntered()
   \                     _ZN8touchgfx3HAL17frontPorchEnteredEv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x6801             LDR      R1,[R0, #+0]
   \        0x4   0x6A09             LDR      R1,[R1, #+32]
   \        0x6   0x4788             BLX      R1
   \        0x8   0xBD01             POP      {R0,PC}

   \                                 In section .text, align 2
   \   __vfp touchgfx::BlitOperations touchgfx::HAL::getBlitCaps()
   \                     _ZN8touchgfx3HAL11getBlitCapsEv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x0001             MOVS     R1,R0
   \        0x4   0xF891 0x0077      LDRB     R0,[R1, #+119]
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD005             BEQ.N    ??getBlitCaps_0
   \        0xC   0x6848             LDR      R0,[R1, #+4]
   \        0xE   0x6849             LDR      R1,[R1, #+4]
   \       0x10   0x6809             LDR      R1,[R1, #+0]
   \       0x12   0x6809             LDR      R1,[R1, #+0]
   \       0x14   0x4788             BLX      R1
   \       0x16   0xE000             B.N      ??getBlitCaps_1
   \                     ??getBlitCaps_0: (+1)
   \       0x18   0x2000             MOVS     R0,#+0
   \                     ??getBlitCaps_1: (+1)
   \       0x1A   0xBD02             POP      {R1,PC}

   \                                 In section .text, align 2
   \   __vfp void touchgfx::HAL::vSync()
   \                     _ZN8touchgfx3HAL5vSyncEv: (+1)
   \        0x0   0xF890 0x1066      LDRB     R1,[R0, #+102]
   \        0x4   0x1C49             ADDS     R1,R1,#+1
   \        0x6   0xF880 0x1066      STRB     R1,[R0, #+102]
   \        0xA   0x4770             BX       LR

   \                                 In section .text, align 2
   \   __vfp void touchgfx::HAL::backPorchExited()
   \                     _ZN8touchgfx3HAL15backPorchExitedEv: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x.... 0x....      BL       _ZN8touchgfx3HAL16swapFrameBuffersEv
   \        0xA   0x0020             MOVS     R0,R4
   \        0xC   0x6821             LDR      R1,[R4, #+0]
   \        0xE   0xF8D1 0x10A4      LDR      R1,[R1, #+164]
   \       0x12   0x4788             BLX      R1
   \       0x14   0xBD10             POP      {R4,PC}

   \                                 In section .text, align 2
   \   __vfp bool touchgfx::HAL::sampleKey(uint8_t &)
   \                     _ZN8touchgfx3HAL9sampleKeyERh: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR

   \                                 In section .text, align 4
   \   __vfp void touchgfx::HAL::setFrameBufferStartAddresses(void *, void *, void *)
   \                     _ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0007             MOVS     R7,R0
   \        0x4   0x000E             MOVS     R6,R1
   \        0x6   0x0015             MOVS     R5,R2
   \        0x8   0x001C             MOVS     R4,R3
   \        0xA   0x2E00             CMP      R6,#+0
   \        0xC   0xD107             BNE.N    ??setFrameBufferStartAddresses_1
   \        0xE   0xF44F 0x722B      MOV      R2,#+684
   \       0x12   0x490E             LDR.N    R1,??setFrameBufferStartAddresses_0
   \       0x14   0x480E             LDR.N    R0,??setFrameBufferStartAddresses_0+0x4
   \       0x16   0x.... 0x....      BL       __aeabi_assert
   \       0x1A   0x.... 0x....      BL       __iar_EmptyStepPoint
   \                     ??setFrameBufferStartAddresses_1: (+1)
   \       0x1E   0x63FE             STR      R6,[R7, #+60]
   \       0x20   0x643D             STR      R5,[R7, #+64]
   \       0x22   0x647C             STR      R4,[R7, #+68]
   \       0x24   0x2D00             CMP      R5,#+0
   \       0x26   0xD003             BEQ.N    ??setFrameBufferStartAddresses_2
   \       0x28   0x2001             MOVS     R0,#+1
   \       0x2A   0x490A             LDR.N    R1,??setFrameBufferStartAddresses_0+0x8
   \       0x2C   0x7008             STRB     R0,[R1, #+0]
   \       0x2E   0xE002             B.N      ??setFrameBufferStartAddresses_3
   \                     ??setFrameBufferStartAddresses_2: (+1)
   \       0x30   0x2000             MOVS     R0,#+0
   \       0x32   0x4908             LDR.N    R1,??setFrameBufferStartAddresses_0+0x8
   \       0x34   0x7008             STRB     R0,[R1, #+0]
   \                     ??setFrameBufferStartAddresses_3: (+1)
   \       0x36   0x2C00             CMP      R4,#+0
   \       0x38   0xD003             BEQ.N    ??setFrameBufferStartAddresses_4
   \       0x3A   0x2001             MOVS     R0,#+1
   \       0x3C   0x4906             LDR.N    R1,??setFrameBufferStartAddresses_0+0xC
   \       0x3E   0x7008             STRB     R0,[R1, #+0]
   \       0x40   0xE002             B.N      ??setFrameBufferStartAddresses_5
   \                     ??setFrameBufferStartAddresses_4: (+1)
   \       0x42   0x2000             MOVS     R0,#+0
   \       0x44   0x4904             LDR.N    R1,??setFrameBufferStartAddresses_0+0xC
   \       0x46   0x7008             STRB     R0,[R1, #+0]
   \                     ??setFrameBufferStartAddresses_5: (+1)
   \       0x48   0xBDF1             POP      {R0,R4-R7,PC}
   \       0x4A   0xBF00             Nop
   \                     ??setFrameBufferStartAddresses_0:
   \       0x4C   0x....'....        DC32     _ZZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_Es_1
   \       0x50   0x....'....        DC32     _ZZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_Es_0
   \       0x54   0x....'....        DC32     _ZN8touchgfx3HAL20USE_DOUBLE_BUFFERINGE
   \       0x58   0x....'....        DC32     _ZN8touchgfx3HAL21USE_ANIMATION_STORAGEE

   \                                 In section .text, align 2
   \   __vfp touchgfx::FlashDataReader *touchgfx::HAL::getFlashDataReader() const
   \                     _ZNK8touchgfx3HAL18getFlashDataReaderEv: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR

   \                                 In section .text, align 2
   \   __vfp void touchgfx::HAL::taskDelay(uint16_t)
   \                     _ZN8touchgfx3HAL9taskDelayEt: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x0002             MOVS     R2,R0
   \        0x4   0x0008             MOVS     R0,R1
   \        0x6   0x6B91             LDR      R1,[R2, #+56]
   \        0x8   0x2900             CMP      R1,#+0
   \        0xA   0xD002             BEQ.N    ??taskDelay_0
   \        0xC   0xB280             UXTH     R0,R0
   \        0xE   0x6B91             LDR      R1,[R2, #+56]
   \       0x10   0x4788             BLX      R1
   \                     ??taskDelay_0: (+1)
   \       0x12   0xBD01             POP      {R0,PC}

   \                                 In section .text, align 2
   \   __vfp uint16_t touchgfx::HAL::getTFTCurrentLine()
   \                     _ZN8touchgfx3HAL17getTFTCurrentLineEv: (+1)
   \        0x0   0xF64F 0x70FF      MOVW     R0,#+65535
   \        0x4   0x4770             BX       LR

   \                                 In section .text, align 2
   \   __vfp touchgfx::DMAType touchgfx::HAL::getDMAType()
   \                     _ZN8touchgfx3HAL10getDMATypeEv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x0001             MOVS     R1,R0
   \        0x4   0x6848             LDR      R0,[R1, #+4]
   \        0x6   0x6849             LDR      R1,[R1, #+4]
   \        0x8   0x6809             LDR      R1,[R1, #+0]
   \        0xA   0x6989             LDR      R1,[R1, #+24]
   \        0xC   0x4788             BLX      R1
   \        0xE   0xBD02             POP      {R1,PC}

   \                                 In section .text, align 4
   \   __vfp void touchgfx::HAL::performDisplayOrientationChange()
   \                     _ZN8touchgfx3HAL31performDisplayOrientationChangeEv: (+1)
   \        0x0   0xB410             PUSH     {R4}
   \        0x2   0xF890 0x1074      LDRB     R1,[R0, #+116]
   \        0x6   0xF890 0x0034      LDRB     R0,[R0, #+52]
   \        0xA   0x4281             CMP      R1,R0
   \        0xC   0xD00C             BEQ.N    ??performDisplayOrientationChange_1
   \        0xE   0x490D             LDR.N    R1,??performDisplayOrientationChange_0
   \       0x10   0x7808             LDRB     R0,[R1, #+0]
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD114             BNE.N    ??performDisplayOrientationChange_2
   \       0x16   0x480C             LDR.N    R0,??performDisplayOrientationChange_0+0x4
   \       0x18   0x8803             LDRH     R3,[R0, #+0]
   \       0x1A   0x4A0C             LDR.N    R2,??performDisplayOrientationChange_0+0x8
   \       0x1C   0x8814             LDRH     R4,[R2, #+0]
   \       0x1E   0x8004             STRH     R4,[R0, #+0]
   \       0x20   0x8013             STRH     R3,[R2, #+0]
   \       0x22   0x2001             MOVS     R0,#+1
   \       0x24   0x7008             STRB     R0,[R1, #+0]
   \       0x26   0xE00B             B.N      ??performDisplayOrientationChange_2
   \                     ??performDisplayOrientationChange_1: (+1)
   \       0x28   0x4906             LDR.N    R1,??performDisplayOrientationChange_0
   \       0x2A   0x7808             LDRB     R0,[R1, #+0]
   \       0x2C   0x2800             CMP      R0,#+0
   \       0x2E   0xD007             BEQ.N    ??performDisplayOrientationChange_2
   \       0x30   0x4805             LDR.N    R0,??performDisplayOrientationChange_0+0x4
   \       0x32   0x8803             LDRH     R3,[R0, #+0]
   \       0x34   0x4A05             LDR.N    R2,??performDisplayOrientationChange_0+0x8
   \       0x36   0x8814             LDRH     R4,[R2, #+0]
   \       0x38   0x8004             STRH     R4,[R0, #+0]
   \       0x3A   0x8013             STRH     R3,[R2, #+0]
   \       0x3C   0x2000             MOVS     R0,#+0
   \       0x3E   0x7008             STRB     R0,[R1, #+0]
   \                     ??performDisplayOrientationChange_2: (+1)
   \       0x40   0xBC10             POP      {R4}
   \       0x42   0x4770             BX       LR
   \                     ??performDisplayOrientationChange_0:
   \       0x44   0x....'....        DC32     _ZN8touchgfx3HAL16DISPLAY_ROTATIONE
   \       0x48   0x....'....        DC32     _ZN8touchgfx3HAL14DISPLAY_HEIGHTE
   \       0x4C   0x....'....        DC32     _ZN8touchgfx3HAL13DISPLAY_WIDTHE

   \                                 In section .text, align 2
   \   __vfp TouchGFXGeneratedHAL::deleter ~TouchGFXGeneratedHAL() noexcept
   \                     _ZN20TouchGFXGeneratedHALD0Ev: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x.... 0x....      BL       _ZN20TouchGFXGeneratedHALD1Ev
   \        0xA   0x217C             MOVS     R1,#+124
   \        0xC   0x0020             MOVS     R0,R4
   \        0xE   0x.... 0x....      BL       _ZdlPvj
   \       0x12   0xBD10             POP      {R4,PC}

   \                                 In section .text, align 2
   \   __vfp TouchGFXGeneratedHAL::~TouchGFXGeneratedHAL() noexcept
   \                     _ZN20TouchGFXGeneratedHALD1Ev: (+1)
   \        0x0   0x4770             BX       LR

   \                                 In section .text, align 2
   \   __vfp void TouchGFXGeneratedHAL::flushFrameBuffer()
   \                     _ZN20TouchGFXGeneratedHAL16flushFrameBufferEv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x.... 0x....      BL       _ZN8touchgfx3HAL16flushFrameBufferEv
   \        0x6   0xBD01             POP      {R0,PC}
     20          #include <touchgfx/hal/OSWrappers.hpp>
     21          #include <gui/common/FrontendHeap.hpp>
     22          #include <touchgfx/hal/GPIO.hpp>
     23          
     24          #include "stm32h7xx.h"

   \                                 In section .text, align 4, keep-with-next
   \   static __vfp void __NVIC_EnableIRQ(IRQn_Type)
   \                     _ZN46_INTERNAL_24_TouchGFXGeneratedHAL_cpp_c8c66d9016__NVIC_EnableIRQE9IRQn_Type: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xB209             SXTH     R1,R1
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD408             BMI.N    ??__NVIC_EnableIRQ_0
   \        0x8   0x2201             MOVS     R2,#+1
   \        0xA   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \        0xE   0x408A             LSLS     R2,R2,R1
   \       0x10   0x....             LDR.N    R1,??DataTable10
   \       0x12   0xB200             SXTH     R0,R0
   \       0x14   0x0940             LSRS     R0,R0,#+5
   \       0x16   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \       0x1A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \   static __vfp void __NVIC_DisableIRQ(IRQn_Type)
   \                     _ZN46_INTERNAL_24_TouchGFXGeneratedHAL_cpp_c8c66d9017__NVIC_DisableIRQE9IRQn_Type: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xB209             SXTH     R1,R1
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD40C             BMI.N    ??__NVIC_DisableIRQ_0
   \        0x8   0x2201             MOVS     R2,#+1
   \        0xA   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \        0xE   0x408A             LSLS     R2,R2,R1
   \       0x10   0x....             LDR.N    R1,??DataTable10_1
   \       0x12   0xB200             SXTH     R0,R0
   \       0x14   0x0940             LSRS     R0,R0,#+5
   \       0x16   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \       0x1A   0xF3BF 0x8F4F      DSB      SY
   \       0x1E   0xF3BF 0x8F6F      ISB      SY
   \                     ??__NVIC_DisableIRQ_0: (+1)
   \       0x22   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \   static __vfp void __NVIC_SetPriority(IRQn_Type, uint32_t)
   \                     _ZN46_INTERNAL_24_TouchGFXGeneratedHAL_cpp_c8c66d9018__NVIC_SetPriorityE9IRQn_Typej: (+1)
   \        0x0   0x0002             MOVS     R2,R0
   \        0x2   0xB212             SXTH     R2,R2
   \        0x4   0x2A00             CMP      R2,#+0
   \        0x6   0xD404             BMI.N    ??__NVIC_SetPriority_0
   \        0x8   0x0109             LSLS     R1,R1,#+4
   \        0xA   0x....             LDR.N    R2,??DataTable10_2
   \        0xC   0xB200             SXTH     R0,R0
   \        0xE   0x5411             STRB     R1,[R2, R0]
   \       0x10   0xE007             B.N      ??__NVIC_SetPriority_1
   \                     ??__NVIC_SetPriority_0: (+1)
   \       0x12   0x0109             LSLS     R1,R1,#+4
   \       0x14   0x....             LDR.N    R2,??DataTable10_3
   \       0x16   0xB200             SXTH     R0,R0
   \       0x18   0xF010 0x000F      ANDS     R0,R0,#0xF
   \       0x1C   0x4410             ADD      R0,R2,R0
   \       0x1E   0xF800 0x1C04      STRB     R1,[R0, #+4294967292]
   \                     ??__NVIC_SetPriority_1: (+1)
   \       0x22   0x4770             BX       LR
     25          #include "stm32h7xx_hal_ltdc.h"
     26          
     27          using namespace touchgfx;
     28          
     29          namespace
     30          {
     31              // Use the section "TouchGFX_Framebuffer" in the linker script to specify the placement of the buffer
     32              LOCATION_PRAGMA("TouchGFX_Framebuffer")

   \                                 In section TouchGFX_Framebuffer, align 4
     33              uint32_t frameBuf[(480 * 272 * 3 + 3) / 4 * 2] LOCATION_ATTRIBUTE("TouchGFX_Framebuffer");
   \                     _ZN46_INTERNAL_24_TouchGFXGeneratedHAL_cpp_c8c66d9048_GLOBAL__N__24_TouchGFXGeneratedHAL_cpp_c8c66d908frameBufE:
   \        0x0                      DS8 783'360

   \                                 In section .bss, align 2
     34              static uint16_t lcd_int_active_line;
   \                     _ZN46_INTERNAL_24_TouchGFXGeneratedHAL_cpp_c8c66d9048_GLOBAL__N__24_TouchGFXGeneratedHAL_cpp_c8c66d9019lcd_int_active_lineE:
   \        0x0                      DS8 2

   \                                 In section .bss, align 2
     35              static uint16_t lcd_int_porch_line;
   \                     _ZN46_INTERNAL_24_TouchGFXGeneratedHAL_cpp_c8c66d9048_GLOBAL__N__24_TouchGFXGeneratedHAL_cpp_c8c66d9018lcd_int_porch_lineE:
   \        0x0                      DS8 2
     36          }
     37          

   \                                 In section .text, align 2, keep-with-next
     38          void TouchGFXGeneratedHAL::initialize()
     39          {
   \                     _ZN20TouchGFXGeneratedHAL10initializeEv: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
     40              HAL::initialize();
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x.... 0x....      BL       _ZN8touchgfx3HAL10initializeEv
     41              registerEventListener(*(Application::getInstance()));
   \        0xA   0x0025             MOVS     R5,R4
   \        0xC   0x.... 0x....      BL       _ZN8touchgfx11Application11getInstanceEv
   \       0x10   0x0001             MOVS     R1,R0
   \       0x12   0x0028             MOVS     R0,R5
   \       0x14   0x682A             LDR      R2,[R5, #+0]
   \       0x16   0x6E12             LDR      R2,[R2, #+96]
   \       0x18   0x4790             BLX      R2
     42          //    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
     43          
     44              /*===============================
     45               //sunny
     46               //Set Animation buffer 활성화
     47              ===============================*/
     48              setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)));
   \       0x1A   0x....             LDR.N    R1,??DataTable10_4
   \       0x1C   0x....             LDR.N    R0,??DataTable10_5
   \       0x1E   0xEB01 0x0200      ADD      R2,R1,R0
   \       0x22   0x0013             MOVS     R3,R2
   \       0x24   0x0020             MOVS     R0,R4
   \       0x26   0x6824             LDR      R4,[R4, #+0]
   \       0x28   0xF8D4 0x4084      LDR      R4,[R4, #+132]
   \       0x2C   0x47A0             BLX      R4
     49          }
   \       0x2E   0xBD31             POP      {R0,R4,R5,PC}
     50          

   \                                 In section .text, align 2, keep-with-next
     51          void TouchGFXGeneratedHAL::configureInterrupts()
     52          {
   \                     _ZN20TouchGFXGeneratedHAL19configureInterruptsEv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     53              NVIC_SetPriority(DMA2D_IRQn, 9);
   \        0x2   0x2109             MOVS     R1,#+9
   \        0x4   0x205A             MOVS     R0,#+90
   \        0x6   0x.... 0x....      BL       _ZN46_INTERNAL_24_TouchGFXGeneratedHAL_cpp_c8c66d9018__NVIC_SetPriorityE9IRQn_Typej
     54              NVIC_SetPriority(LTDC_IRQn, 9);
   \        0xA   0x2109             MOVS     R1,#+9
   \        0xC   0x2058             MOVS     R0,#+88
   \        0xE   0x.... 0x....      BL       _ZN46_INTERNAL_24_TouchGFXGeneratedHAL_cpp_c8c66d9018__NVIC_SetPriorityE9IRQn_Typej
     55          }
   \       0x12   0xBD01             POP      {R0,PC}
     56          

   \                                 In section .text, align 2, keep-with-next
     57          void TouchGFXGeneratedHAL::enableInterrupts()
     58          {
   \                     _ZN20TouchGFXGeneratedHAL16enableInterruptsEv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     59              NVIC_EnableIRQ(DMA2D_IRQn);
   \        0x2   0x205A             MOVS     R0,#+90
   \        0x4   0x.... 0x....      BL       _ZN46_INTERNAL_24_TouchGFXGeneratedHAL_cpp_c8c66d9016__NVIC_EnableIRQE9IRQn_Type
     60              NVIC_EnableIRQ(LTDC_IRQn);
   \        0x8   0x2058             MOVS     R0,#+88
   \        0xA   0x.... 0x....      BL       _ZN46_INTERNAL_24_TouchGFXGeneratedHAL_cpp_c8c66d9016__NVIC_EnableIRQE9IRQn_Type
     61          }
   \        0xE   0xBD01             POP      {R0,PC}
     62          

   \                                 In section .text, align 2, keep-with-next
     63          void TouchGFXGeneratedHAL::disableInterrupts()
     64          {
   \                     _ZN20TouchGFXGeneratedHAL17disableInterruptsEv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     65              NVIC_DisableIRQ(DMA2D_IRQn);
   \        0x2   0x205A             MOVS     R0,#+90
   \        0x4   0x.... 0x....      BL       _ZN46_INTERNAL_24_TouchGFXGeneratedHAL_cpp_c8c66d9017__NVIC_DisableIRQE9IRQn_Type
     66              NVIC_DisableIRQ(LTDC_IRQn);
   \        0x8   0x2058             MOVS     R0,#+88
   \        0xA   0x.... 0x....      BL       _ZN46_INTERNAL_24_TouchGFXGeneratedHAL_cpp_c8c66d9017__NVIC_DisableIRQE9IRQn_Type
     67          }
   \        0xE   0xBD01             POP      {R0,PC}
     68          

   \                                 In section .text, align 2, keep-with-next
     69          void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
     70          {
     71              lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
   \                     _ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable10_6
   \        0x2   0x....             LDR.N    R1,??DataTable10_7
   \        0x4   0x6809             LDR      R1,[R1, #+0]
   \        0x6   0x0549             LSLS     R1,R1,#+21
   \        0x8   0x0D49             LSRS     R1,R1,#+21
   \        0xA   0x1E49             SUBS     R1,R1,#+1
   \        0xC   0x8001             STRH     R1,[R0, #+0]
     72              lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
   \        0xE   0x....             LDR.N    R1,??DataTable10_8
   \       0x10   0x6809             LDR      R1,[R1, #+0]
   \       0x12   0x0549             LSLS     R1,R1,#+21
   \       0x14   0x0D49             LSRS     R1,R1,#+21
   \       0x16   0x1E49             SUBS     R1,R1,#+1
   \       0x18   0x....             LDR.N    R2,??DataTable10_9
   \       0x1A   0x8011             STRH     R1,[R2, #+0]
     73          
     74              /* Sets the Line Interrupt position */
     75              LTDC->LIPCR = lcd_int_active_line;
   \       0x1C   0x8800             LDRH     R0,[R0, #+0]
   \       0x1E   0x....             LDR.N    R1,??DataTable10_10
   \       0x20   0x6008             STR      R0,[R1, #+0]
     76              /* Line Interrupt Enable            */
     77              LTDC->IER |= LTDC_IER_LIE;
   \       0x22   0x....             LDR.N    R0,??DataTable10_11
   \       0x24   0x6801             LDR      R1,[R0, #+0]
   \       0x26   0xF051 0x0101      ORRS     R1,R1,#0x1
   \       0x2A   0x6001             STR      R1,[R0, #+0]
     78          }
   \       0x2C   0x4770             BX       LR
     79          

   \                                 In section .text, align 2, keep-with-next
     80          bool TouchGFXGeneratedHAL::beginFrame()
     81          {
   \                     _ZN20TouchGFXGeneratedHAL10beginFrameEv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     82              return HAL::beginFrame();
   \        0x2   0x.... 0x....      BL       _ZN8touchgfx3HAL10beginFrameEv
   \        0x6   0xBD02             POP      {R1,PC}
     83          }
     84          

   \                                 In section .text, align 2, keep-with-next
     85          void TouchGFXGeneratedHAL::endFrame()
     86          {
   \                     _ZN20TouchGFXGeneratedHAL8endFrameEv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     87              HAL::endFrame();
   \        0x2   0x.... 0x....      BL       _ZN8touchgfx3HAL8endFrameEv
     88          
     89          }
   \        0x6   0xBD01             POP      {R0,PC}
     90          

   \                                 In section .text, align 2, keep-with-next
     91          uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
     92          {
     93              return (uint16_t*)LTDC_Layer1->CFBAR;
   \                     _ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable10_12
   \        0x2   0x6800             LDR      R0,[R0, #+0]
   \        0x4   0x4770             BX       LR
     94          }
     95          

   \                                 In section .text, align 2, keep-with-next
     96          void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
     97          {
     98              LTDC_Layer1->CFBAR = (uint32_t)adr;
   \                     _ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable10_12
   \        0x2   0x6001             STR      R1,[R0, #+0]
     99          
    100              /* Reload immediate */
    101              LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
   \        0x4   0x2001             MOVS     R0,#+1
   \        0x6   0x....             LDR.N    R1,??DataTable10_13
   \        0x8   0x6008             STR      R0,[R1, #+0]
    102          }
   \        0xA   0x4770             BX       LR
    103          

   \                                 In section .text, align 2, keep-with-next
    104          void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
    105          {
   \                     _ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    106              HAL::flushFrameBuffer(rect);
   \        0x2   0x.... 0x....      BL       _ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE
    107              // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    108              // the DCache must be flushed prior to DMA2D accessing it. That's done
    109              // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    110              // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    111              if (SCB->CCR & SCB_CCR_DC_Msk)
   \        0x6   0x....             LDR.N    R0,??DataTable10_14
   \        0x8   0x6800             LDR      R0,[R0, #+0]
   \        0xA   0x03C0             LSLS     R0,R0,#+15
   \        0xC   0xD51E             BPL.N    ??flushFrameBuffer_0
    112              {
    113                  SCB_CleanInvalidateDCache();
   \        0xE   0x2000             MOVS     R0,#+0
   \       0x10   0x....             LDR.N    R1,??DataTable10_15
   \       0x12   0x6008             STR      R0,[R1, #+0]
   \       0x14   0xF3BF 0x8F4F      DSB      SY
   \       0x18   0x....             LDR.N    R0,??DataTable10_16
   \       0x1A   0x6801             LDR      R1,[R0, #+0]
   \       0x1C   0xF3C1 0x324E      UBFX     R2,R1,#+13,#+15
   \                     ??flushFrameBuffer_1: (+1)
   \       0x20   0xF3C1 0x03C9      UBFX     R3,R1,#+3,#+10
   \                     ??flushFrameBuffer_2: (+1)
   \       0x24   0xF643 0x70E0      MOVW     R0,#+16352
   \       0x28   0xEA10 0x1042      ANDS     R0,R0,R2, LSL #+5
   \       0x2C   0xEA50 0x7083      ORRS     R0,R0,R3, LSL #+30
   \       0x30   0x....             LDR.N    R4,??DataTable10_17
   \       0x32   0x6020             STR      R0,[R4, #+0]
   \       0x34   0x0018             MOVS     R0,R3
   \       0x36   0x1E43             SUBS     R3,R0,#+1
   \       0x38   0x2800             CMP      R0,#+0
   \       0x3A   0xD1F3             BNE.N    ??flushFrameBuffer_2
   \       0x3C   0x0010             MOVS     R0,R2
   \       0x3E   0x1E42             SUBS     R2,R0,#+1
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD1ED             BNE.N    ??flushFrameBuffer_1
   \       0x44   0xF3BF 0x8F4F      DSB      SY
   \       0x48   0xF3BF 0x8F6F      ISB      SY
    114              }
    115          }
   \                     ??flushFrameBuffer_0: (+1)
   \       0x4C   0xBD10             POP      {R4,PC}
    116          

   \                                 In section .text, align 2, keep-with-next
    117          bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
    118          {
   \                     _ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvj: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    119              return HAL::blockCopy(dest, src, numBytes);
   \        0x2   0x.... 0x....      BL       _ZN8touchgfx3HAL9blockCopyEPvPKvj
   \        0x6   0xBD02             POP      {R1,PC}
    120          }
    121          

   \                                 In section .text, align 2, keep-with-next
    122          void TouchGFXGeneratedHAL::InvalidateCache()
    123          {
   \                     _ZN20TouchGFXGeneratedHAL15InvalidateCacheEv: (+1)
   \        0x0   0xB410             PUSH     {R4}
    124              // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    125              // the DCache must be flushed prior to DMA2D accessing it. That's done
    126              // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    127              // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    128              if (SCB->CCR & SCB_CCR_DC_Msk)
   \        0x2   0x....             LDR.N    R0,??DataTable10_14
   \        0x4   0x6800             LDR      R0,[R0, #+0]
   \        0x6   0x03C0             LSLS     R0,R0,#+15
   \        0x8   0xD51E             BPL.N    ??InvalidateCache_0
    129              {
    130                  SCB_CleanInvalidateDCache();
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0x....             LDR.N    R1,??DataTable10_15
   \        0xE   0x6008             STR      R0,[R1, #+0]
   \       0x10   0xF3BF 0x8F4F      DSB      SY
   \       0x14   0x....             LDR.N    R0,??DataTable10_16
   \       0x16   0x6801             LDR      R1,[R0, #+0]
   \       0x18   0xF3C1 0x324E      UBFX     R2,R1,#+13,#+15
   \                     ??InvalidateCache_1: (+1)
   \       0x1C   0xF3C1 0x03C9      UBFX     R3,R1,#+3,#+10
   \                     ??InvalidateCache_2: (+1)
   \       0x20   0xF643 0x70E0      MOVW     R0,#+16352
   \       0x24   0xEA10 0x1042      ANDS     R0,R0,R2, LSL #+5
   \       0x28   0xEA50 0x7083      ORRS     R0,R0,R3, LSL #+30
   \       0x2C   0x....             LDR.N    R4,??DataTable10_17
   \       0x2E   0x6020             STR      R0,[R4, #+0]
   \       0x30   0x0018             MOVS     R0,R3
   \       0x32   0x1E43             SUBS     R3,R0,#+1
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD1F3             BNE.N    ??InvalidateCache_2
   \       0x38   0x0010             MOVS     R0,R2
   \       0x3A   0x1E42             SUBS     R2,R0,#+1
   \       0x3C   0x2800             CMP      R0,#+0
   \       0x3E   0xD1ED             BNE.N    ??InvalidateCache_1
   \       0x40   0xF3BF 0x8F4F      DSB      SY
   \       0x44   0xF3BF 0x8F6F      ISB      SY
    131              }
    132          }
   \                     ??InvalidateCache_0: (+1)
   \       0x48   0xBC10             POP      {R4}
   \       0x4A   0x4770             BX       LR
    133          

   \                                 In section .text, align 2, keep-with-next
    134          void TouchGFXGeneratedHAL::FlushCache()
    135          {
   \                     _ZN20TouchGFXGeneratedHAL10FlushCacheEv: (+1)
   \        0x0   0xB410             PUSH     {R4}
    136              // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    137              // the DCache must be flushed prior to DMA2D accessing it. That's done
    138              // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    139              // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    140              if (SCB->CCR & SCB_CCR_DC_Msk)
   \        0x2   0x....             LDR.N    R0,??DataTable10_14
   \        0x4   0x6800             LDR      R0,[R0, #+0]
   \        0x6   0x03C0             LSLS     R0,R0,#+15
   \        0x8   0xD51E             BPL.N    ??FlushCache_0
    141              {
    142                  SCB_CleanInvalidateDCache();
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0x....             LDR.N    R1,??DataTable10_15
   \        0xE   0x6008             STR      R0,[R1, #+0]
   \       0x10   0xF3BF 0x8F4F      DSB      SY
   \       0x14   0x....             LDR.N    R0,??DataTable10_16
   \       0x16   0x6801             LDR      R1,[R0, #+0]
   \       0x18   0xF3C1 0x324E      UBFX     R2,R1,#+13,#+15
   \                     ??FlushCache_1: (+1)
   \       0x1C   0xF3C1 0x03C9      UBFX     R3,R1,#+3,#+10
   \                     ??FlushCache_2: (+1)
   \       0x20   0xF643 0x70E0      MOVW     R0,#+16352
   \       0x24   0xEA10 0x1042      ANDS     R0,R0,R2, LSL #+5
   \       0x28   0xEA50 0x7083      ORRS     R0,R0,R3, LSL #+30
   \       0x2C   0x....             LDR.N    R4,??DataTable10_17
   \       0x2E   0x6020             STR      R0,[R4, #+0]
   \       0x30   0x0018             MOVS     R0,R3
   \       0x32   0x1E43             SUBS     R3,R0,#+1
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD1F3             BNE.N    ??FlushCache_2
   \       0x38   0x0010             MOVS     R0,R2
   \       0x3A   0x1E42             SUBS     R2,R0,#+1
   \       0x3C   0x2800             CMP      R0,#+0
   \       0x3E   0xD1ED             BNE.N    ??FlushCache_1
   \       0x40   0xF3BF 0x8F4F      DSB      SY
   \       0x44   0xF3BF 0x8F6F      ISB      SY
    143              }
    144          }
   \                     ??FlushCache_0: (+1)
   \       0x48   0xBC10             POP      {R4}
   \       0x4A   0x4770             BX       LR
    145          
    146          extern "C"
    147          {

   \                                 In section .text, align 2, keep-with-next
    148              void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    149              {
   \                     HAL_LTDC_LineEventCallback: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    150                  if (LTDC->LIPCR == lcd_int_active_line)
   \        0x2   0x....             LDR.N    R1,??DataTable10_6
   \        0x4   0x....             LDR.N    R2,??DataTable10_10
   \        0x6   0x6812             LDR      R2,[R2, #+0]
   \        0x8   0x880B             LDRH     R3,[R1, #+0]
   \        0xA   0x429A             CMP      R2,R3
   \        0xC   0xD111             BNE.N    ??HAL_LTDC_LineEventCallback_0
    151                  {
    152                      //entering active area
    153                      HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
   \        0xE   0x....             LDR.N    R1,??DataTable10_9
   \       0x10   0x8809             LDRH     R1,[R1, #+0]
   \       0x12   0x.... 0x....      BL       HAL_LTDC_ProgramLineEvent
    154                      HAL::getInstance()->vSync();
   \       0x16   0x.... 0x....      BL       _ZN8touchgfx3HAL11getInstanceEv
   \       0x1A   0x.... 0x....      BL       _ZN8touchgfx3HAL5vSyncEv
    155                      OSWrappers::signalVSync();
   \       0x1E   0x.... 0x....      BL       _ZN8touchgfx10OSWrappers11signalVSyncEv
    156                      // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
    157                      // Note: task will also swap when it wakes up, but that operation is guarded and will not have
    158                      // any effect if already swapped.
    159                      HAL::getInstance()->swapFrameBuffers();
   \       0x22   0x.... 0x....      BL       _ZN8touchgfx3HAL11getInstanceEv
   \       0x26   0x.... 0x....      BL       _ZN8touchgfx3HAL16swapFrameBuffersEv
    160                      GPIO::set(GPIO::VSYNC_FREQ);
   \       0x2A   0x2000             MOVS     R0,#+0
   \       0x2C   0x.... 0x....      BL       _ZN8touchgfx4GPIO3setENS0_7GPIO_IDE
   \       0x30   0xE009             B.N      ??HAL_LTDC_LineEventCallback_1
    161                  }
    162                  else
    163                  {
    164                      //exiting active area
    165                      HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
   \                     ??HAL_LTDC_LineEventCallback_0: (+1)
   \       0x32   0x8809             LDRH     R1,[R1, #+0]
   \       0x34   0x.... 0x....      BL       HAL_LTDC_ProgramLineEvent
    166                      GPIO::clear(GPIO::VSYNC_FREQ);
   \       0x38   0x2000             MOVS     R0,#+0
   \       0x3A   0x.... 0x....      BL       _ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE
    167                      HAL::getInstance()->frontPorchEntered();
   \       0x3E   0x.... 0x....      BL       _ZN8touchgfx3HAL11getInstanceEv
   \       0x42   0x.... 0x....      BL       _ZN8touchgfx3HAL17frontPorchEnteredEv
    168                  }
    169              }
   \                     ??HAL_LTDC_LineEventCallback_1: (+1)
   \       0x46   0xBD01             POP      {R0,PC}

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \        0x0   0xE000'E100        DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \        0x0   0xE000'E180        DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \        0x0   0xE000'E400        DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \        0x0   0xE000'ED18        DC32     0xe000ed18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \        0x0   0x....'....        DC32     _ZN46_INTERNAL_24_TouchGFXGeneratedHAL_cpp_c8c66d9048_GLOBAL__N__24_TouchGFXGeneratedHAL_cpp_c8c66d908frameBufE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \        0x0   0x0005'FA00        DC32     0x5fa00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \        0x0   0x....'....        DC32     _ZN46_INTERNAL_24_TouchGFXGeneratedHAL_cpp_c8c66d9048_GLOBAL__N__24_TouchGFXGeneratedHAL_cpp_c8c66d9019lcd_int_active_lineE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \        0x0   0x5000'100C        DC32     0x5000100c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \        0x0   0x5000'1010        DC32     0x50001010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_9:
   \        0x0   0x....'....        DC32     _ZN46_INTERNAL_24_TouchGFXGeneratedHAL_cpp_c8c66d9048_GLOBAL__N__24_TouchGFXGeneratedHAL_cpp_c8c66d9018lcd_int_porch_lineE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_10:
   \        0x0   0x5000'1040        DC32     0x50001040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_11:
   \        0x0   0x5000'1034        DC32     0x50001034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_12:
   \        0x0   0x5000'10AC        DC32     0x500010ac

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_13:
   \        0x0   0x5000'1024        DC32     0x50001024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_14:
   \        0x0   0xE000'ED14        DC32     0xe000ed14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_15:
   \        0x0   0xE000'ED84        DC32     0xe000ed84

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_16:
   \        0x0   0xE000'ED80        DC32     0xe000ed80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_17:
   \        0x0   0xE000'EF74        DC32     0xe000ef74
    170          }
    171          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   HAL_LTDC_LineEventCallback
         8   -> HAL_LTDC_ProgramLineEvent
         8   -> touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)
         8   -> touchgfx::GPIO::set(touchgfx::GPIO::GPIO_ID)
         8   -> touchgfx::HAL::frontPorchEntered()
         8   -> touchgfx::HAL::getInstance()
         8   -> touchgfx::HAL::swapFrameBuffers()
         8   -> touchgfx::HAL::vSync()
         8   -> touchgfx::OSWrappers::signalVSync()
       4   TouchGFXGeneratedHAL::FlushCache()
       4   TouchGFXGeneratedHAL::InvalidateCache()
       8   TouchGFXGeneratedHAL::beginFrame()
         8   -> touchgfx::HAL::beginFrame()
       8   TouchGFXGeneratedHAL::blockCopy(void *, void const *, uint32_t)
         8   -> touchgfx::HAL::blockCopy(void *, void const *, uint32_t)
       8   TouchGFXGeneratedHAL::configureInterrupts()
         8   -> __NVIC_SetPriority(IRQn_Type, uint32_t)
       8   TouchGFXGeneratedHAL::deleter ~TouchGFXGeneratedHAL() noexcept
         8   -> TouchGFXGeneratedHAL::~TouchGFXGeneratedHAL() noexcept
         8   -> operator delete(void *, unsigned int) noexcept
       8   TouchGFXGeneratedHAL::disableInterrupts()
         8   -> __NVIC_DisableIRQ(IRQn_Type)
       8   TouchGFXGeneratedHAL::enableInterrupts()
         8   -> __NVIC_EnableIRQ(IRQn_Type)
       0   TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
       8   TouchGFXGeneratedHAL::endFrame()
         8   -> touchgfx::HAL::endFrame()
       8   TouchGFXGeneratedHAL::flushFrameBuffer()
         8   -> touchgfx::HAL::flushFrameBuffer()
       8   TouchGFXGeneratedHAL::flushFrameBuffer(touchgfx::Rect const &)
         8   -> touchgfx::HAL::flushFrameBuffer(touchgfx::Rect const &)
       0   TouchGFXGeneratedHAL::getTFTFrameBuffer() const
      16   TouchGFXGeneratedHAL::initialize()
        16   -- Indirect call
        16   -> touchgfx::Application::getInstance()
        16   -> touchgfx::HAL::initialize()
       0   TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t *)
       0   TouchGFXGeneratedHAL::~TouchGFXGeneratedHAL() noexcept
       0   __NVIC_DisableIRQ(IRQn_Type)
       0   __NVIC_EnableIRQ(IRQn_Type)
       0   __NVIC_SetPriority(IRQn_Type, uint32_t)
       8   touchgfx::HAL::backPorchExited()
         8   -- Indirect call
         8   -> touchgfx::HAL::swapFrameBuffers()
       8   touchgfx::HAL::frontPorchEntered()
         8   -- Indirect call
       8   touchgfx::HAL::getBlitCaps()
         8   -- Indirect call
       8   touchgfx::HAL::getDMAType()
         8   -- Indirect call
       0   touchgfx::HAL::getFlashDataReader() const
       0   touchgfx::HAL::getInstance()
       0   touchgfx::HAL::getTFTCurrentLine()
       4   touchgfx::HAL::performDisplayOrientationChange()
       0   touchgfx::HAL::sampleKey(uint8_t &)
       0   touchgfx::HAL::setDisplayOrientation(touchgfx::DisplayOrientation)
      16   touchgfx::HAL::setFrameBufferSize(uint16_t, uint16_t)
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
      24   touchgfx::HAL::setFrameBufferStartAddresses(void *, void *, void *)
        24   -> __aeabi_assert
        24   -> __iar_EmptyStepPoint
       8   touchgfx::HAL::taskDelay(uint16_t)
         8   -- Indirect call
       0   touchgfx::HAL::vSync()


   Section sizes:

   Bytes    Function/Label
   -----    --------------
   783'360  <unnamed>::frameBuf
         2  <unnamed>::lcd_int_active_line
         2  <unnamed>::lcd_int_porch_line
         4  ??DataTable10
         4  ??DataTable10_1
         4  ??DataTable10_10
         4  ??DataTable10_11
         4  ??DataTable10_12
         4  ??DataTable10_13
         4  ??DataTable10_14
         4  ??DataTable10_15
         4  ??DataTable10_16
         4  ??DataTable10_17
         4  ??DataTable10_2
         4  ??DataTable10_3
         4  ??DataTable10_4
         4  ??DataTable10_5
         4  ??DataTable10_6
         4  ??DataTable10_7
         4  ??DataTable10_8
         4  ??DataTable10_9
        72  HAL_LTDC_LineEventCallback
        76  TouchGFXGeneratedHAL::FlushCache()
        76  TouchGFXGeneratedHAL::InvalidateCache()
         8  TouchGFXGeneratedHAL::beginFrame()
         8  TouchGFXGeneratedHAL::blockCopy(void *, void const *, uint32_t)
        20  TouchGFXGeneratedHAL::configureInterrupts()
        20  TouchGFXGeneratedHAL::deleter ~TouchGFXGeneratedHAL() noexcept
        16  TouchGFXGeneratedHAL::disableInterrupts()
        16  TouchGFXGeneratedHAL::enableInterrupts()
        46  TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
         8  TouchGFXGeneratedHAL::endFrame()
         8  TouchGFXGeneratedHAL::flushFrameBuffer()
        78  TouchGFXGeneratedHAL::flushFrameBuffer(touchgfx::Rect const &)
         6  TouchGFXGeneratedHAL::getTFTFrameBuffer() const
        48  TouchGFXGeneratedHAL::initialize()
        12  TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t *)
         2  TouchGFXGeneratedHAL::~TouchGFXGeneratedHAL() noexcept
        36  __NVIC_DisableIRQ(IRQn_Type)
        28  __NVIC_EnableIRQ(IRQn_Type)
        36  __NVIC_SetPriority(IRQn_Type, uint32_t)
        22  touchgfx::HAL::backPorchExited()
        10  touchgfx::HAL::frontPorchEntered()
        28  touchgfx::HAL::getBlitCaps()
        16  touchgfx::HAL::getDMAType()
         4  touchgfx::HAL::getFlashDataReader() const
        12  touchgfx::HAL::getInstance()
         6  touchgfx::HAL::getTFTCurrentLine()
        80  touchgfx::HAL::performDisplayOrientationChange()
         4  touchgfx::HAL::sampleKey(uint8_t &)
        12  touchgfx::HAL::setDisplayOrientation(touchgfx::DisplayOrientation)
        80  touchgfx::HAL::setFrameBufferSize(uint16_t, uint16_t)
        92  touchgfx::HAL::setFrameBufferStartAddresses(void *, void *, void *)
        20  touchgfx::HAL::taskDelay(uint16_t)
        12  touchgfx::HAL::vSync()
       656  -- Other

 
       4 bytes in section .bss
     656 bytes in section .rodata
   1'090 bytes in section .text
 783'360 bytes in section TouchGFX_Framebuffer
 
     662 bytes of CODE  memory (+ 428 bytes shared)
       0 bytes of CONST memory (+ 656 bytes shared)
 783'364 bytes of DATA  memory

Errors: none
Warnings: none
