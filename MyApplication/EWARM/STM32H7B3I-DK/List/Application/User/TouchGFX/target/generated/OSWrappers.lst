###############################################################################
#
# IAR ANSI C/C++ Compiler V9.20.1.318/W64 for ARM         09/Feb/2022  10:51:07
# Copyright 1999-2021 IAR Systems AB.
#
#    Cpu mode           =  thumb
#    Endian             =  little
#    Source file        =
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\TouchGFX\target\generated\OSWrappers.cpp
#        [UTF-8]
#    Command line       =
#        -f
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Application\User\TouchGFX\target\generated\OSWrappers.o.rsp
#        (D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\TouchGFX\target\generated\OSWrappers.cpp
#        -D USE_HAL_DRIVER -D STM32H7B3xxQ -D USE_BPP=24 -lC
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\Application\User\TouchGFX\target\generated
#        -lA
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\Application\User\TouchGFX\target\generated
#        -o
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Application\User\TouchGFX\target\generated
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.0\arm\inc\c\DLib_Config_Full.h" -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Core/Inc\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/App\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/target/generated\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/target\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/STM32H7xx_HAL_Driver/Inc\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/STM32H7xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM4F\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/CMSIS/Device/ST/STM32H7xx/Include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/BSP/Components/Common\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/BSP/STM32H7B3I-DK\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Middlewares/ST/touchgfx/framework/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/fonts/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/gui_generated/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/images/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/texts/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/gui/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/videos/include\
#        -Ol --c++ --no_exceptions --no_rtti --no_static_destruction
#        --source_encoding utf8 --text_out utf8 --utf8_text_in)
#        --dependencies=n
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Application\User\TouchGFX\target\generated\OSWrappers.o.d
#    Locale             =  C
#    List file          =
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\Application\User\TouchGFX\target\generated\OSWrappers.lst
#    Object file        =
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Application\User\TouchGFX\target\generated\OSWrappers.o
#    Runtime model:        
#      __CPP_Exceptions =  Disabled
#      __CPP_Language   =  C++14
#      __CPP_Library    =  DLib
#      __CPP_Runtime    =  1
#      __SystemLibrary  =  DLib
#      __dlib_version   =  6
#
###############################################################################

D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\TouchGFX\target\generated\OSWrappers.cpp
      1          /**
      2            ******************************************************************************
      3            * File Name          : OSWrappers.cpp
      4            ******************************************************************************
      5            * This file is generated by TouchGFX Generator 4.18.1. Please, do not edit!
      6            ******************************************************************************
      7            * @attention
      8            *
      9            * Copyright (c) 2022 STMicroelectronics.
     10            * All rights reserved.
     11            *
     12            * This software is licensed under terms that can be found in the LICENSE file
     13            * in the root directory of this software component.
     14            * If no LICENSE file comes with this software, it is provided AS-IS.
     15            *
     16            ******************************************************************************
     17            */
     18          
     19          #include <cassert>
     20          #include <touchgfx/hal/HAL.hpp>
     21          #include <touchgfx/hal/OSWrappers.hpp>
     22          
     23          #include <cmsis_os2.h>
     24          

   \                                 In section .bss, align 4
     25          static osSemaphoreId_t frame_buffer_sem = NULL;
   \                     frame_buffer_sem:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
     26          static osMessageQueueId_t vsync_queue = NULL;
   \                     vsync_queue:
   \        0x0                      DS8 4
     27          
     28          // Just a dummy value to insert in the VSYNC queue.

   \                                 In section .data, align 4
     29          static uint32_t dummy = 0x5a;
   \                     dummy:
   \        0x0   0x0000'005A        DC32 90
     30          
     31          using namespace touchgfx;
     32          
     33          /*
     34           * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
     35           */

   \                                 In section .text, align 2, keep-with-next
     36          void OSWrappers::initialize()
     37          {
   \                     _ZN8touchgfx10OSWrappers10initializeEv: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
     38              // Create a queue of length 1
     39              frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
   \        0x2   0x....             LDR.N    R4,??DataTable6
   \        0x4   0x2200             MOVS     R2,#+0
   \        0x6   0x2101             MOVS     R1,#+1
   \        0x8   0x2001             MOVS     R0,#+1
   \        0xA   0x.... 0x....      BL       osSemaphoreNew
   \        0xE   0x6020             STR      R0,[R4, #+0]
     40              assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
   \       0x10   0x6820             LDR      R0,[R4, #+0]
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD106             BNE.N    ??initialize_0
   \       0x16   0x2228             MOVS     R2,#+40
   \       0x18   0x....             LDR.N    R1,??DataTable6_1
   \       0x1A   0x....             LDR.N    R0,??DataTable6_2
   \       0x1C   0x.... 0x....      BL       __aeabi_assert
   \       0x20   0x.... 0x....      BL       __iar_EmptyStepPoint
     41          
     42              // Create a queue of length 1
     43              vsync_queue = osMessageQueueNew(1, 4, NULL);
   \                     ??initialize_0: (+1)
   \       0x24   0x....             LDR.N    R4,??DataTable6_3
   \       0x26   0x2200             MOVS     R2,#+0
   \       0x28   0x2104             MOVS     R1,#+4
   \       0x2A   0x2001             MOVS     R0,#+1
   \       0x2C   0x.... 0x....      BL       osMessageQueueNew
   \       0x30   0x6020             STR      R0,[R4, #+0]
     44              assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
   \       0x32   0x6820             LDR      R0,[R4, #+0]
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD106             BNE.N    ??initialize_1
   \       0x38   0x222C             MOVS     R2,#+44
   \       0x3A   0x....             LDR.N    R1,??DataTable6_1
   \       0x3C   0x....             LDR.N    R0,??DataTable6_4
   \       0x3E   0x.... 0x....      BL       __aeabi_assert
   \       0x42   0x.... 0x....      BL       __iar_EmptyStepPoint
     45          }
   \                     ??initialize_1: (+1)
   \       0x46   0xBD10             POP      {R4,PC}
     46          
     47          /*
     48           * Take the frame buffer semaphore. Blocks until semaphore is available.
     49           */

   \                                 In section .text, align 2, keep-with-next
     50          void OSWrappers::takeFrameBufferSemaphore()
     51          {
   \                     _ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     52              osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
   \        0x2   0xF05F 0x31FF      MOVS     R1,#+4294967295
   \        0x6   0x....             LDR.N    R0,??DataTable6
   \        0x8   0x6800             LDR      R0,[R0, #+0]
   \        0xA   0x.... 0x....      BL       osSemaphoreAcquire
     53          }
   \        0xE   0xBD01             POP      {R0,PC}
     54          
     55          /*
     56           * Release the frame buffer semaphore.
     57           */

   \                                 In section .text, align 2, keep-with-next
     58          void OSWrappers::giveFrameBufferSemaphore()
     59          {
   \                     _ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     60              osSemaphoreRelease(frame_buffer_sem);
   \        0x2   0x....             LDR.N    R0,??DataTable6
   \        0x4   0x6800             LDR      R0,[R0, #+0]
   \        0x6   0x.... 0x....      BL       osSemaphoreRelease
     61          }
   \        0xA   0xBD01             POP      {R0,PC}
     62          
     63          /*
     64           * Attempt to obtain the frame buffer semaphore. If semaphore is not available, do
     65           * nothing.
     66           *
     67           * Note must return immediately! This function does not care who has the taken the semaphore,
     68           * it only serves to make sure that the semaphore is taken by someone.
     69           */

   \                                 In section .text, align 2, keep-with-next
     70          void OSWrappers::tryTakeFrameBufferSemaphore()
     71          {
   \                     _ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     72              osSemaphoreAcquire(frame_buffer_sem, 0);
   \        0x2   0x2100             MOVS     R1,#+0
   \        0x4   0x....             LDR.N    R0,??DataTable6
   \        0x6   0x6800             LDR      R0,[R0, #+0]
   \        0x8   0x.... 0x....      BL       osSemaphoreAcquire
     73          }
   \        0xC   0xBD01             POP      {R0,PC}
     74          
     75          /*
     76           * Release the frame buffer semaphore in a way that is safe in interrupt context. Called
     77           * from ISR.
     78           *
     79           * Release the frame buffer semaphore in a way that is safe in interrupt context.
     80           * Called from ISR.
     81           */

   \                                 In section .text, align 2, keep-with-next
     82          void OSWrappers::giveFrameBufferSemaphoreFromISR()
     83          {
   \                     _ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     84              osSemaphoreRelease(frame_buffer_sem);
   \        0x2   0x....             LDR.N    R0,??DataTable6
   \        0x4   0x6800             LDR      R0,[R0, #+0]
   \        0x6   0x.... 0x....      BL       osSemaphoreRelease
     85          }
   \        0xA   0xBD01             POP      {R0,PC}
     86          
     87          /*
     88           * Signal that a VSYNC has occurred. Should make the vsync queue/mutex available.
     89           *
     90           * Note This function is called from an ISR, and should (depending on OS) trigger a
     91           * scheduling.
     92           */

   \                                 In section .text, align 2, keep-with-next
     93          void OSWrappers::signalVSync()
     94          {
   \                     _ZN8touchgfx10OSWrappers11signalVSyncEv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     95              osMessageQueuePut(vsync_queue, &dummy, 0, 0);
   \        0x2   0x2300             MOVS     R3,#+0
   \        0x4   0x2200             MOVS     R2,#+0
   \        0x6   0x....             LDR.N    R1,??DataTable6_5
   \        0x8   0x....             LDR.N    R0,??DataTable6_3
   \        0xA   0x6800             LDR      R0,[R0, #+0]
   \        0xC   0x.... 0x....      BL       osMessageQueuePut
     96          }
   \       0x10   0xBD01             POP      {R0,PC}
     97          
     98          /*
     99            * Signal that the rendering of the frame has completed. Used by
    100            * some systems to avoid using any previous vsync.
    101            */

   \                                 In section .text, align 2, keep-with-next
    102          void OSWrappers::signalRenderingDone()
    103          {
    104              // Empty implementation for CMSIS V2
    105          }
   \                     _ZN8touchgfx10OSWrappers19signalRenderingDoneEv: (+1)
   \        0x0   0x4770             BX       LR
    106          
    107          /*
    108           * This function blocks until a VSYNC occurs.
    109           *
    110           * Note This function must first clear the mutex/queue and then wait for the next one to
    111           * occur.
    112           */

   \                                 In section .text, align 2, keep-with-next
    113          void OSWrappers::waitForVSync()
    114          {
   \                     _ZN8touchgfx10OSWrappers12waitForVSyncEv: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
    115              uint32_t dummyGet;
    116              // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    117              osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
   \        0x2   0x....             LDR.N    R4,??DataTable6_3
   \        0x4   0x2300             MOVS     R3,#+0
   \        0x6   0x2200             MOVS     R2,#+0
   \        0x8   0x4669             MOV      R1,SP
   \        0xA   0x6820             LDR      R0,[R4, #+0]
   \        0xC   0x.... 0x....      BL       osMessageQueueGet
    118          
    119              // Then, wait for next VSYNC to occur.
    120              osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
   \       0x10   0xF05F 0x33FF      MOVS     R3,#+4294967295
   \       0x14   0x2200             MOVS     R2,#+0
   \       0x16   0x4669             MOV      R1,SP
   \       0x18   0x6820             LDR      R0,[R4, #+0]
   \       0x1A   0x.... 0x....      BL       osMessageQueueGet
    121          }
   \       0x1E   0xBD13             POP      {R0,R1,R4,PC}
    122          
    123          /*
    124           * A function that causes executing task to sleep for a number of milliseconds.
    125           *
    126           * A function that causes executing task to sleep for a number of milliseconds.
    127           * This function is OPTIONAL. It is only used by the TouchGFX in the case of
    128           * a specific frame refresh strategy (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).
    129           * Due to backwards compatibility, in order for this function to be useable by the HAL
    130           * the function must be explicitly registered:
    131           * hal.registerTaskDelayFunction(&OSWrappers::taskDelay)
    132           *
    133           * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
    134           * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
    135           */

   \                                 In section .text, align 2, keep-with-next
    136          void OSWrappers::taskDelay(uint16_t ms)
    137          {
   \                     _ZN8touchgfx10OSWrappers9taskDelayEt: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    138              osDelay(static_cast<uint32_t>(ms));
   \        0x2   0xB280             UXTH     R0,R0
   \        0x4   0x.... 0x....      BL       osDelay
    139          }
   \        0x8   0xBD01             POP      {R0,PC}
    140          
    141          /**
    142           * A function that causes the executing task to yield control to
    143           * another thread. This function is used by the framework when it
    144           * is necessary to wait a little before continuing (e.g. drawing).
    145           *
    146           * The implementation should typically request the operating
    147           * system to change to another task of similar priority. When
    148           * running without an operating system, the implementation can run
    149           * a very short task and return.
    150           */

   \                                 In section .text, align 2, keep-with-next
    151          void OSWrappers::taskYield()
    152          {
   \                     _ZN8touchgfx10OSWrappers9taskYieldEv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    153              osThreadYield();
   \        0x2   0x.... 0x....      BL       osThreadYield
    154          }
   \        0x6   0xBD01             POP      {R0,PC}

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \        0x0   0x....'....        DC32     frame_buffer_sem

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \        0x0   0x....'....        DC32     vsync_queue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \        0x0   0x....'....        DC32     dummy

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x28 0x66          DC8 0x28, 0x66, 0x72, 0x61, 0x6D, 0x65, 0x5F, 0x62

   \              0x72 0x61    

   \              0x6D 0x65    

   \              0x5F 0x62
   \        0x8   0x75 0x66          DC8 0x75, 0x66, 0x66, 0x65, 0x72, 0x5F, 0x73, 0x65

   \              0x66 0x65    

   \              0x72 0x5F    

   \              0x73 0x65
   \       0x10   0x6D 0x20          DC8 0x6D, 0x20, 0x21, 0x3D, 0x20, 0x30, 0x29, 0x20

   \              0x21 0x3D    

   \              0x20 0x30    

   \              0x29 0x20
   \       0x18   0x26 0x26          DC8 0x26, 0x26, 0x20, 0x22, 0x43, 0x72, 0x65, 0x61

   \              0x20 0x22    

   \              0x43 0x72    

   \              0x65 0x61
   \       0x20   0x74 0x69          DC8 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x6F, 0x66, 0x20

   \              0x6F 0x6E    

   \              0x20 0x6F    

   \              0x66 0x20
   \       0x28   0x66 0x72          DC8 0x66, 0x72, 0x61, 0x6D, 0x65, 0x62, 0x75, 0x66

   \              0x61 0x6D    

   \              0x65 0x62    

   \              0x75 0x66
   \       0x30   0x66 0x65          DC8 0x66, 0x65, 0x72, 0x20, 0x73, 0x65, 0x6D, 0x61

   \              0x72 0x20    

   \              0x73 0x65    

   \              0x6D 0x61
   \       0x38   0x70 0x68          DC8 0x70, 0x68, 0x6F, 0x72, 0x65, 0x20, 0x66, 0x61

   \              0x6F 0x72    

   \              0x65 0x20    

   \              0x66 0x61
   \       0x40   0x69 0x6C          DC8 0x69, 0x6C, 0x65, 0x64, 0x22, 0

   \              0x65 0x64    

   \              0x22 0x00
   \       0x46                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x44 0x3A          DC8 0x44, 0x3A, 0x5C, 0x30, 0x30, 0x31, 0x5F, 0x50

   \              0x5C 0x30    

   \              0x30 0x31    

   \              0x5F 0x50
   \        0x8   0x72 0x6F          DC8 0x72, 0x6F, 0x6A, 0x65, 0x63, 0x74, 0x5C, 0x42

   \              0x6A 0x65    

   \              0x63 0x74    

   \              0x5C 0x42
   \       0x10   0x5F 0x54          DC8 0x5F, 0x54, 0x6F, 0x75, 0x63, 0x68, 0x47, 0x46

   \              0x6F 0x75    

   \              0x63 0x68    

   \              0x47 0x46
   \       0x18   0x58 0x5F          DC8 0x58, 0x5F, 0x53, 0x74, 0x6D, 0x33, 0x32, 0x5C

   \              0x53 0x74    

   \              0x6D 0x33    

   \              0x32 0x5C
   \       0x20   0x54 0x6F          DC8 0x54, 0x6F, 0x75, 0x63, 0x68, 0x47, 0x46, 0x58

   \              0x75 0x63    

   \              0x68 0x47    

   \              0x46 0x58
   \       0x28   0x5C 0x4D          DC8 0x5C, 0x4D, 0x79, 0x41, 0x70, 0x70, 0x6C, 0x69

   \              0x79 0x41    

   \              0x70 0x70    

   \              0x6C 0x69
   \       0x30   0x63 0x61          DC8 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x5C, 0x54

   \              0x74 0x69    

   \              0x6F 0x6E    

   \              0x5C 0x54
   \       0x38   0x6F 0x75          DC8 0x6F, 0x75, 0x63, 0x68, 0x47, 0x46, 0x58, 0x5C

   \              0x63 0x68    

   \              0x47 0x46    

   \              0x58 0x5C
   \       0x40   0x74 0x61          DC8 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5C, 0x67

   \              0x72 0x67    

   \              0x65 0x74    

   \              0x5C 0x67
   \       0x48   0x65 0x6E          DC8 0x65, 0x6E, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64

   \              0x65 0x72    

   \              0x61 0x74    

   \              0x65 0x64
   \       0x50   0x5C 0x4F          DC8 0x5C, 0x4F, 0x53, 0x57, 0x72, 0x61, 0x70, 0x70

   \              0x53 0x57    

   \              0x72 0x61    

   \              0x70 0x70
   \       0x58   0x65 0x72          DC8 0x65, 0x72, 0x73, 0x2E, 0x63, 0x70, 0x70, 0

   \              0x73 0x2E    

   \              0x63 0x70    

   \              0x70 0x00

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x28 0x76          DC8 0x28, 0x76, 0x73, 0x79, 0x6E, 0x63, 0x5F, 0x71

   \              0x73 0x79    

   \              0x6E 0x63    

   \              0x5F 0x71
   \        0x8   0x75 0x65          DC8 0x75, 0x65, 0x75, 0x65, 0x20, 0x21, 0x3D, 0x20

   \              0x75 0x65    

   \              0x20 0x21    

   \              0x3D 0x20
   \       0x10   0x30 0x29          DC8 0x30, 0x29, 0x20, 0x26, 0x26, 0x20, 0x22, 0x43

   \              0x20 0x26    

   \              0x26 0x20    

   \              0x22 0x43
   \       0x18   0x72 0x65          DC8 0x72, 0x65, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20

   \              0x61 0x74    

   \              0x69 0x6F    

   \              0x6E 0x20
   \       0x20   0x6F 0x66          DC8 0x6F, 0x66, 0x20, 0x76, 0x73, 0x79, 0x6E, 0x63

   \              0x20 0x76    

   \              0x73 0x79    

   \              0x6E 0x63
   \       0x28   0x20 0x6D          DC8 0x20, 0x6D, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65

   \              0x65 0x73    

   \              0x73 0x61    

   \              0x67 0x65
   \       0x30   0x20 0x71          DC8 0x20, 0x71, 0x75, 0x65, 0x75, 0x65, 0x20, 0x66

   \              0x75 0x65    

   \              0x75 0x65    

   \              0x20 0x66
   \       0x38   0x61 0x69          DC8 0x61, 0x69, 0x6C, 0x65, 0x64, 0x22, 0

   \              0x6C 0x65    

   \              0x64 0x22    

   \              0x00
   \       0x3F                      DS8 1
    155          
    156          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
    157          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   touchgfx::OSWrappers::giveFrameBufferSemaphore()
         8   -> osSemaphoreRelease
       8   touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR()
         8   -> osSemaphoreRelease
       8   touchgfx::OSWrappers::initialize()
         8   -> __aeabi_assert
         8   -> __iar_EmptyStepPoint
         8   -> osMessageQueueNew
         8   -> osSemaphoreNew
       0   touchgfx::OSWrappers::signalRenderingDone()
       8   touchgfx::OSWrappers::signalVSync()
         8   -> osMessageQueuePut
       8   touchgfx::OSWrappers::takeFrameBufferSemaphore()
         8   -> osSemaphoreAcquire
       8   touchgfx::OSWrappers::taskDelay(uint16_t)
         8   -> osDelay
       8   touchgfx::OSWrappers::taskYield()
         8   -> osThreadYield
       8   touchgfx::OSWrappers::tryTakeFrameBufferSemaphore()
         8   -> osSemaphoreAcquire
      16   touchgfx::OSWrappers::waitForVSync()
        16   -> osMessageQueueGet


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
      72  ?_0
      96  ?_1
      64  ?_2
       4  dummy
       4  frame_buffer_sem
      12  touchgfx::OSWrappers::giveFrameBufferSemaphore()
      12  touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR()
      72  touchgfx::OSWrappers::initialize()
       2  touchgfx::OSWrappers::signalRenderingDone()
      18  touchgfx::OSWrappers::signalVSync()
      16  touchgfx::OSWrappers::takeFrameBufferSemaphore()
      10  touchgfx::OSWrappers::taskDelay(uint16_t)
       8  touchgfx::OSWrappers::taskYield()
      14  touchgfx::OSWrappers::tryTakeFrameBufferSemaphore()
      32  touchgfx::OSWrappers::waitForVSync()
       4  vsync_queue

 
   8 bytes in section .bss
   4 bytes in section .data
 232 bytes in section .rodata
 220 bytes in section .text
 
 220 bytes of CODE  memory
 232 bytes of CONST memory
  12 bytes of DATA  memory

Errors: none
Warnings: none
