###############################################################################
#
# IAR ANSI C/C++ Compiler V9.20.1.318/W64 for ARM         09/Feb/2022  10:51:37
# Copyright 1999-2021 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\TouchGFX\target\generated\STM32DMA.cpp
#        [UTF-8]
#    Command line                 =
#        -f
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Application\User\TouchGFX\target\generated\STM32DMA.o.rsp
#        (D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\TouchGFX\target\generated\STM32DMA.cpp
#        -D USE_HAL_DRIVER -D STM32H7B3xxQ -D USE_BPP=24 -lC
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\Application\User\TouchGFX\target\generated
#        -lA
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\Application\User\TouchGFX\target\generated
#        -o
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Application\User\TouchGFX\target\generated
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.0\arm\inc\c\DLib_Config_Full.h" -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Core/Inc\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/App\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/target/generated\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/target\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/STM32H7xx_HAL_Driver/Inc\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/STM32H7xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM4F\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/CMSIS/Device/ST/STM32H7xx/Include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/BSP/Components/Common\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/BSP/STM32H7B3I-DK\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Middlewares/ST/touchgfx/framework/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/fonts/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/gui_generated/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/images/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/texts/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/gui/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/videos/include\
#        -Ol --c++ --no_exceptions --no_rtti --no_static_destruction
#        --source_encoding utf8 --text_out utf8 --utf8_text_in)
#        --dependencies=n
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Application\User\TouchGFX\target\generated\STM32DMA.o.d
#    Locale                       =  C
#    List file                    =
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\Application\User\TouchGFX\target\generated\STM32DMA.lst
#    Object file                  =
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Application\User\TouchGFX\target\generated\STM32DMA.o
#    Runtime model:                  
#      __CPP_Exceptions           =  Disabled
#      __CPP_Language             =  C++14
#      __CPP_Library              =  DLib
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_full_locale_support =  1
#      __dlib_version             =  6
#
###############################################################################

D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\TouchGFX\target\generated\STM32DMA.cpp
      1          
      2          /**
      3            ******************************************************************************
      4            * File Name          : STM32DMA.cpp
      5            ******************************************************************************
      6            * This file is generated by TouchGFX Generator 4.18.1. Please, do not edit!
      7            ******************************************************************************
      8            * @attention
      9            *
     10            * Copyright (c) 2022 STMicroelectronics.
     11            * All rights reserved.
     12            *
     13            * This software is licensed under terms that can be found in the LICENSE file
     14            * in the root directory of this software component.
     15            * If no LICENSE file comes with this software, it is provided AS-IS.
     16            *
     17            ******************************************************************************
     18            */
     19          
     20          #include "stm32h7xx_hal.h"

   \                                 In section .text, align 4, keep-with-next
   \   static __vfp void __NVIC_EnableIRQ(IRQn_Type)
   \                     _ZN34_INTERNAL_12_STM32DMA_cpp_5225cd5d16__NVIC_EnableIRQE9IRQn_Type: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xB209             SXTH     R1,R1
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD409             BMI.N    ??__NVIC_EnableIRQ_0
   \        0x8   0x2201             MOVS     R2,#+1
   \        0xA   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \        0xE   0x408A             LSLS     R2,R2,R1
   \       0x10   0x.... 0x....      LDR.W    R1,??DataTable7
   \       0x14   0xB200             SXTH     R0,R0
   \       0x16   0x0940             LSRS     R0,R0,#+5
   \       0x18   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \       0x1C   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \   static __vfp void __NVIC_DisableIRQ(IRQn_Type)
   \                     _ZN34_INTERNAL_12_STM32DMA_cpp_5225cd5d17__NVIC_DisableIRQE9IRQn_Type: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xB209             SXTH     R1,R1
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD40D             BMI.N    ??__NVIC_DisableIRQ_0
   \        0x8   0x2201             MOVS     R2,#+1
   \        0xA   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \        0xE   0x408A             LSLS     R2,R2,R1
   \       0x10   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \       0x14   0xB200             SXTH     R0,R0
   \       0x16   0x0940             LSRS     R0,R0,#+5
   \       0x18   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \       0x1C   0xF3BF 0x8F4F      DSB      SY
   \       0x20   0xF3BF 0x8F6F      ISB      SY
   \                     ??__NVIC_DisableIRQ_0: (+1)
   \       0x24   0x4770             BX       LR
     21          #include "stm32h7xx_hal_dma2d.h"
     22          #include <STM32DMA.hpp>

   \                                 In section .text, align 2
   \   __vfp touchgfx::colortype::colortype()
   \                     _ZN8touchgfx9colortypeC1Ev: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
   \        0x2   0x6001             STR      R1,[R0, #+0]
   \        0x4   0x4770             BX       LR

   \                                 In section .text, align 2
   \   __vfp touchgfx::colortype::operator uint32_t() const
   \                     _ZNK8touchgfx9colortypecvjEv: (+1)
   \        0x0   0x6800             LDR      R0,[R0, #+0]
   \        0x2   0x4770             BX       LR

   \                                 In section .text, align 2
   \   __vfp touchgfx::BlitOp::BlitOp()
   \                     _ZN8touchgfx6BlitOpC1Ev: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0xF114 0x000C      ADDS     R0,R4,#+12
   \        0x8   0x.... 0x....      BL       _ZN8touchgfx9colortypeC1Ev
   \        0xC   0x0020             MOVS     R0,R4
   \        0xE   0xBD10             POP      {R4,PC}

   \                                 In section .text, align 2
   \   __vfp void touchgfx::DMA_Interface::flush()
   \                     _ZN8touchgfx13DMA_Interface5flushEv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x6801             LDR      R1,[R0, #+0]
   \        0x4   0x6C49             LDR      R1,[R1, #+68]
   \        0x6   0x4788             BLX      R1
   \        0x8   0xBD01             POP      {R0,PC}

   \                                 In section .text, align 2
   \   __vfp touchgfx::DMA_Interface::subobject DMA_Interface(touchgfx::DMA_Queue &)
   \                     _ZN8touchgfx13DMA_InterfaceC2ERNS_9DMA_QueueE: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x.... 0x....      BL       _ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE
   \        0x6   0xBD02             POP      {R1,PC}

   \                                 In section .text, align 2
   \   __vfp touchgfx::DMA_Interface::DMA_Interface(touchgfx::DMA_Queue &)
   \                     _ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE: (+1)
   \        0x0   0x6041             STR      R1,[R0, #+4]
   \        0x2   0x2100             MOVS     R1,#+0
   \        0x4   0x7201             STRB     R1,[R0, #+8]
   \        0x6   0x2100             MOVS     R1,#+0
   \        0x8   0x7241             STRB     R1,[R0, #+9]
   \        0xA   0x4770             BX       LR

   \                                 In section .text, align 2
   \   __vfp touchgfx::DMAType STM32DMA::getDMAType()
   \                     _ZN8STM32DMA10getDMATypeEv: (+1)
   \        0x0   0x2001             MOVS     R0,#+1
   \        0x2   0x4770             BX       LR

   \                                 In section .text, align 2
   \   __vfp void STM32DMA::signalDMAInterrupt()
   \                     _ZN8STM32DMA18signalDMAInterruptEv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x6801             LDR      R1,[R0, #+0]
   \        0x4   0x6A89             LDR      R1,[R1, #+40]
   \        0x6   0x4788             BLX      R1
   \        0x8   0xBD01             POP      {R0,PC}
     23          #include <cassert>
     24          #include <touchgfx/Color.hpp>
     25          #include <touchgfx/hal/HAL.hpp>

   \                                 In section .text, align 4
   \   __vfp touchgfx::HAL *touchgfx::HAL::getInstance()
   \                     _ZN8touchgfx3HAL11getInstanceEv: (+1)
   \        0x0   0x4801             LDR.N    R0,??getInstance_0
   \        0x2   0x6800             LDR      R0,[R0, #+0]
   \        0x4   0x4770             BX       LR
   \        0x6   0xBF00             Nop
   \                     ??getInstance_0:
   \        0x8   0x....'....        DC32     _ZN8touchgfx3HAL8instanceE

   \                                 In section .text, align 2
   \   __vfp void touchgfx::HAL::signalDMAInterrupt()
   \                     _ZN8touchgfx3HAL18signalDMAInterruptEv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x0001             MOVS     R1,R0
   \        0x4   0x6848             LDR      R0,[R1, #+4]
   \        0x6   0x6849             LDR      R1,[R1, #+4]
   \        0x8   0x6809             LDR      R1,[R1, #+0]
   \        0xA   0x6949             LDR      R1,[R1, #+20]
   \        0xC   0x4788             BLX      R1
   \        0xE   0xBD01             POP      {R0,PC}
     26          #include <touchgfx/hal/OSWrappers.hpp>
     27          #include <touchgfx/lcd/LCD.hpp>
     28          
     29          /* Makes touchgfx specific types and variables visible to this file */
     30          using namespace touchgfx;
     31          
     32          typedef struct
     33          {
     34              const uint16_t format;
     35              const uint16_t size;
     36              const uint32_t* const data;
     37          } clutData_t;
     38          
     39          extern "C" DMA2D_HandleTypeDef hdma2d;
     40          
     41          extern "C" {

   \                                 In section .text, align 2, keep-with-next
     42              static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
     43              {
   \                     _ZN34_INTERNAL_12_STM32DMA_cpp_5225cd5d22DMA2D_XferCpltCallbackEP21__DMA2D_HandleTypeDef: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     44                  (void)handle; // Unused argument
     45                  HAL::getInstance()->signalDMAInterrupt();
   \        0x2   0x.... 0x....      BL       _ZN8touchgfx3HAL11getInstanceEv
   \        0x6   0x.... 0x....      BL       _ZN8touchgfx3HAL18signalDMAInterruptEv
     46              }
   \        0xA   0xBD01             POP      {R0,PC}
     47          }
     48          

   \                                 In section .text, align 2, keep-with-next
   \   __vfp STM32DMA::subobject STM32DMA()
   \                     _ZN8STM32DMAC2Ev: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x.... 0x....      BL       _ZN8STM32DMAC1Ev
   \        0x6   0xBD02             POP      {R1,PC}

   \                                 In section .text, align 2, keep-with-next
     49          STM32DMA::STM32DMA()
     50              : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
     51          {
   \                     _ZN8STM32DMAC1Ev: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0xF114 0x010C      ADDS     R1,R4,#+12
   \        0x8   0x0020             MOVS     R0,R4
   \        0xA   0x.... 0x....      BL       _ZN8touchgfx13DMA_InterfaceC2ERNS_9DMA_QueueE
   \        0xE   0x....             LDR.N    R0,??DataTable7_2
   \       0x10   0x6020             STR      R0,[R4, #+0]
   \       0x12   0x2260             MOVS     R2,#+96
   \       0x14   0xF114 0x0120      ADDS     R1,R4,#+32
   \       0x18   0xF114 0x000C      ADDS     R0,R4,#+12
   \       0x1C   0x.... 0x....      BL       _ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEm
   \       0x20   0x2360             MOVS     R3,#+96
   \       0x22   0x2220             MOVS     R2,#+32
   \       0x24   0x....             LDR.N    R1,??DataTable7_3
   \       0x26   0xF114 0x0020      ADDS     R0,R4,#+32
   \       0x2A   0x.... 0x....      BL       __aeabi_vec_ctor_nocookie_nodtor
     52          }
   \       0x2E   0x0020             MOVS     R0,R4
   \       0x30   0xBD10             POP      {R4,PC}
     53          

   \                                 In section .text, align 2, keep-with-next
   \   __vfp STM32DMA::deleter ~STM32DMA() noexcept
   \                     _ZN8STM32DMAD0Ev: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x.... 0x....      BL       _ZN8STM32DMAD1Ev
   \        0xA   0xF44F 0x6142      MOV      R1,#+3104
   \        0xE   0x0020             MOVS     R0,R4
   \       0x10   0x.... 0x....      BL       _ZdlPvj
   \       0x14   0xBD10             POP      {R4,PC}

   \                                 In section .text, align 2, keep-with-next
   \   __vfp STM32DMA::subobject ~STM32DMA() noexcept
   \                     _ZN8STM32DMAD2Ev: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x.... 0x....      BL       _ZN8STM32DMAD1Ev
   \        0x6   0xBD02             POP      {R1,PC}

   \                                 In section .text, align 2, keep-with-next
     54          STM32DMA::~STM32DMA()
     55          {
   \                     _ZN8STM32DMAD1Ev: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x....             LDR.N    R0,??DataTable7_2
   \        0x6   0x6020             STR      R0,[R4, #+0]
     56              /* Disable DMA2D global Interrupt */
     57              NVIC_DisableIRQ(DMA2D_IRQn);
   \        0x8   0x205A             MOVS     R0,#+90
   \        0xA   0x.... 0x....      BL       _ZN34_INTERNAL_12_STM32DMA_cpp_5225cd5d17__NVIC_DisableIRQE9IRQn_Type
     58          }
   \        0xE   0x0020             MOVS     R0,R4
   \       0x10   0xBD10             POP      {R4,PC}
     59          

   \                                 In section .text, align 2, keep-with-next
     60          void STM32DMA::initialize()
     61          {
   \                     _ZN8STM32DMA10initializeEv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     62              /* Ensure DMA2D Clock is enabled */
     63              __HAL_RCC_DMA2D_CLK_ENABLE();
   \        0x2   0x....             LDR.N    R0,??DataTable7_4
   \        0x4   0x6801             LDR      R1,[R0, #+0]
   \        0x6   0xF051 0x0110      ORRS     R1,R1,#0x10
   \        0xA   0x6001             STR      R1,[R0, #+0]
   \        0xC   0x6800             LDR      R0,[R0, #+0]
   \        0xE   0xF010 0x0010      ANDS     R0,R0,#0x10
   \       0x12   0x9000             STR      R0,[SP, #+0]
   \       0x14   0x9800             LDR      R0,[SP, #+0]
     64              __HAL_RCC_DMA2D_FORCE_RESET();
   \       0x16   0x....             LDR.N    R0,??DataTable7_5
   \       0x18   0x6801             LDR      R1,[R0, #+0]
   \       0x1A   0xF051 0x0110      ORRS     R1,R1,#0x10
   \       0x1E   0x6001             STR      R1,[R0, #+0]
     65              __HAL_RCC_DMA2D_RELEASE_RESET();
   \       0x20   0x6801             LDR      R1,[R0, #+0]
   \       0x22   0xF031 0x0110      BICS     R1,R1,#0x10
   \       0x26   0x6001             STR      R1,[R0, #+0]
     66          
     67              /* Add transfer complete callback function */
     68              hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
   \       0x28   0x....             LDR.N    R0,??DataTable7_6
   \       0x2A   0x....             LDR.N    R1,??DataTable7_7
   \       0x2C   0x6208             STR      R0,[R1, #+32]
     69          
     70              /* Enable DMA2D global Interrupt */
     71              NVIC_EnableIRQ(DMA2D_IRQn);
   \       0x2E   0x205A             MOVS     R0,#+90
   \       0x30   0x.... 0x....      BL       _ZN34_INTERNAL_12_STM32DMA_cpp_5225cd5d16__NVIC_EnableIRQE9IRQn_Type
     72          }
   \       0x34   0xBD01             POP      {R0,PC}
     73          

   \                                 In section .text, align 4
     74          inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
     75          {
   \                     _ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
     76              // Default color mode set to ARGB8888
     77              uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
   \        0x2   0x2400             MOVS     R4,#+0
     78          
     79              switch (format)
   \        0x4   0xB2C9             UXTB     R1,R1
   \        0x6   0x2900             CMP      R1,#+0
   \        0x8   0xD00B             BEQ.N    ??getChromARTInputFormat_1
   \        0xA   0x1E49             SUBS     R1,R1,#+1
   \        0xC   0xD007             BEQ.N    ??getChromARTInputFormat_2
   \        0xE   0x1E49             SUBS     R1,R1,#+1
   \       0x10   0xD003             BEQ.N    ??getChromARTInputFormat_3
   \       0x12   0x1F49             SUBS     R1,R1,#+5
   \       0x14   0x2904             CMP      R1,#+4
   \       0x16   0xD906             BLS.N    ??getChromARTInputFormat_4
   \       0x18   0xE007             B.N      ??getChromARTInputFormat_5
     80              {
     81              case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
     82                  dma2dColorMode = DMA2D_INPUT_ARGB8888;
   \                     ??getChromARTInputFormat_3: (+1)
   \       0x1A   0x2400             MOVS     R4,#+0
     83                  break;
   \       0x1C   0xE00C             B.N      ??getChromARTInputFormat_6
     84              case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
     85                  dma2dColorMode = DMA2D_INPUT_RGB888;
   \                     ??getChromARTInputFormat_2: (+1)
   \       0x1E   0x2401             MOVS     R4,#+1
     86                  break;
   \       0x20   0xE00A             B.N      ??getChromARTInputFormat_6
     87              case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
     88                  dma2dColorMode = DMA2D_INPUT_RGB565;
   \                     ??getChromARTInputFormat_1: (+1)
   \       0x22   0x2402             MOVS     R4,#+2
     89                  break;
   \       0x24   0xE008             B.N      ??getChromARTInputFormat_6
     90              case Bitmap::ARGB2222: /* Fall through */
     91              case Bitmap::ABGR2222: /* Fall through */
     92              case Bitmap::RGBA2222: /* Fall through */
     93              case Bitmap::BGRA2222: /* Fall through */
     94              case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
     95                  dma2dColorMode = DMA2D_INPUT_L8;
   \                     ??getChromARTInputFormat_4: (+1)
   \       0x26   0x2405             MOVS     R4,#+5
     96                  break;
   \       0x28   0xE006             B.N      ??getChromARTInputFormat_6
     97              case Bitmap::BW:     /* Fall through */
     98              case Bitmap::BW_RLE: /* Fall through */
     99              case Bitmap::GRAY4:  /* Fall through */
    100              case Bitmap::GRAY2:  /* Fall through */
    101              default:             /* Unsupported input format for DMA2D */
    102                  assert(0 && "Unsupported Format!");
   \                     ??getChromARTInputFormat_5: (+1)
   \       0x2A   0x2266             MOVS     R2,#+102
   \       0x2C   0x4903             LDR.N    R1,??getChromARTInputFormat_0
   \       0x2E   0x4804             LDR.N    R0,??getChromARTInputFormat_0+0x4
   \       0x30   0x.... 0x....      BL       __aeabi_assert
   \       0x34   0x.... 0x....      BL       __iar_EmptyStepPoint
    103                  break;
    104              }
    105          
    106              return dma2dColorMode;
   \                     ??getChromARTInputFormat_6: (+1)
   \       0x38   0x0020             MOVS     R0,R4
   \       0x3A   0xBD10             POP      {R4,PC}
   \                     ??getChromARTInputFormat_0:
   \       0x3C   0x....'....        DC32     _ZZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatEEs_1
   \       0x40   0x....'....        DC32     _ZZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatEEs_0
    107          }
    108          

   \                                 In section .text, align 4
    109          inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
    110          {
   \                     _ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    111              // Default color mode set to ARGB8888
    112              uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
   \        0x2   0x2400             MOVS     R4,#+0
    113          
    114              switch (format)
   \        0x4   0xB2C9             UXTB     R1,R1
   \        0x6   0x2900             CMP      R1,#+0
   \        0x8   0xD00B             BEQ.N    ??getChromARTOutputFormat_1
   \        0xA   0x1E49             SUBS     R1,R1,#+1
   \        0xC   0xD007             BEQ.N    ??getChromARTOutputFormat_2
   \        0xE   0x1E49             SUBS     R1,R1,#+1
   \       0x10   0xD003             BEQ.N    ??getChromARTOutputFormat_3
   \       0x12   0x1F49             SUBS     R1,R1,#+5
   \       0x14   0x2903             CMP      R1,#+3
   \       0x16   0xD902             BLS.N    ??getChromARTOutputFormat_2
   \       0x18   0xE005             B.N      ??getChromARTOutputFormat_4
    115              {
    116              case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
    117                  dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
   \                     ??getChromARTOutputFormat_3: (+1)
   \       0x1A   0x2400             MOVS     R4,#+0
    118                  break;
   \       0x1C   0xE00A             B.N      ??getChromARTOutputFormat_5
    119              case Bitmap::RGB888:   /* Fall through */
    120              case Bitmap::ARGB2222: /* Fall through */
    121              case Bitmap::ABGR2222: /* Fall through */
    122              case Bitmap::RGBA2222: /* Fall through */
    123              case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
    124                  dma2dColorMode = DMA2D_OUTPUT_RGB888;
   \                     ??getChromARTOutputFormat_2: (+1)
   \       0x1E   0x2401             MOVS     R4,#+1
    125                  break;
   \       0x20   0xE008             B.N      ??getChromARTOutputFormat_5
    126              case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
    127                  dma2dColorMode = DMA2D_OUTPUT_RGB565;
   \                     ??getChromARTOutputFormat_1: (+1)
   \       0x22   0x2402             MOVS     R4,#+2
    128                  break;
   \       0x24   0xE006             B.N      ??getChromARTOutputFormat_5
    129              case Bitmap::L8:     /* Fall through */
    130              case Bitmap::BW:     /* Fall through */
    131              case Bitmap::BW_RLE: /* Fall through */
    132              case Bitmap::GRAY4:  /* Fall through */
    133              case Bitmap::GRAY2:  /* Fall through */
    134              default:             /* Unsupported output format for DMA2D */
    135                  assert(0 && "Unsupported Format!");
   \                     ??getChromARTOutputFormat_4: (+1)
   \       0x26   0x2287             MOVS     R2,#+135
   \       0x28   0x4903             LDR.N    R1,??getChromARTOutputFormat_0
   \       0x2A   0x4804             LDR.N    R0,??getChromARTOutputFormat_0+0x4
   \       0x2C   0x.... 0x....      BL       __aeabi_assert
   \       0x30   0x.... 0x....      BL       __iar_EmptyStepPoint
    136                  break;
    137              }
    138          
    139              return dma2dColorMode;
   \                     ??getChromARTOutputFormat_5: (+1)
   \       0x34   0x0020             MOVS     R0,R4
   \       0x36   0xBD10             POP      {R4,PC}
   \                     ??getChromARTOutputFormat_0:
   \       0x38   0x....'....        DC32     _ZZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatEEs_1
   \       0x3C   0x....'....        DC32     _ZZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatEEs_0
    140          }
    141          

   \                                 In section .text, align 2, keep-with-next
    142          BlitOperations STM32DMA::getBlitCaps()
    143          {
    144              return static_cast<BlitOperations>(BLIT_OP_FILL
    145                                                 | BLIT_OP_FILL_WITH_ALPHA
    146                                                 | BLIT_OP_COPY
    147                                                 | BLIT_OP_COPY_L8
    148                                                 | BLIT_OP_COPY_WITH_ALPHA
    149                                                 | BLIT_OP_COPY_ARGB8888
    150                                                 | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
    151                                                 | BLIT_OP_COPY_A4
    152                                                 | BLIT_OP_COPY_A8);
   \                     _ZN8STM32DMA11getBlitCapsEv: (+1)
   \        0x0   0xF240 0x30EF      MOVW     R0,#+1007
   \        0x4   0x4770             BX       LR
    153          }
    154          
    155          /*
    156           * void STM32DMA::setupDataCopy(const BlitOp& blitOp) handles blit operation of
    157           * BLIT_OP_COPY
    158           * BLIT_OP_COPY_L8
    159           * BLIT_OP_COPY_WITH_ALPHA
    160           * BLIT_OP_COPY_ARGB8888
    161           * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
    162           * BLIT_OP_COPY_A4
    163           * BLIT_OP_COPY_A8
    164           */

   \                                 In section .text, align 2, keep-with-next
    165          void STM32DMA::setupDataCopy(const BlitOp& blitOp)
    166          {
   \                     _ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
    167              uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
   \        0x8   0x7F69             LDRB     R1,[R5, #+29]
   \        0xA   0x0020             MOVS     R0,R4
   \        0xC   0x.... 0x....      BL       _ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE
   \       0x10   0x0006             MOVS     R6,R0
    168              uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
   \       0x12   0x7FA9             LDRB     R1,[R5, #+30]
   \       0x14   0x0020             MOVS     R0,R4
   \       0x16   0x.... 0x....      BL       _ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE
   \       0x1A   0x0007             MOVS     R7,R0
    169              uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
   \       0x1C   0x7FA9             LDRB     R1,[R5, #+30]
   \       0x1E   0x0020             MOVS     R0,R4
   \       0x20   0x.... 0x....      BL       _ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE
    170          
    171              /* DMA2D OOR register configuration ------------------------------------------*/
    172              WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
   \       0x24   0x8B6A             LDRH     R2,[R5, #+26]
   \       0x26   0x8AA9             LDRH     R1,[R5, #+20]
   \       0x28   0x1A52             SUBS     R2,R2,R1
   \       0x2A   0x....             LDR.N    R1,??DataTable7_8
   \       0x2C   0x600A             STR      R2,[R1, #+0]
    173          
    174              /* DMA2D BGOR register configuration -------------------------------------*/
    175              WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
   \       0x2E   0x8B6A             LDRH     R2,[R5, #+26]
   \       0x30   0x8AA9             LDRH     R1,[R5, #+20]
   \       0x32   0x1A52             SUBS     R2,R2,R1
   \       0x34   0x....             LDR.N    R1,??DataTable7_9
   \       0x36   0x600A             STR      R2,[R1, #+0]
    176          
    177              /* DMA2D FGOR register configuration -------------------------------------*/
    178              WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
   \       0x38   0x8B2A             LDRH     R2,[R5, #+24]
   \       0x3A   0x8AA9             LDRH     R1,[R5, #+20]
   \       0x3C   0x1A52             SUBS     R2,R2,R1
   \       0x3E   0x....             LDR.N    R1,??DataTable7_10
   \       0x40   0x600A             STR      R2,[R1, #+0]
    179          
    180              /* DMA2D OPFCCR register configuration ---------------------------------------*/
    181              WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
   \       0x42   0x....             LDR.N    R1,??DataTable7_11
   \       0x44   0x6008             STR      R0,[R1, #+0]
    182          
    183              /* Configure DMA2D data size */
    184              WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
   \       0x46   0x8AE8             LDRH     R0,[R5, #+22]
   \       0x48   0x8AA9             LDRH     R1,[R5, #+20]
   \       0x4A   0xEA50 0x4001      ORRS     R0,R0,R1, LSL #+16
   \       0x4E   0x....             LDR.N    R1,??DataTable7_12
   \       0x50   0x6008             STR      R0,[R1, #+0]
    185          
    186              /* Configure DMA2D destination address */
    187              WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
   \       0x52   0x6928             LDR      R0,[R5, #+16]
   \       0x54   0x....             LDR.N    R1,??DataTable7_13
   \       0x56   0x6008             STR      R0,[R1, #+0]
    188          
    189              /* Configure DMA2D source address */
    190              WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
   \       0x58   0x6868             LDR      R0,[R5, #+4]
   \       0x5A   0x....             LDR.N    R1,??DataTable7_14
   \       0x5C   0x6008             STR      R0,[R1, #+0]
    191          
    192              switch (blitOp.operation)
   \       0x5E   0x6828             LDR      R0,[R5, #+0]
   \       0x60   0x2804             CMP      R0,#+4
   \       0x62   0xF000 0x808E      BEQ.W    ??setupDataCopy_0
   \       0x66   0x2820             CMP      R0,#+32
   \       0x68   0xF000 0x809B      BEQ.W    ??setupDataCopy_1
   \       0x6C   0x2840             CMP      R0,#+64
   \       0x6E   0xF000 0x8098      BEQ.W    ??setupDataCopy_1
   \       0x72   0x2880             CMP      R0,#+128
   \       0x74   0xD030             BEQ.N    ??setupDataCopy_2
   \       0x76   0xF5B0 0x7F80      CMP      R0,#+256
   \       0x7A   0xD003             BEQ.N    ??setupDataCopy_3
   \       0x7C   0xF5B0 0x7F00      CMP      R0,#+512
   \       0x80   0xD015             BEQ.N    ??setupDataCopy_4
   \       0x82   0xE09E             B.N      ??setupDataCopy_5
    193              {
    194              case BLIT_OP_COPY_A4:
    195                  /* Set DMA2D color mode and alpha mode */
    196                  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
   \                     ??setupDataCopy_3: (+1)
   \       0x84   0x7F28             LDRB     R0,[R5, #+28]
   \       0x86   0x....             LDR.N    R1,??DataTable7_15
   \       0x88   0xEA51 0x6100      ORRS     R1,R1,R0, LSL #+24
   \       0x8C   0x....             LDR.N    R0,??DataTable7_16
   \       0x8E   0x6001             STR      R1,[R0, #+0]
    197          
    198                  /* set DMA2D foreground color */
    199                  WRITE_REG(DMA2D->FGCOLR, blitOp.color);
   \       0x90   0xF115 0x000C      ADDS     R0,R5,#+12
   \       0x94   0x.... 0x....      BL       _ZNK8touchgfx9colortypecvjEv
   \       0x98   0x....             LDR.N    R1,??DataTable7_17
   \       0x9A   0x6008             STR      R0,[R1, #+0]
    200          
    201                  /* Write DMA2D BGPFCCR register */
    202                  WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
   \       0x9C   0x....             LDR.N    R0,??DataTable7_18
   \       0x9E   0x6007             STR      R7,[R0, #+0]
    203          
    204                  /* Configure DMA2D Stream source2 address */
    205                  WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
   \       0xA0   0x6928             LDR      R0,[R5, #+16]
   \       0xA2   0x....             LDR.N    R1,??DataTable7_19
   \       0xA4   0x6008             STR      R0,[R1, #+0]
    206          
    207                  /* Set DMA2D mode */
    208                  WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
   \       0xA6   0x....             LDR.N    R0,??DataTable7_20
   \       0xA8   0x....             LDR.N    R1,??DataTable7_21
   \       0xAA   0x6008             STR      R0,[R1, #+0]
    209                  break;
   \       0xAC   0xE09C             B.N      ??setupDataCopy_6
    210              case BLIT_OP_COPY_A8:
    211                  /* Set DMA2D color mode and alpha mode */
    212                  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
   \                     ??setupDataCopy_4: (+1)
   \       0xAE   0x7F28             LDRB     R0,[R5, #+28]
   \       0xB0   0x....             LDR.N    R1,??DataTable7_22
   \       0xB2   0xEA51 0x6100      ORRS     R1,R1,R0, LSL #+24
   \       0xB6   0x....             LDR.N    R0,??DataTable7_16
   \       0xB8   0x6001             STR      R1,[R0, #+0]
    213          
    214                  /* set DMA2D foreground color */
    215                  WRITE_REG(DMA2D->FGCOLR, blitOp.color);
   \       0xBA   0xF115 0x000C      ADDS     R0,R5,#+12
   \       0xBE   0x.... 0x....      BL       _ZNK8touchgfx9colortypecvjEv
   \       0xC2   0x....             LDR.N    R1,??DataTable7_17
   \       0xC4   0x6008             STR      R0,[R1, #+0]
    216                  /* Write DMA2D BGPFCCR register */
    217                  WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
   \       0xC6   0x....             LDR.N    R0,??DataTable7_18
   \       0xC8   0x6007             STR      R7,[R0, #+0]
    218          
    219                  /* Configure DMA2D Stream source2 address */
    220                  WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
   \       0xCA   0x6928             LDR      R0,[R5, #+16]
   \       0xCC   0x....             LDR.N    R1,??DataTable7_19
   \       0xCE   0x6008             STR      R0,[R1, #+0]
    221          
    222                  /* Set DMA2D mode */
    223                  WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
   \       0xD0   0x....             LDR.N    R0,??DataTable7_20
   \       0xD2   0x....             LDR.N    R1,??DataTable7_21
   \       0xD4   0x6008             STR      R0,[R1, #+0]
    224                  break;
   \       0xD6   0xE087             B.N      ??setupDataCopy_6
    225            case BLIT_OP_COPY_L8:
    226                {
    227                  const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
   \                     ??setupDataCopy_2: (+1)
   \       0xD8   0x68A9             LDR      R1,[R5, #+8]
    228                  bool blend = true;
   \       0xDA   0x2401             MOVS     R4,#+1
    229          
    230                  /* Set DMA2D color mode and alpha mode */
    231                  WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
   \       0xDC   0x.... 0x....      LDR.W    R8,??DataTable7_16
   \       0xE0   0x7F28             LDRB     R0,[R5, #+28]
   \       0xE2   0xEA56 0x6600      ORRS     R6,R6,R0, LSL #+24
   \       0xE6   0xF456 0x3600      ORRS     R6,R6,#0x20000
   \       0xEA   0xF8C8 0x6000      STR      R6,[R8, #+0]
    232          
    233                  /* Write DMA2D BGPFCCR register */
    234                  WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
   \       0xEE   0x....             LDR.N    R0,??DataTable7_18
   \       0xF0   0x6007             STR      R7,[R0, #+0]
    235          
    236                  /* Configure DMA2D Stream source2 address */
    237                  WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
   \       0xF2   0x6928             LDR      R0,[R5, #+16]
   \       0xF4   0x....             LDR.N    R2,??DataTable7_19
   \       0xF6   0x6010             STR      R0,[R2, #+0]
    238          
    239                  /* Write foreground CLUT memory address */
    240                  WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
   \       0xF8   0x1D08             ADDS     R0,R1,#+4
   \       0xFA   0x....             LDR.N    R2,??DataTable7_23
   \       0xFC   0x6010             STR      R0,[R2, #+0]
    241          
    242                  switch ((Bitmap::ClutFormat)palette->format)
   \       0xFE   0x7808             LDRB     R0,[R1, #+0]
   \      0x100   0x2800             CMP      R0,#+0
   \      0x102   0xD002             BEQ.N    ??setupDataCopy_7
   \      0x104   0x2801             CMP      R0,#+1
   \      0x106   0xD00B             BEQ.N    ??setupDataCopy_8
   \      0x108   0xE01B             B.N      ??setupDataCopy_9
    243                  {
    244                  case Bitmap::CLUT_FORMAT_L8_ARGB8888:
    245                      /* Write foreground CLUT size and CLUT color mode */
    246                      MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
   \                     ??setupDataCopy_7: (+1)
   \      0x10A   0xF8D8 0x2000      LDR      R2,[R8, #+0]
   \      0x10E   0x....             LDR.N    R0,??DataTable7_24
   \      0x110   0x4002             ANDS     R2,R0,R2
   \      0x112   0x8848             LDRH     R0,[R1, #+2]
   \      0x114   0x1E40             SUBS     R0,R0,#+1
   \      0x116   0xEA52 0x2200      ORRS     R2,R2,R0, LSL #+8
   \      0x11A   0xF8C8 0x2000      STR      R2,[R8, #+0]
    247                      break;
   \      0x11E   0xE018             B.N      ??setupDataCopy_10
    248                  case Bitmap::CLUT_FORMAT_L8_RGB888:
    249                      if(blitOp.alpha == 255)
   \                     ??setupDataCopy_8: (+1)
   \      0x120   0x7F28             LDRB     R0,[R5, #+28]
   \      0x122   0x28FF             CMP      R0,#+255
   \      0x124   0xD100             BNE.N    ??setupDataCopy_11
    250                      {
    251                          blend = false;
   \      0x126   0x2400             MOVS     R4,#+0
    252                      }
    253                      MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
   \                     ??setupDataCopy_11: (+1)
   \      0x128   0xF8D8 0x2000      LDR      R2,[R8, #+0]
   \      0x12C   0x....             LDR.N    R0,??DataTable7_24
   \      0x12E   0x4002             ANDS     R2,R0,R2
   \      0x130   0x8848             LDRH     R0,[R1, #+2]
   \      0x132   0x1E40             SUBS     R0,R0,#+1
   \      0x134   0xEA52 0x2200      ORRS     R2,R2,R0, LSL #+8
   \      0x138   0xF052 0x0210      ORRS     R2,R2,#0x10
   \      0x13C   0xF8C8 0x2000      STR      R2,[R8, #+0]
    254                      break;
   \      0x140   0xE007             B.N      ??setupDataCopy_10
    255                  case Bitmap::CLUT_FORMAT_L8_RGB565:
    256                  default:
    257                      assert(0 && "Unsupported format");
   \                     ??setupDataCopy_9: (+1)
   \      0x142   0xF240 0x1201      MOVW     R2,#+257
   \      0x146   0x....             LDR.N    R1,??DataTable7_25
   \      0x148   0x....             LDR.N    R0,??DataTable7_26
   \      0x14A   0x.... 0x....      BL       __aeabi_assert
   \      0x14E   0x.... 0x....      BL       __iar_EmptyStepPoint
    258                      break;
    259                  }
    260          
    261                  /* Enable the CLUT loading for the foreground */
    262                  SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
   \                     ??setupDataCopy_10: (+1)
   \      0x152   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \      0x156   0xF050 0x0020      ORRS     R0,R0,#0x20
   \      0x15A   0xF8C8 0x0000      STR      R0,[R8, #+0]
    263          
    264                  while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
   \                     ??setupDataCopy_12: (+1)
   \      0x15E   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \      0x162   0x0680             LSLS     R0,R0,#+26
   \      0x164   0xD4FB             BMI.N    ??setupDataCopy_12
    265                  {
    266                  }
    267                  DMA2D->IFCR = (DMA2D_FLAG_CTC);
   \      0x166   0x2010             MOVS     R0,#+16
   \      0x168   0x....             LDR.N    R1,??DataTable7_27
   \      0x16A   0x6008             STR      R0,[R1, #+0]
    268          
    269                  /* Set DMA2D mode */
    270                  if(blend)
   \      0x16C   0xB2E4             UXTB     R4,R4
   \      0x16E   0x2C00             CMP      R4,#+0
   \      0x170   0xD003             BEQ.N    ??setupDataCopy_13
    271                  {
    272                      WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
   \      0x172   0x....             LDR.N    R0,??DataTable7_20
   \      0x174   0x....             LDR.N    R1,??DataTable7_21
   \      0x176   0x6008             STR      R0,[R1, #+0]
   \      0x178   0xE002             B.N      ??setupDataCopy_14
    273                  }
    274                  else
    275                  {
    276                      WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
   \                     ??setupDataCopy_13: (+1)
   \      0x17A   0x....             LDR.N    R0,??DataTable7_28
   \      0x17C   0x....             LDR.N    R1,??DataTable7_21
   \      0x17E   0x6008             STR      R0,[R1, #+0]
    277                  }
    278                }
    279                break;
   \                     ??setupDataCopy_14: (+1)
   \      0x180   0xE032             B.N      ??setupDataCopy_6
    280              case BLIT_OP_COPY_WITH_ALPHA:
    281                  /* Set DMA2D color mode and alpha mode */
    282                  WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
   \                     ??setupDataCopy_0: (+1)
   \      0x182   0x7F28             LDRB     R0,[R5, #+28]
   \      0x184   0xEA56 0x6600      ORRS     R6,R6,R0, LSL #+24
   \      0x188   0xF456 0x3600      ORRS     R6,R6,#0x20000
   \      0x18C   0x....             LDR.N    R0,??DataTable7_16
   \      0x18E   0x6006             STR      R6,[R0, #+0]
    283          
    284                  /* Write DMA2D BGPFCCR register */
    285                  WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
   \      0x190   0x....             LDR.N    R0,??DataTable7_18
   \      0x192   0x6007             STR      R7,[R0, #+0]
    286          
    287                  /* Configure DMA2D Stream source2 address */
    288                  WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
   \      0x194   0x6928             LDR      R0,[R5, #+16]
   \      0x196   0x....             LDR.N    R1,??DataTable7_19
   \      0x198   0x6008             STR      R0,[R1, #+0]
    289          
    290                  /* Set DMA2D mode */
    291                  WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
   \      0x19A   0x....             LDR.N    R0,??DataTable7_20
   \      0x19C   0x....             LDR.N    R1,??DataTable7_21
   \      0x19E   0x6008             STR      R0,[R1, #+0]
    292                  break;
   \      0x1A0   0xE022             B.N      ??setupDataCopy_6
    293              case BLIT_OP_COPY_ARGB8888:
    294              case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
    295                  /* Set DMA2D color mode and alpha mode */
    296                  WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
   \                     ??setupDataCopy_1: (+1)
   \      0x1A2   0x7F28             LDRB     R0,[R5, #+28]
   \      0x1A4   0xEA56 0x6600      ORRS     R6,R6,R0, LSL #+24
   \      0x1A8   0xF456 0x3600      ORRS     R6,R6,#0x20000
   \      0x1AC   0x....             LDR.N    R0,??DataTable7_16
   \      0x1AE   0x6006             STR      R6,[R0, #+0]
    297          
    298                  /* Write DMA2D BGPFCCR register */
    299                  WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
   \      0x1B0   0x....             LDR.N    R0,??DataTable7_18
   \      0x1B2   0x6007             STR      R7,[R0, #+0]
    300          
    301                  /* Configure DMA2D Stream source2 address */
    302                  WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
   \      0x1B4   0x6928             LDR      R0,[R5, #+16]
   \      0x1B6   0x....             LDR.N    R1,??DataTable7_19
   \      0x1B8   0x6008             STR      R0,[R1, #+0]
    303          
    304                  /* Set DMA2D mode */
    305                  WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
   \      0x1BA   0x....             LDR.N    R0,??DataTable7_20
   \      0x1BC   0x....             LDR.N    R1,??DataTable7_21
   \      0x1BE   0x6008             STR      R0,[R1, #+0]
    306                  break;
   \      0x1C0   0xE012             B.N      ??setupDataCopy_6
    307              default: /* BLIT_OP_COPY */
    308                  /* Set DMA2D color mode and alpha mode */
    309                  WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
   \                     ??setupDataCopy_5: (+1)
   \      0x1C2   0x7F28             LDRB     R0,[R5, #+28]
   \      0x1C4   0xEA56 0x6600      ORRS     R6,R6,R0, LSL #+24
   \      0x1C8   0xF456 0x3600      ORRS     R6,R6,#0x20000
   \      0x1CC   0x....             LDR.N    R0,??DataTable7_16
   \      0x1CE   0x6006             STR      R6,[R0, #+0]
    310          
    311                  /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
    312                  if (blitOp.srcFormat != blitOp.dstFormat)
   \      0x1D0   0x7F68             LDRB     R0,[R5, #+29]
   \      0x1D2   0x7FA9             LDRB     R1,[R5, #+30]
   \      0x1D4   0x4288             CMP      R0,R1
   \      0x1D6   0xD003             BEQ.N    ??setupDataCopy_15
    313                  {
    314                      /* Start DMA2D : PFC Mode */
    315                      WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
   \      0x1D8   0x....             LDR.N    R0,??DataTable7_28
   \      0x1DA   0x....             LDR.N    R1,??DataTable7_21
   \      0x1DC   0x6008             STR      R0,[R1, #+0]
   \      0x1DE   0xE003             B.N      ??setupDataCopy_16
    316                  }
    317                  else
    318                  {
    319                      /* Start DMA2D : M2M Mode */
    320                      WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
   \                     ??setupDataCopy_15: (+1)
   \      0x1E0   0xF240 0x2001      MOVW     R0,#+513
   \      0x1E4   0x....             LDR.N    R1,??DataTable7_21
   \      0x1E6   0x6008             STR      R0,[R1, #+0]
    321                  }
    322          
    323                  break;
    324              }
    325          }
   \                     ??setupDataCopy_16: (+1)
   \                     ??setupDataCopy_6: (+1)
   \      0x1E8   0xE8BD 0x81F0      POP      {R4-R8,PC}
    326          
    327          /*
    328           * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
    329           * BLIT_OP_FILL
    330           * BLIT_OP_FILL_WITH_ALPHA
    331           */

   \                                 In section .text, align 2, keep-with-next
    332          void STM32DMA::setupDataFill(const BlitOp& blitOp)
    333          {
   \                     _ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x000C             MOVS     R4,R1
    334              uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
   \        0x4   0x7FA1             LDRB     R1,[R4, #+30]
   \        0x6   0x.... 0x....      BL       _ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE
    335          
    336              /* DMA2D OPFCCR register configuration ---------------------------------------*/
    337              WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
   \        0xA   0x....             LDR.N    R1,??DataTable7_11
   \        0xC   0x6008             STR      R0,[R1, #+0]
    338          
    339              /* Configure DMA2D data size */
    340              WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
   \        0xE   0x8AE1             LDRH     R1,[R4, #+22]
   \       0x10   0x8AA2             LDRH     R2,[R4, #+20]
   \       0x12   0xEA51 0x4102      ORRS     R1,R1,R2, LSL #+16
   \       0x16   0x....             LDR.N    R2,??DataTable7_12
   \       0x18   0x6011             STR      R1,[R2, #+0]
    341          
    342              /* Configure DMA2D destination address */
    343              WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
   \       0x1A   0x6921             LDR      R1,[R4, #+16]
   \       0x1C   0x....             LDR.N    R2,??DataTable7_13
   \       0x1E   0x6011             STR      R1,[R2, #+0]
    344          
    345              /* DMA2D OOR register configuration ------------------------------------------*/
    346              WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
   \       0x20   0x8B62             LDRH     R2,[R4, #+26]
   \       0x22   0x8AA1             LDRH     R1,[R4, #+20]
   \       0x24   0x1A52             SUBS     R2,R2,R1
   \       0x26   0x....             LDR.N    R1,??DataTable7_8
   \       0x28   0x600A             STR      R2,[R1, #+0]
    347          
    348              if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
   \       0x2A   0x6821             LDR      R1,[R4, #+0]
   \       0x2C   0x2908             CMP      R1,#+8
   \       0x2E   0xD121             BNE.N    ??setupDataFill_0
    349              {
    350                  /* DMA2D BGOR register configuration -------------------------------------*/
    351                  WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
   \       0x30   0x8B62             LDRH     R2,[R4, #+26]
   \       0x32   0x8AA1             LDRH     R1,[R4, #+20]
   \       0x34   0x1A52             SUBS     R2,R2,R1
   \       0x36   0x....             LDR.N    R1,??DataTable7_9
   \       0x38   0x600A             STR      R2,[R1, #+0]
    352          
    353                  /* DMA2D FGOR register configuration -------------------------------------*/
    354                  WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
   \       0x3A   0x8B62             LDRH     R2,[R4, #+26]
   \       0x3C   0x8AA1             LDRH     R1,[R4, #+20]
   \       0x3E   0x1A52             SUBS     R2,R2,R1
   \       0x40   0x....             LDR.N    R1,??DataTable7_10
   \       0x42   0x600A             STR      R2,[R1, #+0]
    355          
    356                  /* Write DMA2D BGPFCCR register */
    357                  WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
   \       0x44   0x....             LDR.N    R1,??DataTable7_18
   \       0x46   0x6008             STR      R0,[R1, #+0]
    358          
    359                  /* Write DMA2D FGPFCCR register */
    360                  WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
   \       0x48   0x7F20             LDRB     R0,[R4, #+28]
   \       0x4A   0x....             LDR.N    R1,??DataTable7_29
   \       0x4C   0xEA51 0x6100      ORRS     R1,R1,R0, LSL #+24
   \       0x50   0x....             LDR.N    R0,??DataTable7_16
   \       0x52   0x6001             STR      R1,[R0, #+0]
    361          
    362                  /* DMA2D FGCOLR register configuration -------------------------------------*/
    363                  WRITE_REG(DMA2D->FGCOLR, blitOp.color);
   \       0x54   0xF114 0x000C      ADDS     R0,R4,#+12
   \       0x58   0x.... 0x....      BL       _ZNK8touchgfx9colortypecvjEv
   \       0x5C   0x....             LDR.N    R1,??DataTable7_17
   \       0x5E   0x6008             STR      R0,[R1, #+0]
    364          
    365                  /* Configure DMA2D Stream source2 address */
    366                  WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
   \       0x60   0x6920             LDR      R0,[R4, #+16]
   \       0x62   0x....             LDR.N    R1,??DataTable7_19
   \       0x64   0x6008             STR      R0,[R1, #+0]
    367          
    368                  /* Configure DMA2D source address */
    369                  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
   \       0x66   0x6920             LDR      R0,[R4, #+16]
   \       0x68   0x....             LDR.N    R1,??DataTable7_14
   \       0x6A   0x6008             STR      R0,[R1, #+0]
    370          
    371                  /* Enable the Peripheral and Enable the transfer complete interrupt */
    372                  WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
   \       0x6C   0x....             LDR.N    R0,??DataTable7_20
   \       0x6E   0x....             LDR.N    R1,??DataTable7_21
   \       0x70   0x6008             STR      R0,[R1, #+0]
   \       0x72   0xE00D             B.N      ??setupDataFill_1
    373              }
    374              else
    375              {
    376                  /* Write DMA2D FGPFCCR register */
    377                  WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
   \                     ??setupDataFill_0: (+1)
   \       0x74   0x....             LDR.N    R1,??DataTable7_16
   \       0x76   0x6008             STR      R0,[R1, #+0]
    378          
    379                  /* DMA2D FGOR register configuration -------------------------------------*/
    380                  WRITE_REG(DMA2D->FGOR, 0);
   \       0x78   0x2000             MOVS     R0,#+0
   \       0x7A   0x....             LDR.N    R1,??DataTable7_10
   \       0x7C   0x6008             STR      R0,[R1, #+0]
    381          
    382                  // set color
    383                  WRITE_REG(DMA2D->OCOLR, blitOp.color);
   \       0x7E   0xF114 0x000C      ADDS     R0,R4,#+12
   \       0x82   0x.... 0x....      BL       _ZNK8touchgfx9colortypecvjEv
   \       0x86   0x....             LDR.N    R1,??DataTable7_30
   \       0x88   0x6008             STR      R0,[R1, #+0]
    384          
    385                  /* Enable the Peripheral and Enable the transfer complete interrupt */
    386                  WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
   \       0x8A   0x....             LDR.N    R0,??DataTable7_31
   \       0x8C   0x....             LDR.N    R1,??DataTable7_21
   \       0x8E   0x6008             STR      R0,[R1, #+0]
    387              }
    388          }
   \                     ??setupDataFill_1: (+1)
   \       0x90   0xBD10             POP      {R4,PC}

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \        0x0   0xE000'E100        DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \        0x0   0xE000'E180        DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \        0x0   0x....'....        DC32     _ZTV8STM32DMA+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \        0x0   0x....'....        DC32     _ZN8touchgfx6BlitOpC1Ev

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \        0x0   0x5802'4534        DC32     0x58024534

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \        0x0   0x5802'447C        DC32     0x5802447c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \        0x0   0x....'....        DC32     _ZN34_INTERNAL_12_STM32DMA_cpp_5225cd5d22DMA2D_XferCpltCallbackEP21__DMA2D_HandleTypeDef

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \        0x0   0x....'....        DC32     hdma2d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \        0x0   0x5200'1040        DC32     0x52001040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \        0x0   0x5200'1018        DC32     0x52001018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \        0x0   0x5200'1010        DC32     0x52001010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \        0x0   0x5200'1034        DC32     0x52001034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \        0x0   0x5200'1044        DC32     0x52001044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \        0x0   0x5200'103C        DC32     0x5200103c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_14:
   \        0x0   0x5200'100C        DC32     0x5200100c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_15:
   \        0x0   0x0002'000A        DC32     0x2000a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_16:
   \        0x0   0x5200'101C        DC32     0x5200101c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_17:
   \        0x0   0x5200'1020        DC32     0x52001020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_18:
   \        0x0   0x5200'1024        DC32     0x52001024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_19:
   \        0x0   0x5200'1014        DC32     0x52001014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_20:
   \        0x0   0x0002'0201        DC32     0x20201

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_21:
   \        0x0   0x5200'1000        DC32     0x52001000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_22:
   \        0x0   0x0002'0009        DC32     0x20009

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_23:
   \        0x0   0x5200'102C        DC32     0x5200102c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_24:
   \        0x0   0xFFFF'00EF        DC32     0xffff00ef

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_25:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_26:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_27:
   \        0x0   0x5200'1008        DC32     0x52001008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_28:
   \        0x0   0x0001'0201        DC32     0x10201

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_29:
   \        0x0   0x0001'0009        DC32     0x10009

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_30:
   \        0x0   0x5200'1038        DC32     0x52001038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_31:
   \        0x0   0x0003'0201        DC32     0x30201

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x30 0x20          DC8 "0 && \"Unsupported format\""

   \              0x26 0x26    

   \              0x20 0x22    

   \              0x55 0x6E    

   \              0x73 0x75    

   \              0x70 0x70    

   \              0x6F 0x72    

   \              0x74 0x65    

   \              0x64 0x20    

   \              0x66 0x6F    

   \              0x72 0x6D    

   \              0x61 0x74    

   \              0x22 0x00
   \       0x1A                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x44 0x3A          DC8 0x44, 0x3A, 0x5C, 0x30, 0x30, 0x31, 0x5F, 0x50

   \              0x5C 0x30    

   \              0x30 0x31    

   \              0x5F 0x50
   \        0x8   0x72 0x6F          DC8 0x72, 0x6F, 0x6A, 0x65, 0x63, 0x74, 0x5C, 0x42

   \              0x6A 0x65    

   \              0x63 0x74    

   \              0x5C 0x42
   \       0x10   0x5F 0x54          DC8 0x5F, 0x54, 0x6F, 0x75, 0x63, 0x68, 0x47, 0x46

   \              0x6F 0x75    

   \              0x63 0x68    

   \              0x47 0x46
   \       0x18   0x58 0x5F          DC8 0x58, 0x5F, 0x53, 0x74, 0x6D, 0x33, 0x32, 0x5C

   \              0x53 0x74    

   \              0x6D 0x33    

   \              0x32 0x5C
   \       0x20   0x54 0x6F          DC8 0x54, 0x6F, 0x75, 0x63, 0x68, 0x47, 0x46, 0x58

   \              0x75 0x63    

   \              0x68 0x47    

   \              0x46 0x58
   \       0x28   0x5C 0x4D          DC8 0x5C, 0x4D, 0x79, 0x41, 0x70, 0x70, 0x6C, 0x69

   \              0x79 0x41    

   \              0x70 0x70    

   \              0x6C 0x69
   \       0x30   0x63 0x61          DC8 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x5C, 0x54

   \              0x74 0x69    

   \              0x6F 0x6E    

   \              0x5C 0x54
   \       0x38   0x6F 0x75          DC8 0x6F, 0x75, 0x63, 0x68, 0x47, 0x46, 0x58, 0x5C

   \              0x63 0x68    

   \              0x47 0x46    

   \              0x58 0x5C
   \       0x40   0x74 0x61          DC8 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5C, 0x67

   \              0x72 0x67    

   \              0x65 0x74    

   \              0x5C 0x67
   \       0x48   0x65 0x6E          DC8 0x65, 0x6E, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64

   \              0x65 0x72    

   \              0x61 0x74    

   \              0x65 0x64
   \       0x50   0x5C 0x53          DC8 0x5C, 0x53, 0x54, 0x4D, 0x33, 0x32, 0x44, 0x4D

   \              0x54 0x4D    

   \              0x33 0x32    

   \              0x44 0x4D
   \       0x58   0x41 0x2E          DC8 0x41, 0x2E, 0x63, 0x70, 0x70, 0

   \              0x63 0x70    

   \              0x70 0x00
   \       0x5E                      DS8 2
    389          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   DMA2D_XferCpltCallback(DMA2D_HandleTypeDef *)
         8   -> touchgfx::HAL::getInstance()
         8   -> touchgfx::HAL::signalDMAInterrupt()
       8   STM32DMA::STM32DMA()
         8   -> __aeabi_vec_ctor_nocookie_nodtor
         8   -> touchgfx::DMA_Interface::subobject DMA_Interface(touchgfx::DMA_Queue &)
         8   -> touchgfx::LockFreeDMA_Queue::LockFreeDMA_Queue(touchgfx::BlitOp *, atomic_t)
       8   STM32DMA::deleter ~STM32DMA() noexcept
         8   -> STM32DMA::~STM32DMA() noexcept
         8   -> operator delete(void *, unsigned int) noexcept
       0   STM32DMA::getBlitCaps()
       8   STM32DMA::getChromARTInputFormat(touchgfx::Bitmap::BitmapFormat)
         8   -> __aeabi_assert
         8   -> __iar_EmptyStepPoint
       8   STM32DMA::getChromARTOutputFormat(touchgfx::Bitmap::BitmapFormat)
         8   -> __aeabi_assert
         8   -> __iar_EmptyStepPoint
       0   STM32DMA::getDMAType()
       8   STM32DMA::initialize()
         8   -> __NVIC_EnableIRQ(IRQn_Type)
      24   STM32DMA::setupDataCopy(touchgfx::BlitOp const &)
        24   -> STM32DMA::getChromARTInputFormat(touchgfx::Bitmap::BitmapFormat)
        24   -> STM32DMA::getChromARTOutputFormat(touchgfx::Bitmap::BitmapFormat)
        24   -> __aeabi_assert
        24   -> __iar_EmptyStepPoint
        24   -> touchgfx::colortype::operator uint32_t() const
       8   STM32DMA::setupDataFill(touchgfx::BlitOp const &)
         8   -> STM32DMA::getChromARTOutputFormat(touchgfx::Bitmap::BitmapFormat)
         8   -> touchgfx::colortype::operator uint32_t() const
       8   STM32DMA::signalDMAInterrupt()
         8   -- Indirect call
       8   STM32DMA::subobject STM32DMA()
         8   -> STM32DMA::STM32DMA()
       8   STM32DMA::subobject ~STM32DMA() noexcept
         8   -> STM32DMA::~STM32DMA() noexcept
       8   STM32DMA::~STM32DMA() noexcept
         8   -> __NVIC_DisableIRQ(IRQn_Type)
       0   __NVIC_DisableIRQ(IRQn_Type)
       0   __NVIC_EnableIRQ(IRQn_Type)
       8   touchgfx::BlitOp::BlitOp()
         8   -> touchgfx::colortype::colortype()
       0   touchgfx::DMA_Interface::DMA_Interface(touchgfx::DMA_Queue &)
       8   touchgfx::DMA_Interface::flush()
         8   -- Indirect call
       8   touchgfx::DMA_Interface::subobject DMA_Interface(touchgfx::DMA_Queue &)
         8   -> touchgfx::DMA_Interface::DMA_Interface(touchgfx::DMA_Queue &)
       0   touchgfx::HAL::getInstance()
       8   touchgfx::HAL::signalDMAInterrupt()
         8   -- Indirect call
       0   touchgfx::colortype::colortype()
       0   touchgfx::colortype::operator uint32_t() const


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_14
       4  ??DataTable7_15
       4  ??DataTable7_16
       4  ??DataTable7_17
       4  ??DataTable7_18
       4  ??DataTable7_19
       4  ??DataTable7_2
       4  ??DataTable7_20
       4  ??DataTable7_21
       4  ??DataTable7_22
       4  ??DataTable7_23
       4  ??DataTable7_24
       4  ??DataTable7_25
       4  ??DataTable7_26
       4  ??DataTable7_27
       4  ??DataTable7_28
       4  ??DataTable7_29
       4  ??DataTable7_3
       4  ??DataTable7_30
       4  ??DataTable7_31
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
      28  ?_0
      96  ?_1
      12  DMA2D_XferCpltCallback(DMA2D_HandleTypeDef *)
      50  STM32DMA::STM32DMA()
      22  STM32DMA::deleter ~STM32DMA() noexcept
       6  STM32DMA::getBlitCaps()
      68  STM32DMA::getChromARTInputFormat(touchgfx::Bitmap::BitmapFormat)
      64  STM32DMA::getChromARTOutputFormat(touchgfx::Bitmap::BitmapFormat)
       4  STM32DMA::getDMAType()
      54  STM32DMA::initialize()
     492  STM32DMA::setupDataCopy(touchgfx::BlitOp const &)
     146  STM32DMA::setupDataFill(touchgfx::BlitOp const &)
      10  STM32DMA::signalDMAInterrupt()
       8  STM32DMA::subobject STM32DMA()
       8  STM32DMA::subobject ~STM32DMA() noexcept
      18  STM32DMA::~STM32DMA() noexcept
      38  __NVIC_DisableIRQ(IRQn_Type)
      30  __NVIC_EnableIRQ(IRQn_Type)
      16  touchgfx::BlitOp::BlitOp()
      12  touchgfx::DMA_Interface::DMA_Interface(touchgfx::DMA_Queue &)
      10  touchgfx::DMA_Interface::flush()
       8  touchgfx::DMA_Interface::subobject DMA_Interface(touchgfx::DMA_Queue &)
      12  touchgfx::HAL::getInstance()
      16  touchgfx::HAL::signalDMAInterrupt()
       6  touchgfx::colortype::colortype()
       4  touchgfx::colortype::operator uint32_t() const
     352  -- Other

 
   476 bytes in section .rodata
 1'242 bytes in section .text
 
 1'012 bytes of CODE  memory (+ 230 bytes shared)
   124 bytes of CONST memory (+ 352 bytes shared)

Errors: none
Warnings: none
