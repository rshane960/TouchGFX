###############################################################################
#
# IAR ANSI C/C++ Compiler V9.20.1.318/W64 for ARM         07/Feb/2022  20:39:42
# Copyright 1999-2021 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        D:\99_Project\GitHub\TouchGFX\MyApplication\Core\Src\system_stm32h7xx.c
#        [UTF-8]
#    Command line      =
#        -f
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Drivers\CMSIS\system_stm32h7xx.o.rsp
#        (D:\99_Project\GitHub\TouchGFX\MyApplication\Core\Src\system_stm32h7xx.c
#        -D USE_HAL_DRIVER -D STM32H7B3xxQ -D USE_BPP=24 -lC
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\Drivers\CMSIS
#        -lA
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\Drivers\CMSIS
#        -o
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Drivers\CMSIS
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.0\arm\inc\c\DLib_Config_Full.h" -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Core/Inc\ -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/App\ -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/target/generated\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/target\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/STM32H7xx_HAL_Driver/Inc\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/STM32H7xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM4F\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/CMSIS/Device/ST/STM32H7xx/Include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/BSP/Components/Common\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/BSP/STM32H7B3I-DK\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Middlewares/ST/touchgfx/framework/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/fonts/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/gui_generated/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/images/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/texts/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/gui/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/videos/include\
#        -Ol --source_encoding utf8 --text_out utf8 --utf8_text_in)
#        --dependencies=n
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Drivers\CMSIS\system_stm32h7xx.o.d
#    Locale            =  C
#    List file         =
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\Drivers\CMSIS\system_stm32h7xx.lst
#    Object file       =
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Drivers\CMSIS\system_stm32h7xx.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

D:\99_Project\GitHub\TouchGFX\MyApplication\Core\Src\system_stm32h7xx.c
      1          /**
      2            ******************************************************************************
      3            * @file    system_stm32h7xx.c
      4            * @author  MCD Application Team
      5            * @brief   CMSIS Cortex-Mx Device Peripheral Access Layer System Source File.
      6            *
      7            *   This file provides two functions and one global variable to be called from
      8            *   user application:
      9            *      - SystemInit(): This function is called at startup just after reset and
     10            *                      before branch to main program. This call is made inside
     11            *                      the "startup_stm32h7xx.s" file.
     12            *
     13            *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
     14            *                                  by the user application to setup the SysTick
     15            *                                  timer or configure other parameters.
     16            *
     17            *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
     18            *                                 be called whenever the core clock is changed
     19            *                                 during program execution.
     20            *
     21            *
     22            ******************************************************************************
     23            * @attention
     24            *
     25            * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
     26            * All rights reserved.</center></h2>
     27            *
     28            * This software component is licensed by ST under BSD 3-Clause license,
     29            * the "License"; You may not use this file except in compliance with the
     30            * License. You may obtain a copy of the License at:
     31            *                        opensource.org/licenses/BSD-3-Clause
     32            *
     33            ******************************************************************************
     34            */
     35          
     36          /** @addtogroup CMSIS
     37            * @{
     38            */
     39          
     40          /** @addtogroup stm32h7xx_system
     41            * @{
     42            */
     43          
     44          /** @addtogroup STM32H7xx_System_Private_Includes
     45            * @{
     46            */
     47          
     48          #include "stm32h7xx.h"
     49          #include <math.h>
     50          #if !defined  (HSE_VALUE)
     51          #define HSE_VALUE    ((uint32_t)25000000) /*!< Value of the External oscillator in Hz */
     52          #endif /* HSE_VALUE */
     53          
     54          #if !defined  (CSI_VALUE)
     55            #define CSI_VALUE    ((uint32_t)4000000) /*!< Value of the Internal oscillator in Hz*/
     56          #endif /* CSI_VALUE */
     57          
     58          #if !defined  (HSI_VALUE)
     59            #define HSI_VALUE    ((uint32_t)64000000) /*!< Value of the Internal oscillator in Hz*/
     60          #endif /* HSI_VALUE */
     61          
     62          
     63          /**
     64            * @}
     65            */
     66          
     67          /** @addtogroup STM32H7xx_System_Private_TypesDefinitions
     68            * @{
     69            */
     70          
     71          /**
     72            * @}
     73            */
     74          
     75          /** @addtogroup STM32H7xx_System_Private_Defines
     76            * @{
     77            */
     78          
     79          /************************* Miscellaneous Configuration ************************/
     80          /*!< Uncomment the following line if you need to use initialized data in D2 domain SRAM (AHB SRAM) */
     81          /* #define DATA_IN_D2_SRAM */
     82          
     83          /*!< Uncomment the following line if you need to relocate your vector Table in
     84               Internal SRAM. */
     85          /* #define VECT_TAB_SRAM */
     86          #define VECT_TAB_OFFSET  0x00000000UL /*!< Vector Table base offset field.
     87                                                This value must be a multiple of 0x200. */
     88          /******************************************************************************/
     89          
     90          /**
     91            * @}
     92            */
     93          
     94          /** @addtogroup STM32H7xx_System_Private_Macros
     95            * @{
     96            */
     97          
     98          /**
     99            * @}
    100            */
    101          
    102          /** @addtogroup STM32H7xx_System_Private_Variables
    103            * @{
    104            */
    105            /* This variable is updated in three ways:
    106                1) by calling CMSIS function SystemCoreClockUpdate()
    107                2) by calling HAL API function HAL_RCC_GetHCLKFreq()
    108                3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
    109                   Note: If you use this function to configure the system clock; then there
    110                         is no need to call the 2 first functions listed above, since SystemCoreClock
    111                         variable is updated automatically.
    112            */

   \                                 In section .data, align 4
    113            uint32_t SystemCoreClock = 64000000;
   \                     SystemCoreClock:
   \        0x0   0x03D0'9000        DC32 64'000'000

   \                                 In section .data, align 4
    114            uint32_t SystemD2Clock = 64000000;
   \                     SystemD2Clock:
   \        0x0   0x03D0'9000        DC32 64'000'000

   \                                 In section .rodata, align 4
    115            const  uint8_t D1CorePrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
   \                     D1CorePrescTable:
   \        0x0   0x00 0x00          DC8 0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9

   \              0x00 0x00    

   \              0x01 0x02    

   \              0x03 0x04    

   \              0x01 0x02    

   \              0x03 0x04    

   \              0x06 0x07    

   \              0x08 0x09
    116          
    117          /**
    118            * @}
    119            */
    120          
    121          /** @addtogroup STM32H7xx_System_Private_FunctionPrototypes
    122            * @{
    123            */
    124          
    125          /**
    126            * @}
    127            */
    128          
    129          /** @addtogroup STM32H7xx_System_Private_Functions
    130            * @{
    131            */
    132          
    133          /**
    134            * @brief  Setup the microcontroller system
    135            *         Initialize the FPU setting and  vector table location
    136            *         configuration.
    137            * @param  None
    138            * @retval None
    139            */

   \                                 In section .text, align 2, keep-with-next
    140          void SystemInit (void)
    141          {
    142          #if defined (DATA_IN_D2_SRAM)
    143           __IO uint32_t tmpreg;
    144          #endif /* DATA_IN_D2_SRAM */
    145          
    146            /* FPU settings ------------------------------------------------------------*/
    147            #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    148              SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
   \                     SystemInit: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable1_3
   \        0x2   0x6801             LDR      R1,[R0, #+0]
   \        0x4   0xF451 0x0170      ORRS     R1,R1,#0xF00000
   \        0x8   0x6001             STR      R1,[R0, #+0]
    149            #endif
    150            /* Reset the RCC clock configuration to the default reset state ------------*/
    151            /* Set HSION bit */
    152            RCC->CR |= RCC_CR_HSION;
   \        0xA   0x....             LDR.N    R1,??DataTable1_4
   \        0xC   0x6808             LDR      R0,[R1, #+0]
   \        0xE   0xF050 0x0001      ORRS     R0,R0,#0x1
   \       0x12   0x6008             STR      R0,[R1, #+0]
    153          
    154            /* Reset CFGR register */
    155            RCC->CFGR = 0x00000000;
   \       0x14   0x2000             MOVS     R0,#+0
   \       0x16   0x....             LDR.N    R2,??DataTable1_5
   \       0x18   0x6010             STR      R0,[R2, #+0]
    156          
    157            /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
    158            RCC->CR &= 0xEAF6ED7FU;
   \       0x1A   0x680A             LDR      R2,[R1, #+0]
   \       0x1C   0x....             LDR.N    R0,??DataTable1_6
   \       0x1E   0x4002             ANDS     R2,R0,R2
   \       0x20   0x600A             STR      R2,[R1, #+0]
    159          
    160          #if defined(D3_SRAM_BASE)
    161            /* Reset D1CFGR register */
    162            RCC->D1CFGR = 0x00000000;
    163          
    164            /* Reset D2CFGR register */
    165            RCC->D2CFGR = 0x00000000;
    166          
    167            /* Reset D3CFGR register */
    168            RCC->D3CFGR = 0x00000000;
    169          #else
    170            /* Reset CDCFGR1 register */
    171            RCC->CDCFGR1 = 0x00000000;
   \       0x22   0x2000             MOVS     R0,#+0
   \       0x24   0x....             LDR.N    R2,??DataTable1_7
   \       0x26   0x6010             STR      R0,[R2, #+0]
    172          
    173            /* Reset CDCFGR2 register */
    174            RCC->CDCFGR2 = 0x00000000;
   \       0x28   0x2000             MOVS     R0,#+0
   \       0x2A   0x....             LDR.N    R2,??DataTable1_8
   \       0x2C   0x6010             STR      R0,[R2, #+0]
    175          
    176            /* Reset SRDCFGR register */
    177            RCC->SRDCFGR = 0x00000000;
   \       0x2E   0x2000             MOVS     R0,#+0
   \       0x30   0x....             LDR.N    R2,??DataTable1_9
   \       0x32   0x6010             STR      R0,[R2, #+0]
    178          #endif
    179            /* Reset PLLCKSELR register */
    180            RCC->PLLCKSELR = 0x00000000;
   \       0x34   0x2000             MOVS     R0,#+0
   \       0x36   0x....             LDR.N    R2,??DataTable1_10
   \       0x38   0x6010             STR      R0,[R2, #+0]
    181          
    182            /* Reset PLLCFGR register */
    183            RCC->PLLCFGR = 0x00000000;
   \       0x3A   0x2000             MOVS     R0,#+0
   \       0x3C   0x....             LDR.N    R2,??DataTable1_11
   \       0x3E   0x6010             STR      R0,[R2, #+0]
    184            /* Reset PLL1DIVR register */
    185            RCC->PLL1DIVR = 0x00000000;
   \       0x40   0x2000             MOVS     R0,#+0
   \       0x42   0x....             LDR.N    R2,??DataTable1_12
   \       0x44   0x6010             STR      R0,[R2, #+0]
    186            /* Reset PLL1FRACR register */
    187            RCC->PLL1FRACR = 0x00000000;
   \       0x46   0x2000             MOVS     R0,#+0
   \       0x48   0x....             LDR.N    R2,??DataTable1_13
   \       0x4A   0x6010             STR      R0,[R2, #+0]
    188          
    189            /* Reset PLL2DIVR register */
    190            RCC->PLL2DIVR = 0x00000000;
   \       0x4C   0x2000             MOVS     R0,#+0
   \       0x4E   0x....             LDR.N    R2,??DataTable1_14
   \       0x50   0x6010             STR      R0,[R2, #+0]
    191          
    192            /* Reset PLL2FRACR register */
    193          
    194            RCC->PLL2FRACR = 0x00000000;
   \       0x52   0x2000             MOVS     R0,#+0
   \       0x54   0x....             LDR.N    R2,??DataTable1_15
   \       0x56   0x6010             STR      R0,[R2, #+0]
    195            /* Reset PLL3DIVR register */
    196            RCC->PLL3DIVR = 0x00000000;
   \       0x58   0x2000             MOVS     R0,#+0
   \       0x5A   0x....             LDR.N    R2,??DataTable1_16
   \       0x5C   0x6010             STR      R0,[R2, #+0]
    197          
    198            /* Reset PLL3FRACR register */
    199            RCC->PLL3FRACR = 0x00000000;
   \       0x5E   0x2000             MOVS     R0,#+0
   \       0x60   0x....             LDR.N    R2,??DataTable1_17
   \       0x62   0x6010             STR      R0,[R2, #+0]
    200          
    201            /* Reset HSEBYP bit */
    202            RCC->CR &= 0xFFFBFFFFU;
   \       0x64   0x6808             LDR      R0,[R1, #+0]
   \       0x66   0xF430 0x2080      BICS     R0,R0,#0x40000
   \       0x6A   0x6008             STR      R0,[R1, #+0]
    203          
    204            /* Disable all interrupts */
    205            RCC->CIER = 0x00000000;
   \       0x6C   0x2000             MOVS     R0,#+0
   \       0x6E   0x....             LDR.N    R1,??DataTable1_18
   \       0x70   0x6008             STR      R0,[R1, #+0]
    206          
    207          #if defined (DATA_IN_D2_SRAM)
    208            /* in case of initialized data in D2 SRAM (AHB SRAM) , enable the D2 SRAM clock ((AHB SRAM clock) */
    209          #if defined(RCC_AHB2ENR_D2SRAM1EN)
    210            RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
    211          #else
    212            RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
    213          #endif /* RCC_AHB2ENR_D2SRAM1EN */
    214          
    215            tmpreg = RCC->AHB2ENR;
    216            (void) tmpreg;
    217          #endif /* DATA_IN_D2_SRAM */
    218          
    219          #if defined(DUAL_CORE) && defined(CORE_CM4)
    220            /* Configure the Vector Table location add offset address for cortex-M4 ------------------*/
    221          #ifdef VECT_TAB_SRAM
    222            SCB->VTOR = D2_AHBSRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
    223          #else
    224            SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
    225          #endif /* VECT_TAB_SRAM */
    226          
    227          #else
    228            /* dual core CM7 or single core line */
    229            if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
   \       0x72   0x....             LDR.N    R0,??DataTable1_19
   \       0x74   0x6800             LDR      R0,[R0, #+0]
   \       0x76   0x0C00             LSRS     R0,R0,#+16
   \       0x78   0x0400             LSLS     R0,R0,#+16
   \       0x7A   0xF1B0 0x5F00      CMP      R0,#+536870912
   \       0x7E   0xD202             BCS.N    ??SystemInit_0
    230            {
    231              /* if stm32h7 revY*/
    232              /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    233              *((__IO uint32_t*)0x51008108) = 0x000000001U;
   \       0x80   0x2001             MOVS     R0,#+1
   \       0x82   0x....             LDR.N    R1,??DataTable1_20
   \       0x84   0x6008             STR      R0,[R1, #+0]
    234            }
    235          
    236            /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
    237          #ifdef VECT_TAB_SRAM
    238            SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
    239          #else
    240            SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
   \                     ??SystemInit_0: (+1)
   \       0x86   0xF05F 0x6000      MOVS     R0,#+134217728
   \       0x8A   0x....             LDR.N    R1,??DataTable1_21
   \       0x8C   0x6008             STR      R0,[R1, #+0]
    241          #endif
    242          
    243          #endif /*DUAL_CORE && CORE_CM4*/
    244          
    245          }
   \       0x8E   0x4770             BX       LR
    246          
    247          /**
    248             * @brief  Update SystemCoreClock variable according to Clock Register Values.
    249            *         The SystemCoreClock variable contains the core clock , it can
    250            *         be used by the user application to setup the SysTick timer or configure
    251            *         other parameters.
    252            *
    253            * @note   Each time the core clock changes, this function must be called
    254            *         to update SystemCoreClock variable value. Otherwise, any configuration
    255            *         based on this variable will be incorrect.
    256            *
    257            * @note   - The system frequency computed by this function is not the real
    258            *           frequency in the chip. It is calculated based on the predefined
    259            *           constant and the selected clock source:
    260            *
    261            *           - If SYSCLK source is CSI, SystemCoreClock will contain the CSI_VALUE(*)
    262            *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(**)
    263            *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(***)
    264            *           - If SYSCLK source is PLL, SystemCoreClock will contain the CSI_VALUE(*),
    265            *             HSI_VALUE(**) or HSE_VALUE(***) multiplied/divided by the PLL factors.
    266            *
    267            *         (*) CSI_VALUE is a constant defined in stm32h7xx_hal.h file (default value
    268            *             4 MHz) but the real value may vary depending on the variations
    269            *             in voltage and temperature.
    270            *         (**) HSI_VALUE is a constant defined in stm32h7xx_hal.h file (default value
    271            *             64 MHz) but the real value may vary depending on the variations
    272            *             in voltage and temperature.
    273            *
    274            *         (***)HSE_VALUE is a constant defined in stm32h7xx_hal.h file (default value
    275            *              25 MHz), user has to ensure that HSE_VALUE is same as the real
    276            *              frequency of the crystal used. Otherwise, this function may
    277            *              have wrong result.
    278            *
    279            *         - The result of this function could be not correct when using fractional
    280            *           value for HSE crystal.
    281            * @param  None
    282            * @retval None
    283            */

   \                                 In section .text, align 4, keep-with-next
    284          void SystemCoreClockUpdate (void)
    285          {
   \                     SystemCoreClockUpdate: (+1)
   \        0x0   0xB410             PUSH     {R4}
    286            uint32_t pllp, pllsource, pllm, pllfracen, hsivalue, tmp;
    287            float_t fracn1, pllvco;
    288          
    289            /* Get SYSCLK source -------------------------------------------------------*/
    290          
    291            switch (RCC->CFGR & RCC_CFGR_SWS)
   \        0x2   0x....             LDR.N    R0,??DataTable1_5
   \        0x4   0x6800             LDR      R0,[R0, #+0]
   \        0x6   0xF010 0x0038      ANDS     R0,R0,#0x38
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD006             BEQ.N    ??SystemCoreClockUpdate_0
   \        0xE   0x2808             CMP      R0,#+8
   \       0x10   0xD00D             BEQ.N    ??SystemCoreClockUpdate_1
   \       0x12   0x2810             CMP      R0,#+16
   \       0x14   0xD00F             BEQ.N    ??SystemCoreClockUpdate_2
   \       0x16   0x2818             CMP      R0,#+24
   \       0x18   0xD011             BEQ.N    ??SystemCoreClockUpdate_3
   \       0x1A   0xE0BD             B.N      ??SystemCoreClockUpdate_4
    292            {
    293            case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    294              SystemCoreClock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
   \                     ??SystemCoreClockUpdate_0: (+1)
   \       0x1C   0x....             LDR.N    R0,??DataTable1_22
   \       0x1E   0x....             LDR.N    R1,??DataTable1_4
   \       0x20   0x6809             LDR      R1,[R1, #+0]
   \       0x22   0xF3C1 0x01C1      UBFX     R1,R1,#+3,#+2
   \       0x26   0x40C8             LSRS     R0,R0,R1
   \       0x28   0x....             LDR.N    R1,??DataTable1_23
   \       0x2A   0x6008             STR      R0,[R1, #+0]
    295              break;
   \       0x2C   0xE0B7             B.N      ??SystemCoreClockUpdate_5
    296          
    297            case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    298              SystemCoreClock = CSI_VALUE;
   \                     ??SystemCoreClockUpdate_1: (+1)
   \       0x2E   0x....             LDR.N    R0,??DataTable1_24
   \       0x30   0x....             LDR.N    R1,??DataTable1_23
   \       0x32   0x6008             STR      R0,[R1, #+0]
    299              break;
   \       0x34   0xE0B3             B.N      ??SystemCoreClockUpdate_5
    300          
    301            case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    302              SystemCoreClock = HSE_VALUE;
   \                     ??SystemCoreClockUpdate_2: (+1)
   \       0x36   0x....             LDR.N    R0,??DataTable1_25
   \       0x38   0x....             LDR.N    R1,??DataTable1_23
   \       0x3A   0x6008             STR      R0,[R1, #+0]
    303              break;
   \       0x3C   0xE0AF             B.N      ??SystemCoreClockUpdate_5
    304          
    305            case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */
    306          
    307              /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    308              SYSCLK = PLL_VCO / PLLR
    309              */
    310              pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
   \                     ??SystemCoreClockUpdate_3: (+1)
   \       0x3E   0x....             LDR.N    R0,??DataTable1_10
   \       0x40   0x6802             LDR      R2,[R0, #+0]
   \       0x42   0xF012 0x0203      ANDS     R2,R2,#0x3
    311              pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
   \       0x46   0x6800             LDR      R0,[R0, #+0]
   \       0x48   0xF3C0 0x1005      UBFX     R0,R0,#+4,#+6
    312              pllfracen = ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
   \       0x4C   0x....             LDR.N    R1,??DataTable1_11
   \       0x4E   0x680B             LDR      R3,[R1, #+0]
   \       0x50   0xF013 0x0301      ANDS     R3,R3,#0x1
    313              fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
   \       0x54   0x....             LDR.N    R1,??DataTable1_13
   \       0x56   0x6809             LDR      R1,[R1, #+0]
   \       0x58   0xF3C1 0x01CC      UBFX     R1,R1,#+3,#+13
   \       0x5C   0x434B             MULS     R3,R1,R3
   \       0x5E   0xEE00 0x3A10      VMOV     S0,R3
   \       0x62   0xEEF8 0x0A40      VCVT.F32.U32 S1,S0
    314          
    315              if (pllm != 0U)
   \       0x66   0x2800             CMP      R0,#+0
   \       0x68   0xF000 0x8092      BEQ.W    ??SystemCoreClockUpdate_6
    316              {
    317                switch (pllsource)
   \       0x6C   0x2A00             CMP      R2,#+0
   \       0x6E   0xD003             BEQ.N    ??SystemCoreClockUpdate_7
   \       0x70   0x2A02             CMP      R2,#+2
   \       0x72   0xD043             BEQ.N    ??SystemCoreClockUpdate_8
   \       0x74   0xD325             BCC.N    ??SystemCoreClockUpdate_9
   \       0x76   0xE05E             B.N      ??SystemCoreClockUpdate_10
    318                {
    319                  case RCC_PLLCKSELR_PLLSRC_HSI:  /* HSI used as PLL clock source */
    320          
    321                  hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
   \                     ??SystemCoreClockUpdate_7: (+1)
   \       0x78   0x....             LDR.N    R1,??DataTable1_22
   \       0x7A   0x....             LDR.N    R2,??DataTable1_4
   \       0x7C   0x6812             LDR      R2,[R2, #+0]
   \       0x7E   0xF3C2 0x02C1      UBFX     R2,R2,#+3,#+2
   \       0x82   0x40D1             LSRS     R1,R1,R2
   \       0x84   0xEE00 0x1A10      VMOV     S0,R1
    322                  pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
   \       0x88   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \       0x8C   0xEE01 0x0A10      VMOV     S2,R0
   \       0x90   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \       0x94   0xEE80 0x0A01      VDIV.F32 S0,S0,S2
   \       0x98   0x....             LDR.N    R0,??DataTable1_12
   \       0x9A   0x6800             LDR      R0,[R0, #+0]
   \       0x9C   0x05C0             LSLS     R0,R0,#+23
   \       0x9E   0x0DC0             LSRS     R0,R0,#+23
   \       0xA0   0xEE01 0x0A10      VMOV     S2,R0
   \       0xA4   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \       0xA8   0xEDDF 0x....      VLDR.W   S3,??DataTable1
   \       0xAC   0xEEC0 0x0AA1      VDIV.F32 S1,S1,S3
   \       0xB0   0xEE71 0x0A20      VADD.F32 S1,S2,S1
   \       0xB4   0xEEB7 0x1A00      VMOV.F32 S2,#1.0
   \       0xB8   0xEE70 0x0A81      VADD.F32 S1,S1,S2
   \       0xBC   0xEE60 0x0A20      VMUL.F32 S1,S0,S1
    323          
    324                  break;
   \       0xC0   0xE055             B.N      ??SystemCoreClockUpdate_11
    325          
    326                  case RCC_PLLCKSELR_PLLSRC_CSI:  /* CSI used as PLL clock source */
    327                    pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
   \                     ??SystemCoreClockUpdate_9: (+1)
   \       0xC2   0xEE00 0x0A10      VMOV     S0,R0
   \       0xC6   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \       0xCA   0xED9F 0x....      VLDR.W   S2,??DataTable1_1
   \       0xCE   0xEE81 0x0A00      VDIV.F32 S0,S2,S0
   \       0xD2   0x....             LDR.N    R0,??DataTable1_12
   \       0xD4   0x6800             LDR      R0,[R0, #+0]
   \       0xD6   0x05C0             LSLS     R0,R0,#+23
   \       0xD8   0x0DC0             LSRS     R0,R0,#+23
   \       0xDA   0xEE01 0x0A10      VMOV     S2,R0
   \       0xDE   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \       0xE2   0xEDDF 0x....      VLDR.W   S3,??DataTable1
   \       0xE6   0xEEC0 0x0AA1      VDIV.F32 S1,S1,S3
   \       0xEA   0xEE71 0x0A20      VADD.F32 S1,S2,S1
   \       0xEE   0xEEB7 0x1A00      VMOV.F32 S2,#1.0
   \       0xF2   0xEE70 0x0A81      VADD.F32 S1,S1,S2
   \       0xF6   0xEE60 0x0A20      VMUL.F32 S1,S0,S1
    328                  break;
   \       0xFA   0xE038             B.N      ??SystemCoreClockUpdate_11
    329          
    330                  case RCC_PLLCKSELR_PLLSRC_HSE:  /* HSE used as PLL clock source */
    331                    pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
   \                     ??SystemCoreClockUpdate_8: (+1)
   \       0xFC   0xEE00 0x0A10      VMOV     S0,R0
   \      0x100   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \      0x104   0xED9F 0x....      VLDR.W   S2,??DataTable1_2
   \      0x108   0xEE81 0x0A00      VDIV.F32 S0,S2,S0
   \      0x10C   0x....             LDR.N    R0,??DataTable1_12
   \      0x10E   0x6800             LDR      R0,[R0, #+0]
   \      0x110   0x05C0             LSLS     R0,R0,#+23
   \      0x112   0x0DC0             LSRS     R0,R0,#+23
   \      0x114   0xEE01 0x0A10      VMOV     S2,R0
   \      0x118   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \      0x11C   0xEDDF 0x....      VLDR.W   S3,??DataTable1
   \      0x120   0xEEC0 0x0AA1      VDIV.F32 S1,S1,S3
   \      0x124   0xEE71 0x0A20      VADD.F32 S1,S2,S1
   \      0x128   0xEEB7 0x1A00      VMOV.F32 S2,#1.0
   \      0x12C   0xEE70 0x0A81      VADD.F32 S1,S1,S2
   \      0x130   0xEE60 0x0A20      VMUL.F32 S1,S0,S1
    332                  break;
   \      0x134   0xE01B             B.N      ??SystemCoreClockUpdate_11
    333          
    334                default:
    335                    pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
   \                     ??SystemCoreClockUpdate_10: (+1)
   \      0x136   0xEE00 0x0A10      VMOV     S0,R0
   \      0x13A   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \      0x13E   0xED9F 0x....      VLDR.W   S2,??DataTable1_1
   \      0x142   0xEE81 0x0A00      VDIV.F32 S0,S2,S0
   \      0x146   0x....             LDR.N    R0,??DataTable1_12
   \      0x148   0x6800             LDR      R0,[R0, #+0]
   \      0x14A   0x05C0             LSLS     R0,R0,#+23
   \      0x14C   0x0DC0             LSRS     R0,R0,#+23
   \      0x14E   0xEE01 0x0A10      VMOV     S2,R0
   \      0x152   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \      0x156   0xEDDF 0x....      VLDR.W   S3,??DataTable1
   \      0x15A   0xEEC0 0x0AA1      VDIV.F32 S1,S1,S3
   \      0x15E   0xEE71 0x0A20      VADD.F32 S1,S2,S1
   \      0x162   0xEEB7 0x1A00      VMOV.F32 S2,#1.0
   \      0x166   0xEE70 0x0A81      VADD.F32 S1,S1,S2
   \      0x16A   0xEE60 0x0A20      VMUL.F32 S1,S0,S1
    336                  break;
    337                }
    338                pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
   \                     ??SystemCoreClockUpdate_11: (+1)
   \      0x16E   0x....             LDR.N    R0,??DataTable1_12
   \      0x170   0x6800             LDR      R0,[R0, #+0]
   \      0x172   0xF3C0 0x2046      UBFX     R0,R0,#+9,#+7
   \      0x176   0x1C40             ADDS     R0,R0,#+1
   \      0x178   0xEE00 0x0A10      VMOV     S0,R0
    339                SystemCoreClock =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
   \      0x17C   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \      0x180   0xEE80 0x0A80      VDIV.F32 S0,S1,S0
   \      0x184   0xEEBC 0x0AC0      VCVT.U32.F32 S0,S0
   \      0x188   0x....             LDR.N    R0,??DataTable1_23
   \      0x18A   0xED80 0x0A00      VSTR     S0,[R0, #0]
   \      0x18E   0xE002             B.N      ??SystemCoreClockUpdate_12
    340              }
    341              else
    342              {
    343                SystemCoreClock = 0U;
   \                     ??SystemCoreClockUpdate_6: (+1)
   \      0x190   0x2000             MOVS     R0,#+0
   \      0x192   0x....             LDR.N    R1,??DataTable1_23
   \      0x194   0x6008             STR      R0,[R1, #+0]
    344              }
    345              break;
   \                     ??SystemCoreClockUpdate_12: (+1)
   \      0x196   0xE002             B.N      ??SystemCoreClockUpdate_5
    346          
    347            default:
    348              SystemCoreClock = CSI_VALUE;
   \                     ??SystemCoreClockUpdate_4: (+1)
   \      0x198   0x....             LDR.N    R0,??DataTable1_24
   \      0x19A   0x....             LDR.N    R1,??DataTable1_23
   \      0x19C   0x6008             STR      R0,[R1, #+0]
    349              break;
    350            }
    351          
    352            /* Compute SystemClock frequency --------------------------------------------------*/
    353          #if defined (RCC_D1CFGR_D1CPRE)
    354            tmp = D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos];
    355          
    356            /* SystemCoreClock frequency : CM7 CPU frequency  */
    357            SystemCoreClock >>= tmp;
    358          
    359            /* SystemD2Clock frequency : CM4 CPU, AXI and AHBs Clock frequency  */
    360            SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
    361          
    362          #else
    363            tmp = D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos];
   \                     ??SystemCoreClockUpdate_5: (+1)
   \      0x19E   0x....             LDR.N    R1,??DataTable1_7
   \      0x1A0   0x....             LDR.N    R2,??DataTable1_26
   \      0x1A2   0x6808             LDR      R0,[R1, #+0]
   \      0x1A4   0xF3C0 0x2003      UBFX     R0,R0,#+8,#+4
   \      0x1A8   0x5C10             LDRB     R0,[R2, R0]
    364          
    365            /* SystemCoreClock frequency : CM7 CPU frequency  */
    366            SystemCoreClock >>= tmp;
   \      0x1AA   0x....             LDR.N    R3,??DataTable1_23
   \      0x1AC   0x681C             LDR      R4,[R3, #+0]
   \      0x1AE   0x40C4             LSRS     R4,R4,R0
   \      0x1B0   0x601C             STR      R4,[R3, #+0]
    367          
    368            /* SystemD2Clock frequency : AXI and AHBs Clock frequency  */
    369            SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
   \      0x1B2   0x6818             LDR      R0,[R3, #+0]
   \      0x1B4   0x6809             LDR      R1,[R1, #+0]
   \      0x1B6   0xF011 0x010F      ANDS     R1,R1,#0xF
   \      0x1BA   0x5C51             LDRB     R1,[R2, R1]
   \      0x1BC   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \      0x1C0   0x40C8             LSRS     R0,R0,R1
   \      0x1C2   0x....             LDR.N    R1,??DataTable1_27
   \      0x1C4   0x6008             STR      R0,[R1, #+0]
    370          
    371          #endif
    372          }
   \      0x1C6   0xBC10             POP      {R4}
   \      0x1C8   0x4770             BX       LR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x4600'0000        DC32     0x46000000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \        0x0   0x4A74'2400        DC32     0x4a742400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \        0x0   0x4BB7'1B00        DC32     0x4bb71b00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \        0x0   0xE000'ED88        DC32     0xe000ed88

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \        0x0   0x5802'4400        DC32     0x58024400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \        0x0   0x5802'4410        DC32     0x58024410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \        0x0   0xEAF6'ED7F        DC32     0xeaf6ed7f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \        0x0   0x5802'4418        DC32     0x58024418

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \        0x0   0x5802'441C        DC32     0x5802441c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \        0x0   0x5802'4420        DC32     0x58024420

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \        0x0   0x5802'4428        DC32     0x58024428

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \        0x0   0x5802'442C        DC32     0x5802442c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_12:
   \        0x0   0x5802'4430        DC32     0x58024430

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_13:
   \        0x0   0x5802'4434        DC32     0x58024434

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_14:
   \        0x0   0x5802'4438        DC32     0x58024438

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_15:
   \        0x0   0x5802'443C        DC32     0x5802443c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_16:
   \        0x0   0x5802'4440        DC32     0x58024440

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_17:
   \        0x0   0x5802'4444        DC32     0x58024444

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_18:
   \        0x0   0x5802'4460        DC32     0x58024460

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_19:
   \        0x0   0x5C00'1000        DC32     0x5c001000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_20:
   \        0x0   0x5100'8108        DC32     0x51008108

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_21:
   \        0x0   0xE000'ED08        DC32     0xe000ed08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_22:
   \        0x0   0x03D0'9000        DC32     0x3d09000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_23:
   \        0x0   0x....'....        DC32     SystemCoreClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_24:
   \        0x0   0x003D'0900        DC32     0x3d0900

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_25:
   \        0x0   0x016E'3600        DC32     0x16e3600

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_26:
   \        0x0   0x....'....        DC32     D1CorePrescTable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_27:
   \        0x0   0x....'....        DC32     SystemD2Clock
    373          
    374          
    375          /**
    376            * @}
    377            */
    378          
    379          /**
    380            * @}
    381            */
    382          
    383          /**
    384            * @}
    385            */
    386          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   SystemCoreClockUpdate
       0   SystemInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_12
       4  ??DataTable1_13
       4  ??DataTable1_14
       4  ??DataTable1_15
       4  ??DataTable1_16
       4  ??DataTable1_17
       4  ??DataTable1_18
       4  ??DataTable1_19
       4  ??DataTable1_2
       4  ??DataTable1_20
       4  ??DataTable1_21
       4  ??DataTable1_22
       4  ??DataTable1_23
       4  ??DataTable1_24
       4  ??DataTable1_25
       4  ??DataTable1_26
       4  ??DataTable1_27
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
      16  D1CorePrescTable
       4  SystemCoreClock
     458  SystemCoreClockUpdate
       4  SystemD2Clock
     144  SystemInit

 
   8 bytes in section .data
  16 bytes in section .rodata
 714 bytes in section .text
 
 714 bytes of CODE  memory
  16 bytes of CONST memory
   8 bytes of DATA  memory

Errors: none
Warnings: none
