###############################################################################
#
# IAR ANSI C/C++ Compiler V9.20.1.318/W64 for ARM         08/Feb/2022  20:54:12
# Copyright 1999-2021 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        D:\99_Project\GitHub\TouchGFX\MyApplication\Drivers\STM32H7xx_HAL_Driver\Src\stm32h7xx_hal_dma.c
#        [UTF-8]
#    Command line      =
#        -f
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Drivers\STM32H7xx_HAL_Driver\stm32h7xx_hal_dma.o.rsp
#        (D:\99_Project\GitHub\TouchGFX\MyApplication\Drivers\STM32H7xx_HAL_Driver\Src\stm32h7xx_hal_dma.c
#        -D USE_HAL_DRIVER -D STM32H7B3xxQ -D USE_BPP=24 -lC
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\Drivers\STM32H7xx_HAL_Driver
#        -lA
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\Drivers\STM32H7xx_HAL_Driver
#        -o
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Drivers\STM32H7xx_HAL_Driver
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.0\arm\inc\c\DLib_Config_Full.h" -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Core/Inc\ -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/App\ -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/target/generated\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/target\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/STM32H7xx_HAL_Driver/Inc\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/STM32H7xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM4F\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/CMSIS/Device/ST/STM32H7xx/Include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/BSP/Components/Common\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/BSP/STM32H7B3I-DK\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Middlewares/ST/touchgfx/framework/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/fonts/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/gui_generated/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/images/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/texts/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/gui/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/videos/include\
#        -Ol --source_encoding utf8 --text_out utf8 --utf8_text_in)
#        --dependencies=n
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Drivers\STM32H7xx_HAL_Driver\stm32h7xx_hal_dma.o.d
#    Locale            =  C
#    List file         =
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\Drivers\STM32H7xx_HAL_Driver\stm32h7xx_hal_dma.lst
#    Object file       =
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Drivers\STM32H7xx_HAL_Driver\stm32h7xx_hal_dma.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

D:\99_Project\GitHub\TouchGFX\MyApplication\Drivers\STM32H7xx_HAL_Driver\Src\stm32h7xx_hal_dma.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32h7xx_hal_dma.c
      4            * @author  MCD Application Team
      5            * @brief   DMA HAL module driver.
      6            *          This file provides firmware functions to manage the following
      7            *          functionalities of the Direct Memory Access (DMA) peripheral:
      8            *           + Initialization and de-initialization functions
      9            *           + IO operation functions
     10            *           + Peripheral State and errors functions
     11            ******************************************************************************
     12            * @attention
     13            *
     14            * Copyright (c) 2017 STMicroelectronics.
     15            * All rights reserved.
     16            *
     17            * This software is licensed under terms that can be found in the LICENSE file
     18            * in the root directory of this software component.
     19            * If no LICENSE file comes with this software, it is provided AS-IS.
     20            *
     21            ******************************************************************************
     22            @verbatim
     23            ==============================================================================
     24                                  ##### How to use this driver #####
     25            ==============================================================================
     26            [..]
     27             (#) Enable and configure the peripheral to be connected to the DMA Stream
     28                 (except for internal SRAM/FLASH memories: no initialization is
     29                 necessary) please refer to Reference manual for connection between peripherals
     30                 and DMA requests .
     31          
     32             (#) For a given Stream, program the required configuration through the following parameters:
     33                 Transfer Direction, Source and Destination data formats,
     34                 Circular, Normal or peripheral flow control mode, Stream Priority level,
     35                 Source and Destination Increment mode, FIFO mode and its Threshold (if needed),
     36                 Burst mode for Source and/or Destination (if needed) using HAL_DMA_Init() function.
     37          
     38               *** Polling mode IO operation ***
     39               =================================
     40              [..]
     41                    (+) Use HAL_DMA_Start() to start DMA transfer after the configuration of Source
     42                        address and destination address and the Length of data to be transferred
     43                    (+) Use HAL_DMA_PollForTransfer() to poll for the end of current transfer, in this
     44                        case a fixed Timeout can be configured by User depending from his application.
     45          
     46               *** Interrupt mode IO operation ***
     47               ===================================
     48              [..]
     49                    (+) Configure the DMA interrupt priority using HAL_NVIC_SetPriority()
     50                    (+) Enable the DMA IRQ handler using HAL_NVIC_EnableIRQ()
     51                    (+) Use HAL_DMA_Start_IT() to start DMA transfer after the configuration of
     52                        Source address and destination address and the Length of data to be transferred. In this
     53                        case the DMA interrupt is configured
     54                    (+) Use HAL_DMA_IRQHandler() called under DMA_IRQHandler() Interrupt subroutine
     55                    (+) At the end of data transfer HAL_DMA_IRQHandler() function is executed and user can
     56                        add his own function by customization of function pointer XferCpltCallback and
     57                        XferErrorCallback (i.e a member of DMA handle structure).
     58              [..]
     59               (#) Use HAL_DMA_GetState() function to return the DMA state and HAL_DMA_GetError() in case of error
     60                   detection.
     61          
     62               (#) Use HAL_DMA_Abort() function to abort the current transfer
     63          
     64               -@-   In Memory-to-Memory transfer mode, Circular mode is not allowed.
     65          
     66               -@-   The FIFO is used mainly to reduce bus usage and to allow data packing/unpacking: it is
     67                     possible to set different Data Sizes for the Peripheral and the Memory (ie. you can set
     68                     Half-Word data size for the peripheral to access its data register and set Word data size
     69                     for the Memory to gain in access time. Each two half words will be packed and written in
     70                     a single access to a Word in the Memory).
     71          
     72               -@-   When FIFO is disabled, it is not allowed to configure different Data Sizes for Source
     73                     and Destination. In this case the Peripheral Data Size will be applied to both Source
     74                     and Destination.
     75          
     76               *** DMA HAL driver macros list ***
     77               =============================================
     78               [..]
     79                 Below the list of most used macros in DMA HAL driver.
     80          
     81                (+) __HAL_DMA_ENABLE: Enable the specified DMA Stream.
     82                (+) __HAL_DMA_DISABLE: Disable the specified DMA Stream.
     83                (+) __HAL_DMA_GET_FS: Return the current DMA Stream FIFO filled level.
     84                (+) __HAL_DMA_ENABLE_IT: Enable the specified DMA Stream interrupts.
     85                (+) __HAL_DMA_DISABLE_IT: Disable the specified DMA Stream interrupts.
     86                (+) __HAL_DMA_GET_IT_SOURCE: Check whether the specified DMA Stream interrupt has occurred or not.
     87          
     88               [..]
     89                (@) You can refer to the DMA HAL driver header file for more useful macros.
     90          
     91            @endverbatim
     92            */
     93          
     94          /* Includes ------------------------------------------------------------------*/
     95          #include "stm32h7xx_hal.h"
     96          
     97          /** @addtogroup STM32H7xx_HAL_Driver
     98            * @{
     99            */
    100          
    101          /** @defgroup DMA DMA
    102            * @brief DMA HAL module driver
    103            * @{
    104            */
    105          
    106          #ifdef HAL_DMA_MODULE_ENABLED
    107          
    108          /* Private types -------------------------------------------------------------*/
    109          typedef struct
    110          {
    111            __IO uint32_t ISR;   /*!< DMA interrupt status register */
    112            __IO uint32_t Reserved0;
    113            __IO uint32_t IFCR;  /*!< DMA interrupt flag clear register */
    114          } DMA_Base_Registers;
    115          
    116          typedef struct
    117          {
    118            __IO uint32_t ISR;   /*!< BDMA interrupt status register */
    119            __IO uint32_t IFCR;  /*!< BDMA interrupt flag clear register */
    120          } BDMA_Base_Registers;
    121          
    122          /* Private variables ---------------------------------------------------------*/
    123          /* Private constants ---------------------------------------------------------*/
    124          /** @addtogroup DMA_Private_Constants
    125           * @{
    126           */
    127          #define HAL_TIMEOUT_DMA_ABORT         (5U)  /* 5 ms */
    128          
    129          #define BDMA_PERIPH_TO_MEMORY         (0x00000000U)                /*!< Peripheral to memory direction */
    130          #define BDMA_MEMORY_TO_PERIPH         ((uint32_t)BDMA_CCR_DIR)     /*!< Memory to peripheral direction */
    131          #define BDMA_MEMORY_TO_MEMORY         ((uint32_t)BDMA_CCR_MEM2MEM) /*!< Memory to memory direction     */
    132          
    133          /* DMA to BDMA conversion */
    134          #define DMA_TO_BDMA_DIRECTION(__DMA_DIRECTION__) (((__DMA_DIRECTION__) == DMA_MEMORY_TO_PERIPH)? BDMA_MEMORY_TO_PERIPH: \
    135                                                            ((__DMA_DIRECTION__) == DMA_MEMORY_TO_MEMORY)? BDMA_MEMORY_TO_MEMORY: \
    136                                                            BDMA_PERIPH_TO_MEMORY)
    137          
    138          #define DMA_TO_BDMA_PERIPHERAL_INC(__DMA_PERIPHERAL_INC__) ((__DMA_PERIPHERAL_INC__) >> 3U)
    139          #define DMA_TO_BDMA_MEMORY_INC(__DMA_MEMORY_INC__) ((__DMA_MEMORY_INC__) >> 3U)
    140          
    141          #define DMA_TO_BDMA_PDATA_SIZE(__DMA_PDATA_SIZE__) ((__DMA_PDATA_SIZE__) >> 3U)
    142          #define DMA_TO_BDMA_MDATA_SIZE(__DMA_MDATA_SIZE__) ((__DMA_MDATA_SIZE__) >> 3U)
    143          
    144          #define DMA_TO_BDMA_MODE(__DMA_MODE__) ((__DMA_MODE__) >> 3U)
    145          
    146          #define DMA_TO_BDMA_PRIORITY(__DMA_PRIORITY__) ((__DMA_PRIORITY__) >> 4U)
    147          
    148          #if defined(UART9)
    149          #define IS_DMA_UART_USART_REQUEST(__REQUEST__) ((((__REQUEST__) >= DMA_REQUEST_USART1_RX)  &&  ((__REQUEST__) <= DMA_REQUEST_USART3_TX)) || \
    150                                                           (((__REQUEST__) >= DMA_REQUEST_UART4_RX)  &&  ((__REQUEST__) <= DMA_REQUEST_UART5_TX )) || \
    151                                                           (((__REQUEST__) >= DMA_REQUEST_USART6_RX) &&  ((__REQUEST__) <= DMA_REQUEST_USART6_TX)) || \
    152                                                           (((__REQUEST__) >= DMA_REQUEST_UART7_RX)  &&  ((__REQUEST__) <= DMA_REQUEST_UART8_TX )) || \
    153                                                           (((__REQUEST__) >= DMA_REQUEST_UART9_RX)  &&  ((__REQUEST__) <= DMA_REQUEST_USART10_TX )))
    154          #else
    155          #define IS_DMA_UART_USART_REQUEST(__REQUEST__) ((((__REQUEST__) >= DMA_REQUEST_USART1_RX)  &&  ((__REQUEST__) <= DMA_REQUEST_USART3_TX)) || \
    156                                                           (((__REQUEST__) >= DMA_REQUEST_UART4_RX)  &&  ((__REQUEST__) <= DMA_REQUEST_UART5_TX )) || \
    157                                                           (((__REQUEST__) >= DMA_REQUEST_USART6_RX) &&  ((__REQUEST__) <= DMA_REQUEST_USART6_TX)) || \
    158                                                           (((__REQUEST__) >= DMA_REQUEST_UART7_RX)  &&  ((__REQUEST__) <= DMA_REQUEST_UART8_TX )))
    159          
    160          #endif
    161          /**
    162            * @}
    163            */
    164          /* Private macros ------------------------------------------------------------*/
    165          /* Private functions ---------------------------------------------------------*/
    166          /** @addtogroup DMA_Private_Functions
    167            * @{
    168            */
    169          static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength);
    170          static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma);
    171          static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma);
    172          static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma);
    173          static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma);
    174          
    175          /**
    176            * @}
    177            */
    178          
    179          /* Exported functions ---------------------------------------------------------*/
    180          /** @addtogroup DMA_Exported_Functions
    181            * @{
    182            */
    183          
    184          /** @addtogroup DMA_Exported_Functions_Group1
    185            *
    186          @verbatim
    187           ===============================================================================
    188                       ##### Initialization and de-initialization functions  #####
    189           ===============================================================================
    190              [..]
    191              This section provides functions allowing to initialize the DMA Stream source
    192              and destination incrementation and data sizes, transfer direction,
    193              circular/normal mode selection, memory-to-memory mode selection and Stream priority value.
    194              [..]
    195              The HAL_DMA_Init() function follows the DMA configuration procedures as described in
    196              reference manual.
    197              The HAL_DMA_DeInit function allows to deinitialize the DMA stream.
    198          
    199          @endverbatim
    200            * @{
    201            */
    202          
    203          /**
    204            * @brief  Initialize the DMA according to the specified
    205            *         parameters in the DMA_InitTypeDef and create the associated handle.
    206            * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
    207            *               the configuration information for the specified DMA Stream.
    208            * @retval HAL status
    209            */

   \                                 In section .text, align 2, keep-with-next
    210          HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
    211          {
   \                     HAL_DMA_Init: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
    212            uint32_t registerValue;
    213            uint32_t tickstart = HAL_GetTick();
   \        0x4   0x.... 0x....      BL       HAL_GetTick
   \        0x8   0x0006             MOVS     R6,R0
    214            DMA_Base_Registers *regs_dma;
    215            BDMA_Base_Registers *regs_bdma;
    216          
    217            /* Check the DMA peripheral handle */
    218            if(hdma == NULL)
   \        0xA   0x2C00             CMP      R4,#+0
   \        0xC   0xD101             BNE.N    ??HAL_DMA_Init_0
    219            {
    220              return HAL_ERROR;
   \        0xE   0x2001             MOVS     R0,#+1
   \       0x10   0xE299             B.N      ??HAL_DMA_Init_1
    221            }
    222          
    223            /* Check the parameters */
    224            assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
    225            assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
    226            assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
    227            assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
    228            assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
    229            assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
    230            assert_param(IS_DMA_MODE(hdma->Init.Mode));
    231            assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
    232          
    233            if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
   \                     ??HAL_DMA_Init_0: (+1)
   \       0x12   0x.... 0x....      LDR.W    R5,??DataTable1
   \       0x16   0x6820             LDR      R0,[R4, #+0]
   \       0x18   0x42A8             CMP      R0,R5
   \       0x1A   0xD04A             BEQ.N    ??HAL_DMA_Init_2
   \       0x1C   0x6820             LDR      R0,[R4, #+0]
   \       0x1E   0x.... 0x....      LDR.W    R1,??DataTable1_1
   \       0x22   0x4288             CMP      R0,R1
   \       0x24   0xD045             BEQ.N    ??HAL_DMA_Init_2
   \       0x26   0x6820             LDR      R0,[R4, #+0]
   \       0x28   0x.... 0x....      LDR.W    R1,??DataTable1_2
   \       0x2C   0x4288             CMP      R0,R1
   \       0x2E   0xD040             BEQ.N    ??HAL_DMA_Init_2
   \       0x30   0x6820             LDR      R0,[R4, #+0]
   \       0x32   0x.... 0x....      LDR.W    R1,??DataTable1_3
   \       0x36   0x4288             CMP      R0,R1
   \       0x38   0xD03B             BEQ.N    ??HAL_DMA_Init_2
   \       0x3A   0x6820             LDR      R0,[R4, #+0]
   \       0x3C   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \       0x40   0x4288             CMP      R0,R1
   \       0x42   0xD036             BEQ.N    ??HAL_DMA_Init_2
   \       0x44   0x6820             LDR      R0,[R4, #+0]
   \       0x46   0x.... 0x....      LDR.W    R1,??DataTable1_5
   \       0x4A   0x4288             CMP      R0,R1
   \       0x4C   0xD031             BEQ.N    ??HAL_DMA_Init_2
   \       0x4E   0x6820             LDR      R0,[R4, #+0]
   \       0x50   0x.... 0x....      LDR.W    R1,??DataTable1_6
   \       0x54   0x4288             CMP      R0,R1
   \       0x56   0xD02C             BEQ.N    ??HAL_DMA_Init_2
   \       0x58   0x6820             LDR      R0,[R4, #+0]
   \       0x5A   0x.... 0x....      LDR.W    R1,??DataTable1_7
   \       0x5E   0x4288             CMP      R0,R1
   \       0x60   0xD027             BEQ.N    ??HAL_DMA_Init_2
   \       0x62   0x6820             LDR      R0,[R4, #+0]
   \       0x64   0x.... 0x....      LDR.W    R1,??DataTable1_8
   \       0x68   0x4288             CMP      R0,R1
   \       0x6A   0xD022             BEQ.N    ??HAL_DMA_Init_2
   \       0x6C   0x6820             LDR      R0,[R4, #+0]
   \       0x6E   0x.... 0x....      LDR.W    R1,??DataTable1_9
   \       0x72   0x4288             CMP      R0,R1
   \       0x74   0xD01D             BEQ.N    ??HAL_DMA_Init_2
   \       0x76   0x6820             LDR      R0,[R4, #+0]
   \       0x78   0x.... 0x....      LDR.W    R1,??DataTable1_10
   \       0x7C   0x4288             CMP      R0,R1
   \       0x7E   0xD018             BEQ.N    ??HAL_DMA_Init_2
   \       0x80   0x6820             LDR      R0,[R4, #+0]
   \       0x82   0x.... 0x....      LDR.W    R1,??DataTable1_11
   \       0x86   0x4288             CMP      R0,R1
   \       0x88   0xD013             BEQ.N    ??HAL_DMA_Init_2
   \       0x8A   0x6820             LDR      R0,[R4, #+0]
   \       0x8C   0x.... 0x....      LDR.W    R1,??DataTable1_12
   \       0x90   0x4288             CMP      R0,R1
   \       0x92   0xD00E             BEQ.N    ??HAL_DMA_Init_2
   \       0x94   0x6820             LDR      R0,[R4, #+0]
   \       0x96   0x.... 0x....      LDR.W    R1,??DataTable1_13
   \       0x9A   0x4288             CMP      R0,R1
   \       0x9C   0xD009             BEQ.N    ??HAL_DMA_Init_2
   \       0x9E   0x6820             LDR      R0,[R4, #+0]
   \       0xA0   0x.... 0x....      LDR.W    R1,??DataTable1_14
   \       0xA4   0x4288             CMP      R0,R1
   \       0xA6   0xD004             BEQ.N    ??HAL_DMA_Init_2
   \       0xA8   0x6820             LDR      R0,[R4, #+0]
   \       0xAA   0x.... 0x....      LDR.W    R1,??DataTable1_15
   \       0xAE   0x4288             CMP      R0,R1
   \       0xB0   0xD101             BNE.N    ??HAL_DMA_Init_3
   \                     ??HAL_DMA_Init_2: (+1)
   \       0xB2   0x2001             MOVS     R0,#+1
   \       0xB4   0xE000             B.N      ??HAL_DMA_Init_4
   \                     ??HAL_DMA_Init_3: (+1)
   \       0xB6   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_Init_4: (+1)
   \       0xB8   0xB2C0             UXTB     R0,R0
   \       0xBA   0x2800             CMP      R0,#+0
   \       0xBC   0xF000 0x814A      BEQ.W    ??HAL_DMA_Init_5
    234            {
    235              assert_param(IS_DMA_REQUEST(hdma->Init.Request));
    236              assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
    237              /* Check the memory burst, peripheral burst and FIFO threshold parameters only
    238                 when FIFO mode is enabled */
    239              if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
   \       0xC0   0x6A60             LDR      R0,[R4, #+36]
   \       0xC2   0x2800             CMP      R0,#+0
    240              {
    241                assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
    242                assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    243                assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    244              }
    245          
    246              /* Change DMA peripheral state */
    247              hdma->State = HAL_DMA_STATE_BUSY;
   \                     ??HAL_DMA_Init_6: (+1)
   \       0xC4   0x2002             MOVS     R0,#+2
   \       0xC6   0xF884 0x0035      STRB     R0,[R4, #+53]
    248          
    249              /* Allocate lock resource */
    250              __HAL_UNLOCK(hdma);
   \       0xCA   0x2000             MOVS     R0,#+0
   \       0xCC   0xF884 0x0034      STRB     R0,[R4, #+52]
    251          
    252              /* Disable the peripheral */
    253              __HAL_DMA_DISABLE(hdma);
   \       0xD0   0x6820             LDR      R0,[R4, #+0]
   \       0xD2   0x42A8             CMP      R0,R5
   \       0xD4   0xD04A             BEQ.N    ??HAL_DMA_Init_7
   \       0xD6   0x6820             LDR      R0,[R4, #+0]
   \       0xD8   0x.... 0x....      LDR.W    R1,??DataTable1_1
   \       0xDC   0x4288             CMP      R0,R1
   \       0xDE   0xD045             BEQ.N    ??HAL_DMA_Init_7
   \       0xE0   0x6820             LDR      R0,[R4, #+0]
   \       0xE2   0x.... 0x....      LDR.W    R1,??DataTable1_2
   \       0xE6   0x4288             CMP      R0,R1
   \       0xE8   0xD040             BEQ.N    ??HAL_DMA_Init_7
   \       0xEA   0x6820             LDR      R0,[R4, #+0]
   \       0xEC   0x.... 0x....      LDR.W    R1,??DataTable1_3
   \       0xF0   0x4288             CMP      R0,R1
   \       0xF2   0xD03B             BEQ.N    ??HAL_DMA_Init_7
   \       0xF4   0x6820             LDR      R0,[R4, #+0]
   \       0xF6   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \       0xFA   0x4288             CMP      R0,R1
   \       0xFC   0xD036             BEQ.N    ??HAL_DMA_Init_7
   \       0xFE   0x6820             LDR      R0,[R4, #+0]
   \      0x100   0x.... 0x....      LDR.W    R1,??DataTable1_5
   \      0x104   0x4288             CMP      R0,R1
   \      0x106   0xD031             BEQ.N    ??HAL_DMA_Init_7
   \      0x108   0x6820             LDR      R0,[R4, #+0]
   \      0x10A   0x.... 0x....      LDR.W    R1,??DataTable1_6
   \      0x10E   0x4288             CMP      R0,R1
   \      0x110   0xD02C             BEQ.N    ??HAL_DMA_Init_7
   \      0x112   0x6820             LDR      R0,[R4, #+0]
   \      0x114   0x.... 0x....      LDR.W    R1,??DataTable1_7
   \      0x118   0x4288             CMP      R0,R1
   \      0x11A   0xD027             BEQ.N    ??HAL_DMA_Init_7
   \      0x11C   0x6820             LDR      R0,[R4, #+0]
   \      0x11E   0x.... 0x....      LDR.W    R1,??DataTable1_8
   \      0x122   0x4288             CMP      R0,R1
   \      0x124   0xD022             BEQ.N    ??HAL_DMA_Init_7
   \      0x126   0x6820             LDR      R0,[R4, #+0]
   \      0x128   0x.... 0x....      LDR.W    R1,??DataTable1_9
   \      0x12C   0x4288             CMP      R0,R1
   \      0x12E   0xD01D             BEQ.N    ??HAL_DMA_Init_7
   \      0x130   0x6820             LDR      R0,[R4, #+0]
   \      0x132   0x.... 0x....      LDR.W    R1,??DataTable1_10
   \      0x136   0x4288             CMP      R0,R1
   \      0x138   0xD018             BEQ.N    ??HAL_DMA_Init_7
   \      0x13A   0x6820             LDR      R0,[R4, #+0]
   \      0x13C   0x.... 0x....      LDR.W    R1,??DataTable1_11
   \      0x140   0x4288             CMP      R0,R1
   \      0x142   0xD013             BEQ.N    ??HAL_DMA_Init_7
   \      0x144   0x6820             LDR      R0,[R4, #+0]
   \      0x146   0x.... 0x....      LDR.W    R1,??DataTable1_12
   \      0x14A   0x4288             CMP      R0,R1
   \      0x14C   0xD00E             BEQ.N    ??HAL_DMA_Init_7
   \      0x14E   0x6820             LDR      R0,[R4, #+0]
   \      0x150   0x.... 0x....      LDR.W    R1,??DataTable1_13
   \      0x154   0x4288             CMP      R0,R1
   \      0x156   0xD009             BEQ.N    ??HAL_DMA_Init_7
   \      0x158   0x6820             LDR      R0,[R4, #+0]
   \      0x15A   0x.... 0x....      LDR.W    R1,??DataTable1_14
   \      0x15E   0x4288             CMP      R0,R1
   \      0x160   0xD004             BEQ.N    ??HAL_DMA_Init_7
   \      0x162   0x6820             LDR      R0,[R4, #+0]
   \      0x164   0x.... 0x....      LDR.W    R1,??DataTable1_15
   \      0x168   0x4288             CMP      R0,R1
   \      0x16A   0xD106             BNE.N    ??HAL_DMA_Init_8
   \                     ??HAL_DMA_Init_7: (+1)
   \      0x16C   0x6820             LDR      R0,[R4, #+0]
   \      0x16E   0x6800             LDR      R0,[R0, #+0]
   \      0x170   0x0840             LSRS     R0,R0,#+1
   \      0x172   0x0040             LSLS     R0,R0,#+1
   \      0x174   0x6821             LDR      R1,[R4, #+0]
   \      0x176   0x6008             STR      R0,[R1, #+0]
   \      0x178   0xE005             B.N      ??HAL_DMA_Init_9
   \                     ??HAL_DMA_Init_8: (+1)
   \      0x17A   0x6820             LDR      R0,[R4, #+0]
   \      0x17C   0x6800             LDR      R0,[R0, #+0]
   \      0x17E   0x0840             LSRS     R0,R0,#+1
   \      0x180   0x0040             LSLS     R0,R0,#+1
   \      0x182   0x6821             LDR      R1,[R4, #+0]
   \      0x184   0x6008             STR      R0,[R1, #+0]
    254          
    255              /* Check if the DMA Stream is effectively disabled */
    256              while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
   \                     ??HAL_DMA_Init_9: (+1)
   \      0x186   0x6820             LDR      R0,[R4, #+0]
   \      0x188   0x6800             LDR      R0,[R0, #+0]
   \      0x18A   0x07C0             LSLS     R0,R0,#+31
   \      0x18C   0xD50B             BPL.N    ??HAL_DMA_Init_10
    257              {
    258                /* Check for the Timeout */
    259                if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
   \      0x18E   0x.... 0x....      BL       HAL_GetTick
   \      0x192   0x1B80             SUBS     R0,R0,R6
   \      0x194   0x2806             CMP      R0,#+6
   \      0x196   0xD3F6             BCC.N    ??HAL_DMA_Init_9
    260                {
    261                  /* Update error code */
    262                  hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
   \      0x198   0x2020             MOVS     R0,#+32
   \      0x19A   0x6560             STR      R0,[R4, #+84]
    263          
    264                  /* Change the DMA state */
    265                  hdma->State = HAL_DMA_STATE_ERROR;
   \      0x19C   0x2003             MOVS     R0,#+3
   \      0x19E   0xF884 0x0035      STRB     R0,[R4, #+53]
    266          
    267                  return HAL_ERROR;
   \      0x1A2   0x2001             MOVS     R0,#+1
   \      0x1A4   0xE1CF             B.N      ??HAL_DMA_Init_1
    268                }
    269              }
    270          
    271              /* Get the CR register value */
    272              registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
   \                     ??HAL_DMA_Init_10: (+1)
   \      0x1A6   0x6820             LDR      R0,[R4, #+0]
   \      0x1A8   0x6801             LDR      R1,[R0, #+0]
    273          
    274              /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    275              registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
    276                                  DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
    277                                  DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
    278                                  DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));
   \      0x1AA   0x.... 0x....      LDR.W    R0,??DataTable2
   \      0x1AE   0x4001             ANDS     R1,R0,R1
    279          
    280              /* Prepare the DMA Stream configuration */
    281              registerValue |=  hdma->Init.Direction           |
    282                      hdma->Init.PeriphInc           | hdma->Init.MemInc           |
    283                      hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
    284                      hdma->Init.Mode                | hdma->Init.Priority;
   \      0x1B0   0x68A0             LDR      R0,[R4, #+8]
   \      0x1B2   0x4301             ORRS     R1,R0,R1
   \      0x1B4   0x68E0             LDR      R0,[R4, #+12]
   \      0x1B6   0x4301             ORRS     R1,R0,R1
   \      0x1B8   0x6920             LDR      R0,[R4, #+16]
   \      0x1BA   0x4301             ORRS     R1,R0,R1
   \      0x1BC   0x6960             LDR      R0,[R4, #+20]
   \      0x1BE   0x4301             ORRS     R1,R0,R1
   \      0x1C0   0x69A0             LDR      R0,[R4, #+24]
   \      0x1C2   0x4301             ORRS     R1,R0,R1
   \      0x1C4   0x69E0             LDR      R0,[R4, #+28]
   \      0x1C6   0x4301             ORRS     R1,R0,R1
   \      0x1C8   0x6A20             LDR      R0,[R4, #+32]
   \      0x1CA   0x4301             ORRS     R1,R0,R1
    285          
    286              /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    287              if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
   \      0x1CC   0x6A60             LDR      R0,[R4, #+36]
   \      0x1CE   0x2804             CMP      R0,#+4
   \      0x1D0   0xD103             BNE.N    ??HAL_DMA_Init_11
    288              {
    289                /* Get memory burst and peripheral burst */
    290                registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
   \      0x1D2   0x6AE0             LDR      R0,[R4, #+44]
   \      0x1D4   0x4301             ORRS     R1,R0,R1
   \      0x1D6   0x6B20             LDR      R0,[R4, #+48]
   \      0x1D8   0x4301             ORRS     R1,R0,R1
    291              }
    292          
    293              /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
    294                                              lock when transferring data to/from USART/UART */
    295          #if (STM32H7_DEV_ID == 0x450UL)
    296              if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    297              {
    298          #endif /* STM32H7_DEV_ID == 0x450UL */
    299                if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
   \                     ??HAL_DMA_Init_11: (+1)
   \      0x1DA   0x6860             LDR      R0,[R4, #+4]
   \      0x1DC   0x3829             SUBS     R0,R0,#+41
   \      0x1DE   0x2806             CMP      R0,#+6
   \      0x1E0   0xD30F             BCC.N    ??HAL_DMA_Init_12
   \      0x1E2   0x6860             LDR      R0,[R4, #+4]
   \      0x1E4   0x383F             SUBS     R0,R0,#+63
   \      0x1E6   0x2804             CMP      R0,#+4
   \      0x1E8   0xD30B             BCC.N    ??HAL_DMA_Init_12
   \      0x1EA   0x6860             LDR      R0,[R4, #+4]
   \      0x1EC   0x3847             SUBS     R0,R0,#+71
   \      0x1EE   0x2802             CMP      R0,#+2
   \      0x1F0   0xD307             BCC.N    ??HAL_DMA_Init_12
   \      0x1F2   0x6860             LDR      R0,[R4, #+4]
   \      0x1F4   0x384F             SUBS     R0,R0,#+79
   \      0x1F6   0x2804             CMP      R0,#+4
   \      0x1F8   0xD303             BCC.N    ??HAL_DMA_Init_12
   \      0x1FA   0x6860             LDR      R0,[R4, #+4]
   \      0x1FC   0x3874             SUBS     R0,R0,#+116
   \      0x1FE   0x2804             CMP      R0,#+4
   \      0x200   0xD201             BCS.N    ??HAL_DMA_Init_13
   \                     ??HAL_DMA_Init_12: (+1)
   \      0x202   0x2001             MOVS     R0,#+1
   \      0x204   0xE000             B.N      ??HAL_DMA_Init_14
   \                     ??HAL_DMA_Init_13: (+1)
   \      0x206   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_Init_14: (+1)
   \      0x208   0xB2C0             UXTB     R0,R0
   \      0x20A   0x2800             CMP      R0,#+0
   \      0x20C   0xD001             BEQ.N    ??HAL_DMA_Init_15
    300                {
    301                  registerValue |= DMA_SxCR_TRBUFF;
   \      0x20E   0xF451 0x1180      ORRS     R1,R1,#0x100000
    302                }
    303          #if (STM32H7_DEV_ID == 0x450UL)
    304              }
    305          #endif /* STM32H7_DEV_ID == 0x450UL */
    306          
    307              /* Write to DMA Stream CR register */
    308              ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
   \                     ??HAL_DMA_Init_15: (+1)
   \      0x212   0x6820             LDR      R0,[R4, #+0]
   \      0x214   0x6001             STR      R1,[R0, #+0]
    309          
    310              /* Get the FCR register value */
    311              registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
   \      0x216   0x6820             LDR      R0,[R4, #+0]
   \      0x218   0x6946             LDR      R6,[R0, #+20]
    312          
    313              /* Clear Direct mode and FIFO threshold bits */
    314              registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
   \      0x21A   0x08F6             LSRS     R6,R6,#+3
   \      0x21C   0x00F6             LSLS     R6,R6,#+3
    315          
    316              /* Prepare the DMA Stream FIFO configuration */
    317              registerValue |= hdma->Init.FIFOMode;
   \      0x21E   0x6A60             LDR      R0,[R4, #+36]
   \      0x220   0x4306             ORRS     R6,R0,R6
    318          
    319              /* the FIFO threshold is not used when the FIFO mode is disabled */
    320              if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
   \      0x222   0x6A60             LDR      R0,[R4, #+36]
   \      0x224   0x2804             CMP      R0,#+4
   \      0x226   0xD110             BNE.N    ??HAL_DMA_Init_16
    321              {
    322                /* Get the FIFO threshold */
    323                registerValue |= hdma->Init.FIFOThreshold;
   \      0x228   0x6AA0             LDR      R0,[R4, #+40]
   \      0x22A   0x4306             ORRS     R6,R0,R6
    324          
    325                /* Check compatibility between FIFO threshold level and size of the memory burst */
    326                /* for INCR4, INCR8, INCR16 */
    327                if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
   \      0x22C   0x6AE0             LDR      R0,[R4, #+44]
   \      0x22E   0x2800             CMP      R0,#+0
   \      0x230   0xD00B             BEQ.N    ??HAL_DMA_Init_16
    328                {
    329                  if (DMA_CheckFifoParam(hdma) != HAL_OK)
   \      0x232   0x0020             MOVS     R0,R4
   \      0x234   0x.... 0x....      BL       DMA_CheckFifoParam
   \      0x238   0x2800             CMP      R0,#+0
   \      0x23A   0xD006             BEQ.N    ??HAL_DMA_Init_16
    330                  {
    331                    /* Update error code */
    332                    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
   \      0x23C   0x2040             MOVS     R0,#+64
   \      0x23E   0x6560             STR      R0,[R4, #+84]
    333          
    334                    /* Change the DMA state */
    335                    hdma->State = HAL_DMA_STATE_READY;
   \      0x240   0x2001             MOVS     R0,#+1
   \      0x242   0xF884 0x0035      STRB     R0,[R4, #+53]
    336          
    337                    return HAL_ERROR;
   \      0x246   0x2001             MOVS     R0,#+1
   \      0x248   0xE17D             B.N      ??HAL_DMA_Init_1
    338                  }
    339                }
    340              }
    341          
    342              /* Write to DMA Stream FCR */
    343              ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
   \                     ??HAL_DMA_Init_16: (+1)
   \      0x24A   0x6820             LDR      R0,[R4, #+0]
   \      0x24C   0x6146             STR      R6,[R0, #+20]
    344          
    345              /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    346                 DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    347              regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
   \      0x24E   0x0020             MOVS     R0,R4
   \      0x250   0x.... 0x....      BL       DMA_CalcBaseAndBitshift
    348          
    349              /* Clear all interrupt flags */
    350              regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
   \      0x254   0x213F             MOVS     R1,#+63
   \      0x256   0xF894 0x205C      LDRB     R2,[R4, #+92]
   \      0x25A   0xF012 0x021F      ANDS     R2,R2,#0x1F
   \      0x25E   0x4091             LSLS     R1,R1,R2
   \      0x260   0x6081             STR      R1,[R0, #+8]
    351            }
    352            else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
    353            {
    354              if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
    355              {
    356                /* Check the request parameter */
    357                assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    358              }
    359          
    360              /* Change DMA peripheral state */
    361              hdma->State = HAL_DMA_STATE_BUSY;
    362          
    363              /* Allocate lock resource */
    364              __HAL_UNLOCK(hdma);
    365          
    366              /* Get the CR register value */
    367              registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
    368          
    369              /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    370              registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
    371                                            BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
    372                                            BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
    373                                            BDMA_CCR_CT));
    374          
    375              /* Prepare the DMA Channel configuration */
    376              registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
    377                                DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
    378                                DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
    379                                DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
    380                                DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
    381                                DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
    382                                DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
    383          
    384              /* Write to DMA Channel CR register */
    385              ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
    386          
    387              /* calculation of the channel index */
    388              hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
    389          
    390              /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    391              DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    392              regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
    393          
    394              /* Clear all interrupt flags */
    395              regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
    396            }
    397            else
    398            {
    399              hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
    400              hdma->State     = HAL_DMA_STATE_ERROR;
    401          
    402              return HAL_ERROR;
    403            }
    404          
    405            if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
   \                     ??HAL_DMA_Init_17: (+1)
   \      0x262   0x6820             LDR      R0,[R4, #+0]
   \      0x264   0x42A8             CMP      R0,R5
   \      0x266   0xD073             BEQ.N    ??HAL_DMA_Init_18
   \      0x268   0x6820             LDR      R0,[R4, #+0]
   \      0x26A   0x.... 0x....      LDR.W    R1,??DataTable1_1
   \      0x26E   0x4288             CMP      R0,R1
   \      0x270   0xD06E             BEQ.N    ??HAL_DMA_Init_18
   \      0x272   0x6820             LDR      R0,[R4, #+0]
   \      0x274   0x.... 0x....      LDR.W    R1,??DataTable1_2
   \      0x278   0x4288             CMP      R0,R1
   \      0x27A   0xD069             BEQ.N    ??HAL_DMA_Init_18
   \      0x27C   0x6820             LDR      R0,[R4, #+0]
   \      0x27E   0x.... 0x....      LDR.W    R1,??DataTable1_3
   \      0x282   0x4288             CMP      R0,R1
   \      0x284   0xD064             BEQ.N    ??HAL_DMA_Init_18
   \      0x286   0x6820             LDR      R0,[R4, #+0]
   \      0x288   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \      0x28C   0x4288             CMP      R0,R1
   \      0x28E   0xD05F             BEQ.N    ??HAL_DMA_Init_18
   \      0x290   0x6820             LDR      R0,[R4, #+0]
   \      0x292   0x.... 0x....      LDR.W    R1,??DataTable1_5
   \      0x296   0x4288             CMP      R0,R1
   \      0x298   0xD05A             BEQ.N    ??HAL_DMA_Init_18
   \      0x29A   0x6820             LDR      R0,[R4, #+0]
   \      0x29C   0x.... 0x....      LDR.W    R1,??DataTable1_6
   \      0x2A0   0x4288             CMP      R0,R1
   \      0x2A2   0xD055             BEQ.N    ??HAL_DMA_Init_18
   \      0x2A4   0x6820             LDR      R0,[R4, #+0]
   \      0x2A6   0x.... 0x....      LDR.W    R1,??DataTable1_7
   \      0x2AA   0x4288             CMP      R0,R1
   \      0x2AC   0xD050             BEQ.N    ??HAL_DMA_Init_18
   \      0x2AE   0x6820             LDR      R0,[R4, #+0]
   \      0x2B0   0x.... 0x....      LDR.W    R1,??DataTable1_8
   \      0x2B4   0x4288             CMP      R0,R1
   \      0x2B6   0xD04B             BEQ.N    ??HAL_DMA_Init_18
   \      0x2B8   0x6820             LDR      R0,[R4, #+0]
   \      0x2BA   0x.... 0x....      LDR.W    R1,??DataTable1_9
   \      0x2BE   0x4288             CMP      R0,R1
   \      0x2C0   0xD046             BEQ.N    ??HAL_DMA_Init_18
   \      0x2C2   0x6820             LDR      R0,[R4, #+0]
   \      0x2C4   0x.... 0x....      LDR.W    R1,??DataTable1_10
   \      0x2C8   0x4288             CMP      R0,R1
   \      0x2CA   0xD041             BEQ.N    ??HAL_DMA_Init_18
   \      0x2CC   0x6820             LDR      R0,[R4, #+0]
   \      0x2CE   0x.... 0x....      LDR.W    R1,??DataTable1_11
   \      0x2D2   0x4288             CMP      R0,R1
   \      0x2D4   0xD03C             BEQ.N    ??HAL_DMA_Init_18
   \      0x2D6   0x6820             LDR      R0,[R4, #+0]
   \      0x2D8   0x.... 0x....      LDR.W    R1,??DataTable1_12
   \      0x2DC   0x4288             CMP      R0,R1
   \      0x2DE   0xD037             BEQ.N    ??HAL_DMA_Init_18
   \      0x2E0   0x6820             LDR      R0,[R4, #+0]
   \      0x2E2   0x.... 0x....      LDR.W    R1,??DataTable1_13
   \      0x2E6   0x4288             CMP      R0,R1
   \      0x2E8   0xD032             BEQ.N    ??HAL_DMA_Init_18
   \      0x2EA   0x6820             LDR      R0,[R4, #+0]
   \      0x2EC   0x.... 0x....      LDR.W    R1,??DataTable1_14
   \      0x2F0   0x4288             CMP      R0,R1
   \      0x2F2   0xD02D             BEQ.N    ??HAL_DMA_Init_18
   \      0x2F4   0x6820             LDR      R0,[R4, #+0]
   \      0x2F6   0x.... 0x....      LDR.W    R1,??DataTable1_15
   \      0x2FA   0x4288             CMP      R0,R1
   \      0x2FC   0xD028             BEQ.N    ??HAL_DMA_Init_18
   \      0x2FE   0x6820             LDR      R0,[R4, #+0]
   \      0x300   0x.... 0x....      LDR.W    R1,??DataTable2_1
   \      0x304   0x4288             CMP      R0,R1
   \      0x306   0xD023             BEQ.N    ??HAL_DMA_Init_18
   \      0x308   0x6820             LDR      R0,[R4, #+0]
   \      0x30A   0x.... 0x....      LDR.W    R1,??DataTable2_2
   \      0x30E   0x4288             CMP      R0,R1
   \      0x310   0xD01E             BEQ.N    ??HAL_DMA_Init_18
   \      0x312   0x6820             LDR      R0,[R4, #+0]
   \      0x314   0x.... 0x....      LDR.W    R1,??DataTable2_3
   \      0x318   0x4288             CMP      R0,R1
   \      0x31A   0xD019             BEQ.N    ??HAL_DMA_Init_18
   \      0x31C   0x6820             LDR      R0,[R4, #+0]
   \      0x31E   0x.... 0x....      LDR.W    R1,??DataTable2_4
   \      0x322   0x4288             CMP      R0,R1
   \      0x324   0xD014             BEQ.N    ??HAL_DMA_Init_18
   \      0x326   0x6820             LDR      R0,[R4, #+0]
   \      0x328   0x.... 0x....      LDR.W    R1,??DataTable2_5
   \      0x32C   0x4288             CMP      R0,R1
   \      0x32E   0xD00F             BEQ.N    ??HAL_DMA_Init_18
   \      0x330   0x6820             LDR      R0,[R4, #+0]
   \      0x332   0x.... 0x....      LDR.W    R1,??DataTable2_6
   \      0x336   0x4288             CMP      R0,R1
   \      0x338   0xD00A             BEQ.N    ??HAL_DMA_Init_18
   \      0x33A   0x6820             LDR      R0,[R4, #+0]
   \      0x33C   0x.... 0x....      LDR.W    R1,??DataTable2_7
   \      0x340   0x4288             CMP      R0,R1
   \      0x342   0xD005             BEQ.N    ??HAL_DMA_Init_18
   \      0x344   0x6820             LDR      R0,[R4, #+0]
   \      0x346   0x.... 0x....      LDR.W    R1,??DataTable2_8
   \      0x34A   0x4288             CMP      R0,R1
   \      0x34C   0xF040 0x80CB      BNE.W    ??HAL_DMA_Init_19
   \                     ??HAL_DMA_Init_18: (+1)
   \      0x350   0x2001             MOVS     R0,#+1
   \      0x352   0xE0C9             B.N      ??HAL_DMA_Init_20
   \                     ??HAL_DMA_Init_5: (+1)
   \      0x354   0x6820             LDR      R0,[R4, #+0]
   \      0x356   0x.... 0x....      LDR.W    R1,??DataTable2_9
   \      0x35A   0x4288             CMP      R0,R1
   \      0x35C   0xD04A             BEQ.N    ??HAL_DMA_Init_21
   \      0x35E   0x6820             LDR      R0,[R4, #+0]
   \      0x360   0x.... 0x....      LDR.W    R1,??DataTable2_10
   \      0x364   0x4288             CMP      R0,R1
   \      0x366   0xD045             BEQ.N    ??HAL_DMA_Init_21
   \      0x368   0x6820             LDR      R0,[R4, #+0]
   \      0x36A   0x.... 0x....      LDR.W    R1,??DataTable2_11
   \      0x36E   0x4288             CMP      R0,R1
   \      0x370   0xD040             BEQ.N    ??HAL_DMA_Init_21
   \      0x372   0x6820             LDR      R0,[R4, #+0]
   \      0x374   0x.... 0x....      LDR.W    R1,??DataTable2_12
   \      0x378   0x4288             CMP      R0,R1
   \      0x37A   0xD03B             BEQ.N    ??HAL_DMA_Init_21
   \      0x37C   0x6820             LDR      R0,[R4, #+0]
   \      0x37E   0x.... 0x....      LDR.W    R1,??DataTable2_13
   \      0x382   0x4288             CMP      R0,R1
   \      0x384   0xD036             BEQ.N    ??HAL_DMA_Init_21
   \      0x386   0x6820             LDR      R0,[R4, #+0]
   \      0x388   0x.... 0x....      LDR.W    R1,??DataTable2_14
   \      0x38C   0x4288             CMP      R0,R1
   \      0x38E   0xD031             BEQ.N    ??HAL_DMA_Init_21
   \      0x390   0x6820             LDR      R0,[R4, #+0]
   \      0x392   0x.... 0x....      LDR.W    R1,??DataTable2_15
   \      0x396   0x4288             CMP      R0,R1
   \      0x398   0xD02C             BEQ.N    ??HAL_DMA_Init_21
   \      0x39A   0x6820             LDR      R0,[R4, #+0]
   \      0x39C   0x.... 0x....      LDR.W    R1,??DataTable2_16
   \      0x3A0   0x4288             CMP      R0,R1
   \      0x3A2   0xD027             BEQ.N    ??HAL_DMA_Init_21
   \      0x3A4   0x6820             LDR      R0,[R4, #+0]
   \      0x3A6   0x.... 0x....      LDR.W    R1,??DataTable2_1
   \      0x3AA   0x4288             CMP      R0,R1
   \      0x3AC   0xD022             BEQ.N    ??HAL_DMA_Init_21
   \      0x3AE   0x6820             LDR      R0,[R4, #+0]
   \      0x3B0   0x.... 0x....      LDR.W    R1,??DataTable2_2
   \      0x3B4   0x4288             CMP      R0,R1
   \      0x3B6   0xD01D             BEQ.N    ??HAL_DMA_Init_21
   \      0x3B8   0x6820             LDR      R0,[R4, #+0]
   \      0x3BA   0x.... 0x....      LDR.W    R1,??DataTable2_3
   \      0x3BE   0x4288             CMP      R0,R1
   \      0x3C0   0xD018             BEQ.N    ??HAL_DMA_Init_21
   \      0x3C2   0x6820             LDR      R0,[R4, #+0]
   \      0x3C4   0x.... 0x....      LDR.W    R1,??DataTable2_4
   \      0x3C8   0x4288             CMP      R0,R1
   \      0x3CA   0xD013             BEQ.N    ??HAL_DMA_Init_21
   \      0x3CC   0x6820             LDR      R0,[R4, #+0]
   \      0x3CE   0x.... 0x....      LDR.W    R1,??DataTable2_5
   \      0x3D2   0x4288             CMP      R0,R1
   \      0x3D4   0xD00E             BEQ.N    ??HAL_DMA_Init_21
   \      0x3D6   0x6820             LDR      R0,[R4, #+0]
   \      0x3D8   0x.... 0x....      LDR.W    R1,??DataTable2_6
   \      0x3DC   0x4288             CMP      R0,R1
   \      0x3DE   0xD009             BEQ.N    ??HAL_DMA_Init_21
   \      0x3E0   0x6820             LDR      R0,[R4, #+0]
   \      0x3E2   0x.... 0x....      LDR.W    R1,??DataTable2_7
   \      0x3E6   0x4288             CMP      R0,R1
   \      0x3E8   0xD004             BEQ.N    ??HAL_DMA_Init_21
   \      0x3EA   0x6820             LDR      R0,[R4, #+0]
   \      0x3EC   0x.... 0x....      LDR.W    R1,??DataTable2_8
   \      0x3F0   0x4288             CMP      R0,R1
   \      0x3F2   0xD101             BNE.N    ??HAL_DMA_Init_22
   \                     ??HAL_DMA_Init_21: (+1)
   \      0x3F4   0x2001             MOVS     R0,#+1
   \      0x3F6   0xE000             B.N      ??HAL_DMA_Init_23
   \                     ??HAL_DMA_Init_22: (+1)
   \      0x3F8   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_Init_23: (+1)
   \      0x3FA   0xB2C0             UXTB     R0,R0
   \      0x3FC   0x2800             CMP      R0,#+0
   \      0x3FE   0xD06B             BEQ.N    ??HAL_DMA_Init_24
   \      0x400   0x6820             LDR      R0,[R4, #+0]
   \      0x402   0x.... 0x....      LDR.W    R1,??DataTable2_1
   \      0x406   0x4288             CMP      R0,R1
   \      0x408   0xD022             BEQ.N    ??HAL_DMA_Init_25
   \      0x40A   0x6820             LDR      R0,[R4, #+0]
   \      0x40C   0x.... 0x....      LDR.W    R1,??DataTable2_2
   \      0x410   0x4288             CMP      R0,R1
   \      0x412   0xD01D             BEQ.N    ??HAL_DMA_Init_25
   \      0x414   0x6820             LDR      R0,[R4, #+0]
   \      0x416   0x.... 0x....      LDR.W    R1,??DataTable2_3
   \      0x41A   0x4288             CMP      R0,R1
   \      0x41C   0xD018             BEQ.N    ??HAL_DMA_Init_25
   \      0x41E   0x6820             LDR      R0,[R4, #+0]
   \      0x420   0x.... 0x....      LDR.W    R1,??DataTable2_4
   \      0x424   0x4288             CMP      R0,R1
   \      0x426   0xD013             BEQ.N    ??HAL_DMA_Init_25
   \      0x428   0x6820             LDR      R0,[R4, #+0]
   \      0x42A   0x.... 0x....      LDR.W    R1,??DataTable2_5
   \      0x42E   0x4288             CMP      R0,R1
   \      0x430   0xD00E             BEQ.N    ??HAL_DMA_Init_25
   \      0x432   0x6820             LDR      R0,[R4, #+0]
   \      0x434   0x.... 0x....      LDR.W    R1,??DataTable2_6
   \      0x438   0x4288             CMP      R0,R1
   \      0x43A   0xD009             BEQ.N    ??HAL_DMA_Init_25
   \      0x43C   0x6820             LDR      R0,[R4, #+0]
   \      0x43E   0x.... 0x....      LDR.W    R1,??DataTable2_7
   \      0x442   0x4288             CMP      R0,R1
   \      0x444   0xD004             BEQ.N    ??HAL_DMA_Init_25
   \      0x446   0x6820             LDR      R0,[R4, #+0]
   \      0x448   0x.... 0x....      LDR.W    R1,??DataTable2_8
   \      0x44C   0x4288             CMP      R0,R1
   \      0x44E   0xD101             BNE.N    ??HAL_DMA_Init_26
   \                     ??HAL_DMA_Init_25: (+1)
   \      0x450   0x2001             MOVS     R0,#+1
   \      0x452   0xE000             B.N      ??HAL_DMA_Init_27
   \                     ??HAL_DMA_Init_26: (+1)
   \      0x454   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_Init_27: (+1)
   \      0x456   0xB2C0             UXTB     R0,R0
   \      0x458   0x2800             CMP      R0,#+0
   \                     ??HAL_DMA_Init_28: (+1)
   \      0x45A   0x2002             MOVS     R0,#+2
   \      0x45C   0xF884 0x0035      STRB     R0,[R4, #+53]
   \      0x460   0x2000             MOVS     R0,#+0
   \      0x462   0xF884 0x0034      STRB     R0,[R4, #+52]
   \      0x466   0x6820             LDR      R0,[R4, #+0]
   \      0x468   0x6800             LDR      R0,[R0, #+0]
   \      0x46A   0xF36F 0x1010      BFC      R0,#+4,#+13
   \      0x46E   0x68A1             LDR      R1,[R4, #+8]
   \      0x470   0x2940             CMP      R1,#+64
   \      0x472   0xD101             BNE.N    ??HAL_DMA_Init_29
   \      0x474   0x2110             MOVS     R1,#+16
   \      0x476   0xE006             B.N      ??HAL_DMA_Init_30
   \                     ??HAL_DMA_Init_29: (+1)
   \      0x478   0x68A1             LDR      R1,[R4, #+8]
   \      0x47A   0x2980             CMP      R1,#+128
   \      0x47C   0xD102             BNE.N    ??HAL_DMA_Init_31
   \      0x47E   0xF44F 0x4180      MOV      R1,#+16384
   \      0x482   0xE000             B.N      ??HAL_DMA_Init_30
   \                     ??HAL_DMA_Init_31: (+1)
   \      0x484   0x2100             MOVS     R1,#+0
   \                     ??HAL_DMA_Init_30: (+1)
   \      0x486   0x4308             ORRS     R0,R1,R0
   \      0x488   0x68E1             LDR      R1,[R4, #+12]
   \      0x48A   0xEA50 0x00D1      ORRS     R0,R0,R1, LSR #+3
   \      0x48E   0x6921             LDR      R1,[R4, #+16]
   \      0x490   0xEA50 0x00D1      ORRS     R0,R0,R1, LSR #+3
   \      0x494   0x6961             LDR      R1,[R4, #+20]
   \      0x496   0xEA50 0x00D1      ORRS     R0,R0,R1, LSR #+3
   \      0x49A   0x69A1             LDR      R1,[R4, #+24]
   \      0x49C   0xEA50 0x00D1      ORRS     R0,R0,R1, LSR #+3
   \      0x4A0   0x69E1             LDR      R1,[R4, #+28]
   \      0x4A2   0xEA50 0x00D1      ORRS     R0,R0,R1, LSR #+3
   \      0x4A6   0x6A21             LDR      R1,[R4, #+32]
   \      0x4A8   0xEA50 0x1011      ORRS     R0,R0,R1, LSR #+4
   \      0x4AC   0x6821             LDR      R1,[R4, #+0]
   \      0x4AE   0x6008             STR      R0,[R1, #+0]
   \      0x4B0   0x6821             LDR      R1,[R4, #+0]
   \      0x4B2   0x.... 0x....      LDR.W    R0,??DataTable3
   \      0x4B6   0x1841             ADDS     R1,R0,R1
   \      0x4B8   0x2014             MOVS     R0,#+20
   \      0x4BA   0xFBB1 0xF0F0      UDIV     R0,R1,R0
   \      0x4BE   0x0080             LSLS     R0,R0,#+2
   \      0x4C0   0x65E0             STR      R0,[R4, #+92]
   \      0x4C2   0x0020             MOVS     R0,R4
   \      0x4C4   0x.... 0x....      BL       DMA_CalcBaseAndBitshift
   \      0x4C8   0x2101             MOVS     R1,#+1
   \      0x4CA   0xF894 0x205C      LDRB     R2,[R4, #+92]
   \      0x4CE   0xF012 0x021F      ANDS     R2,R2,#0x1F
   \      0x4D2   0x4091             LSLS     R1,R1,R2
   \      0x4D4   0x6041             STR      R1,[R0, #+4]
   \      0x4D6   0xE6C4             B.N      ??HAL_DMA_Init_17
   \                     ??HAL_DMA_Init_24: (+1)
   \      0x4D8   0x2040             MOVS     R0,#+64
   \      0x4DA   0x6560             STR      R0,[R4, #+84]
   \      0x4DC   0x2003             MOVS     R0,#+3
   \      0x4DE   0xF884 0x0035      STRB     R0,[R4, #+53]
   \      0x4E2   0x2001             MOVS     R0,#+1
   \      0x4E4   0xE02F             B.N      ??HAL_DMA_Init_1
   \                     ??HAL_DMA_Init_19: (+1)
   \      0x4E6   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_Init_20: (+1)
   \      0x4E8   0xB2C0             UXTB     R0,R0
   \      0x4EA   0x2800             CMP      R0,#+0
   \      0x4EC   0xD025             BEQ.N    ??HAL_DMA_Init_32
    406            {
    407              /* Initialize parameters for DMAMUX channel :
    408              DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    409              */
    410              DMA_CalcDMAMUXChannelBaseAndMask(hdma);
   \      0x4EE   0x0020             MOVS     R0,R4
   \      0x4F0   0x.... 0x....      BL       DMA_CalcDMAMUXChannelBaseAndMask
    411          
    412              if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
   \      0x4F4   0x68A0             LDR      R0,[R4, #+8]
   \      0x4F6   0x2880             CMP      R0,#+128
   \      0x4F8   0xD101             BNE.N    ??HAL_DMA_Init_33
    413              {
    414                /* if memory to memory force the request to 0*/
    415                hdma->Init.Request = DMA_REQUEST_MEM2MEM;
   \      0x4FA   0x2000             MOVS     R0,#+0
   \      0x4FC   0x6060             STR      R0,[R4, #+4]
    416              }
    417          
    418              /* Set peripheral request  to DMAMUX channel */
    419              hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
   \                     ??HAL_DMA_Init_33: (+1)
   \      0x4FE   0x7920             LDRB     R0,[R4, #+4]
   \      0x500   0xF000 0x00FF      AND      R0,R0,#0xFF
   \      0x504   0x6E21             LDR      R1,[R4, #+96]
   \      0x506   0x6008             STR      R0,[R1, #+0]
    420          
    421              /* Clear the DMAMUX synchro overrun flag */
    422              hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
   \      0x508   0x6EA0             LDR      R0,[R4, #+104]
   \      0x50A   0x6E61             LDR      R1,[R4, #+100]
   \      0x50C   0x6048             STR      R0,[R1, #+4]
    423          
    424              /* Initialize parameters for DMAMUX request generator :
    425              if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    426              */
    427              if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
   \      0x50E   0x6860             LDR      R0,[R4, #+4]
   \      0x510   0x2800             CMP      R0,#+0
   \      0x512   0xD00C             BEQ.N    ??HAL_DMA_Init_34
   \      0x514   0x6860             LDR      R0,[R4, #+4]
   \      0x516   0x2809             CMP      R0,#+9
   \      0x518   0xD209             BCS.N    ??HAL_DMA_Init_34
    428              {
    429                /* Initialize parameters for DMAMUX request generator :
    430                DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
    431                DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
   \      0x51A   0x0020             MOVS     R0,R4
   \      0x51C   0x.... 0x....      BL       DMA_CalcDMAMUXRequestGenBaseAndMask
    432          
    433                /* Reset the DMAMUX request generator register */
    434                hdma->DMAmuxRequestGen->RGCR = 0U;
   \      0x520   0x2000             MOVS     R0,#+0
   \      0x522   0x6EE1             LDR      R1,[R4, #+108]
   \      0x524   0x6008             STR      R0,[R1, #+0]
    435          
    436                /* Clear the DMAMUX request generator overrun flag */
    437                hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
   \      0x526   0x6F60             LDR      R0,[R4, #+116]
   \      0x528   0x6F21             LDR      R1,[R4, #+112]
   \      0x52A   0x6048             STR      R0,[R1, #+4]
   \      0x52C   0xE005             B.N      ??HAL_DMA_Init_32
    438              }
    439              else
    440              {
    441                hdma->DMAmuxRequestGen = 0U;
   \                     ??HAL_DMA_Init_34: (+1)
   \      0x52E   0x2000             MOVS     R0,#+0
   \      0x530   0x66E0             STR      R0,[R4, #+108]
    442                hdma->DMAmuxRequestGenStatus = 0U;
   \      0x532   0x2000             MOVS     R0,#+0
   \      0x534   0x6720             STR      R0,[R4, #+112]
    443                hdma->DMAmuxRequestGenStatusMask = 0U;
   \      0x536   0x2000             MOVS     R0,#+0
   \      0x538   0x6760             STR      R0,[R4, #+116]
    444              }
    445            }
    446          
    447            /* Initialize the error code */
    448            hdma->ErrorCode = HAL_DMA_ERROR_NONE;
   \                     ??HAL_DMA_Init_32: (+1)
   \      0x53A   0x2000             MOVS     R0,#+0
   \      0x53C   0x6560             STR      R0,[R4, #+84]
    449          
    450            /* Initialize the DMA state */
    451            hdma->State = HAL_DMA_STATE_READY;
   \      0x53E   0x2001             MOVS     R0,#+1
   \      0x540   0xF884 0x0035      STRB     R0,[R4, #+53]
    452          
    453            return HAL_OK;
   \      0x544   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_Init_1: (+1)
   \      0x546   0xBD70             POP      {R4-R6,PC}
    454          }
    455          
    456          /**
    457            * @brief  DeInitializes the DMA peripheral
    458            * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
    459            *               the configuration information for the specified DMA Stream.
    460            * @retval HAL status
    461            */

   \                                 In section .text, align 2, keep-with-next
    462          HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
    463          {
   \                     HAL_DMA_DeInit: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
    464            DMA_Base_Registers *regs_dma;
    465            BDMA_Base_Registers *regs_bdma;
    466          
    467            /* Check the DMA peripheral handle */
    468            if(hdma == NULL)
   \        0x4   0x2C00             CMP      R4,#+0
   \        0x6   0xD101             BNE.N    ??HAL_DMA_DeInit_0
    469            {
    470              return HAL_ERROR;
   \        0x8   0x2001             MOVS     R0,#+1
   \        0xA   0xE1D1             B.N      ??HAL_DMA_DeInit_1
    471            }
    472          
    473            /* Disable the selected DMA Streamx */
    474            __HAL_DMA_DISABLE(hdma);
   \                     ??HAL_DMA_DeInit_0: (+1)
   \        0xC   0x.... 0x....      LDR.W    R5,??DataTable1
   \       0x10   0x6820             LDR      R0,[R4, #+0]
   \       0x12   0x42A8             CMP      R0,R5
   \       0x14   0xD04A             BEQ.N    ??HAL_DMA_DeInit_2
   \       0x16   0x6820             LDR      R0,[R4, #+0]
   \       0x18   0x.... 0x....      LDR.W    R1,??DataTable1_1
   \       0x1C   0x4288             CMP      R0,R1
   \       0x1E   0xD045             BEQ.N    ??HAL_DMA_DeInit_2
   \       0x20   0x6820             LDR      R0,[R4, #+0]
   \       0x22   0x.... 0x....      LDR.W    R1,??DataTable1_2
   \       0x26   0x4288             CMP      R0,R1
   \       0x28   0xD040             BEQ.N    ??HAL_DMA_DeInit_2
   \       0x2A   0x6820             LDR      R0,[R4, #+0]
   \       0x2C   0x.... 0x....      LDR.W    R1,??DataTable1_3
   \       0x30   0x4288             CMP      R0,R1
   \       0x32   0xD03B             BEQ.N    ??HAL_DMA_DeInit_2
   \       0x34   0x6820             LDR      R0,[R4, #+0]
   \       0x36   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \       0x3A   0x4288             CMP      R0,R1
   \       0x3C   0xD036             BEQ.N    ??HAL_DMA_DeInit_2
   \       0x3E   0x6820             LDR      R0,[R4, #+0]
   \       0x40   0x.... 0x....      LDR.W    R1,??DataTable1_5
   \       0x44   0x4288             CMP      R0,R1
   \       0x46   0xD031             BEQ.N    ??HAL_DMA_DeInit_2
   \       0x48   0x6820             LDR      R0,[R4, #+0]
   \       0x4A   0x.... 0x....      LDR.W    R1,??DataTable1_6
   \       0x4E   0x4288             CMP      R0,R1
   \       0x50   0xD02C             BEQ.N    ??HAL_DMA_DeInit_2
   \       0x52   0x6820             LDR      R0,[R4, #+0]
   \       0x54   0x.... 0x....      LDR.W    R1,??DataTable1_7
   \       0x58   0x4288             CMP      R0,R1
   \       0x5A   0xD027             BEQ.N    ??HAL_DMA_DeInit_2
   \       0x5C   0x6820             LDR      R0,[R4, #+0]
   \       0x5E   0x.... 0x....      LDR.W    R1,??DataTable1_8
   \       0x62   0x4288             CMP      R0,R1
   \       0x64   0xD022             BEQ.N    ??HAL_DMA_DeInit_2
   \       0x66   0x6820             LDR      R0,[R4, #+0]
   \       0x68   0x.... 0x....      LDR.W    R1,??DataTable1_9
   \       0x6C   0x4288             CMP      R0,R1
   \       0x6E   0xD01D             BEQ.N    ??HAL_DMA_DeInit_2
   \       0x70   0x6820             LDR      R0,[R4, #+0]
   \       0x72   0x.... 0x....      LDR.W    R1,??DataTable1_10
   \       0x76   0x4288             CMP      R0,R1
   \       0x78   0xD018             BEQ.N    ??HAL_DMA_DeInit_2
   \       0x7A   0x6820             LDR      R0,[R4, #+0]
   \       0x7C   0x.... 0x....      LDR.W    R1,??DataTable1_11
   \       0x80   0x4288             CMP      R0,R1
   \       0x82   0xD013             BEQ.N    ??HAL_DMA_DeInit_2
   \       0x84   0x6820             LDR      R0,[R4, #+0]
   \       0x86   0x.... 0x....      LDR.W    R1,??DataTable1_12
   \       0x8A   0x4288             CMP      R0,R1
   \       0x8C   0xD00E             BEQ.N    ??HAL_DMA_DeInit_2
   \       0x8E   0x6820             LDR      R0,[R4, #+0]
   \       0x90   0x.... 0x....      LDR.W    R1,??DataTable1_13
   \       0x94   0x4288             CMP      R0,R1
   \       0x96   0xD009             BEQ.N    ??HAL_DMA_DeInit_2
   \       0x98   0x6820             LDR      R0,[R4, #+0]
   \       0x9A   0x.... 0x....      LDR.W    R1,??DataTable1_14
   \       0x9E   0x4288             CMP      R0,R1
   \       0xA0   0xD004             BEQ.N    ??HAL_DMA_DeInit_2
   \       0xA2   0x6820             LDR      R0,[R4, #+0]
   \       0xA4   0x.... 0x....      LDR.W    R1,??DataTable1_15
   \       0xA8   0x4288             CMP      R0,R1
   \       0xAA   0xD106             BNE.N    ??HAL_DMA_DeInit_3
   \                     ??HAL_DMA_DeInit_2: (+1)
   \       0xAC   0x6820             LDR      R0,[R4, #+0]
   \       0xAE   0x6800             LDR      R0,[R0, #+0]
   \       0xB0   0x0840             LSRS     R0,R0,#+1
   \       0xB2   0x0040             LSLS     R0,R0,#+1
   \       0xB4   0x6821             LDR      R1,[R4, #+0]
   \       0xB6   0x6008             STR      R0,[R1, #+0]
   \       0xB8   0xE005             B.N      ??HAL_DMA_DeInit_4
   \                     ??HAL_DMA_DeInit_3: (+1)
   \       0xBA   0x6820             LDR      R0,[R4, #+0]
   \       0xBC   0x6800             LDR      R0,[R0, #+0]
   \       0xBE   0x0840             LSRS     R0,R0,#+1
   \       0xC0   0x0040             LSLS     R0,R0,#+1
   \       0xC2   0x6821             LDR      R1,[R4, #+0]
   \       0xC4   0x6008             STR      R0,[R1, #+0]
    475          
    476            if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
   \                     ??HAL_DMA_DeInit_4: (+1)
   \       0xC6   0x6820             LDR      R0,[R4, #+0]
   \       0xC8   0x42A8             CMP      R0,R5
   \       0xCA   0xD041             BEQ.N    ??HAL_DMA_DeInit_5
   \       0xCC   0x6820             LDR      R0,[R4, #+0]
   \       0xCE   0x.... 0x....      LDR.W    R1,??DataTable1_1
   \       0xD2   0x4288             CMP      R0,R1
   \       0xD4   0xD03C             BEQ.N    ??HAL_DMA_DeInit_5
   \       0xD6   0x6820             LDR      R0,[R4, #+0]
   \       0xD8   0x.... 0x....      LDR.W    R1,??DataTable1_2
   \       0xDC   0x4288             CMP      R0,R1
   \       0xDE   0xD037             BEQ.N    ??HAL_DMA_DeInit_5
   \       0xE0   0x6820             LDR      R0,[R4, #+0]
   \       0xE2   0x.... 0x....      LDR.W    R1,??DataTable1_3
   \       0xE6   0x4288             CMP      R0,R1
   \       0xE8   0xD032             BEQ.N    ??HAL_DMA_DeInit_5
   \       0xEA   0x6820             LDR      R0,[R4, #+0]
   \       0xEC   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \       0xF0   0x4288             CMP      R0,R1
   \       0xF2   0xD02D             BEQ.N    ??HAL_DMA_DeInit_5
   \       0xF4   0x6820             LDR      R0,[R4, #+0]
   \       0xF6   0x.... 0x....      LDR.W    R1,??DataTable1_5
   \       0xFA   0x4288             CMP      R0,R1
   \       0xFC   0xD028             BEQ.N    ??HAL_DMA_DeInit_5
   \       0xFE   0x6820             LDR      R0,[R4, #+0]
   \      0x100   0x.... 0x....      LDR.W    R1,??DataTable1_6
   \      0x104   0x4288             CMP      R0,R1
   \      0x106   0xD023             BEQ.N    ??HAL_DMA_DeInit_5
   \      0x108   0x6820             LDR      R0,[R4, #+0]
   \      0x10A   0x....             LDR.N    R1,??DataTable1_7
   \      0x10C   0x4288             CMP      R0,R1
   \      0x10E   0xD01F             BEQ.N    ??HAL_DMA_DeInit_5
   \      0x110   0x6820             LDR      R0,[R4, #+0]
   \      0x112   0x....             LDR.N    R1,??DataTable1_8
   \      0x114   0x4288             CMP      R0,R1
   \      0x116   0xD01B             BEQ.N    ??HAL_DMA_DeInit_5
   \      0x118   0x6820             LDR      R0,[R4, #+0]
   \      0x11A   0x....             LDR.N    R1,??DataTable1_9
   \      0x11C   0x4288             CMP      R0,R1
   \      0x11E   0xD017             BEQ.N    ??HAL_DMA_DeInit_5
   \      0x120   0x6820             LDR      R0,[R4, #+0]
   \      0x122   0x....             LDR.N    R1,??DataTable1_10
   \      0x124   0x4288             CMP      R0,R1
   \      0x126   0xD013             BEQ.N    ??HAL_DMA_DeInit_5
   \      0x128   0x6820             LDR      R0,[R4, #+0]
   \      0x12A   0x....             LDR.N    R1,??DataTable1_11
   \      0x12C   0x4288             CMP      R0,R1
   \      0x12E   0xD00F             BEQ.N    ??HAL_DMA_DeInit_5
   \      0x130   0x6820             LDR      R0,[R4, #+0]
   \      0x132   0x....             LDR.N    R1,??DataTable1_12
   \      0x134   0x4288             CMP      R0,R1
   \      0x136   0xD00B             BEQ.N    ??HAL_DMA_DeInit_5
   \      0x138   0x6820             LDR      R0,[R4, #+0]
   \      0x13A   0x....             LDR.N    R1,??DataTable1_13
   \      0x13C   0x4288             CMP      R0,R1
   \      0x13E   0xD007             BEQ.N    ??HAL_DMA_DeInit_5
   \      0x140   0x6820             LDR      R0,[R4, #+0]
   \      0x142   0x....             LDR.N    R1,??DataTable1_14
   \      0x144   0x4288             CMP      R0,R1
   \      0x146   0xD003             BEQ.N    ??HAL_DMA_DeInit_5
   \      0x148   0x6820             LDR      R0,[R4, #+0]
   \      0x14A   0x....             LDR.N    R1,??DataTable1_15
   \      0x14C   0x4288             CMP      R0,R1
   \      0x14E   0xD101             BNE.N    ??HAL_DMA_DeInit_6
   \                     ??HAL_DMA_DeInit_5: (+1)
   \      0x150   0x2001             MOVS     R0,#+1
   \      0x152   0xE000             B.N      ??HAL_DMA_DeInit_7
   \                     ??HAL_DMA_DeInit_6: (+1)
   \      0x154   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_DeInit_7: (+1)
   \      0x156   0xB2C0             UXTB     R0,R0
   \      0x158   0x2800             CMP      R0,#+0
   \      0x15A   0xF000 0x8085      BEQ.W    ??HAL_DMA_DeInit_8
    477            {
    478              /* Reset DMA Streamx control register */
    479              ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
   \      0x15E   0x2000             MOVS     R0,#+0
   \      0x160   0x6821             LDR      R1,[R4, #+0]
   \      0x162   0x6008             STR      R0,[R1, #+0]
    480          
    481              /* Reset DMA Streamx number of data to transfer register */
    482              ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
   \      0x164   0x2000             MOVS     R0,#+0
   \      0x166   0x6821             LDR      R1,[R4, #+0]
   \      0x168   0x6048             STR      R0,[R1, #+4]
    483          
    484              /* Reset DMA Streamx peripheral address register */
    485              ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
   \      0x16A   0x2000             MOVS     R0,#+0
   \      0x16C   0x6821             LDR      R1,[R4, #+0]
   \      0x16E   0x6088             STR      R0,[R1, #+8]
    486          
    487              /* Reset DMA Streamx memory 0 address register */
    488              ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
   \      0x170   0x2000             MOVS     R0,#+0
   \      0x172   0x6821             LDR      R1,[R4, #+0]
   \      0x174   0x60C8             STR      R0,[R1, #+12]
    489          
    490              /* Reset DMA Streamx memory 1 address register */
    491              ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
   \      0x176   0x2000             MOVS     R0,#+0
   \      0x178   0x6821             LDR      R1,[R4, #+0]
   \      0x17A   0x6108             STR      R0,[R1, #+16]
    492          
    493              /* Reset DMA Streamx FIFO control register */
    494              ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
   \      0x17C   0x2021             MOVS     R0,#+33
   \      0x17E   0x6821             LDR      R1,[R4, #+0]
   \      0x180   0x6148             STR      R0,[R1, #+20]
    495          
    496              /* Get DMA steam Base Address */
    497              regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
   \      0x182   0x0020             MOVS     R0,R4
   \      0x184   0x.... 0x....      BL       DMA_CalcBaseAndBitshift
    498          
    499              /* Clear all interrupt flags at correct offset within the register */
    500              regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
   \      0x188   0x213F             MOVS     R1,#+63
   \      0x18A   0xF894 0x205C      LDRB     R2,[R4, #+92]
   \      0x18E   0xF012 0x021F      ANDS     R2,R2,#0x1F
   \      0x192   0x4091             LSLS     R1,R1,R2
   \      0x194   0x6081             STR      R1,[R0, #+8]
    501            }
    502            else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
    503            {
    504              /* Reset DMA Channel control register */
    505              ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
    506          
    507              /* Reset DMA Channel Number of Data to Transfer register */
    508              ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
    509          
    510              /* Reset DMA Channel peripheral address register */
    511              ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
    512          
    513              /* Reset DMA Channel memory 0 address register */
    514              ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
    515          
    516              /* Reset DMA Channel memory 1 address register */
    517              ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
    518          
    519              /* Get DMA steam Base Address */
    520              regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
    521          
    522              /* Clear all interrupt flags at correct offset within the register */
    523              regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
    524            }
    525            else
    526            {
    527              /* Return error status */
    528              return HAL_ERROR;
    529            }
    530          
    531          #if defined (BDMA1) /* No DMAMUX available for BDMA1 available on  STM32H7Ax/Bx devices only */
    532            if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
   \                     ??HAL_DMA_DeInit_9: (+1)
   \      0x196   0x6820             LDR      R0,[R4, #+0]
   \      0x198   0x42A8             CMP      R0,R5
   \      0x19A   0xD063             BEQ.N    ??HAL_DMA_DeInit_10
   \      0x19C   0x6820             LDR      R0,[R4, #+0]
   \      0x19E   0x....             LDR.N    R1,??DataTable1_1
   \      0x1A0   0x4288             CMP      R0,R1
   \      0x1A2   0xD05F             BEQ.N    ??HAL_DMA_DeInit_10
   \      0x1A4   0x6820             LDR      R0,[R4, #+0]
   \      0x1A6   0x....             LDR.N    R1,??DataTable1_2
   \      0x1A8   0x4288             CMP      R0,R1
   \      0x1AA   0xD05B             BEQ.N    ??HAL_DMA_DeInit_10
   \      0x1AC   0x6820             LDR      R0,[R4, #+0]
   \      0x1AE   0x....             LDR.N    R1,??DataTable1_3
   \      0x1B0   0x4288             CMP      R0,R1
   \      0x1B2   0xD057             BEQ.N    ??HAL_DMA_DeInit_10
   \      0x1B4   0x6820             LDR      R0,[R4, #+0]
   \      0x1B6   0x....             LDR.N    R1,??DataTable1_4
   \      0x1B8   0x4288             CMP      R0,R1
   \      0x1BA   0xD053             BEQ.N    ??HAL_DMA_DeInit_10
   \      0x1BC   0x6820             LDR      R0,[R4, #+0]
   \      0x1BE   0x....             LDR.N    R1,??DataTable1_5
   \      0x1C0   0x4288             CMP      R0,R1
   \      0x1C2   0xD04F             BEQ.N    ??HAL_DMA_DeInit_10
   \      0x1C4   0x6820             LDR      R0,[R4, #+0]
   \      0x1C6   0x....             LDR.N    R1,??DataTable1_6
   \      0x1C8   0x4288             CMP      R0,R1
   \      0x1CA   0xD04B             BEQ.N    ??HAL_DMA_DeInit_10
   \      0x1CC   0x6820             LDR      R0,[R4, #+0]
   \      0x1CE   0x....             LDR.N    R1,??DataTable1_7
   \      0x1D0   0x4288             CMP      R0,R1
   \      0x1D2   0xD047             BEQ.N    ??HAL_DMA_DeInit_10
   \      0x1D4   0x6820             LDR      R0,[R4, #+0]
   \      0x1D6   0x....             LDR.N    R1,??DataTable1_8
   \      0x1D8   0x4288             CMP      R0,R1
   \      0x1DA   0xD043             BEQ.N    ??HAL_DMA_DeInit_10
   \      0x1DC   0x6820             LDR      R0,[R4, #+0]
   \      0x1DE   0x....             LDR.N    R1,??DataTable1_9
   \      0x1E0   0x4288             CMP      R0,R1
   \      0x1E2   0xD03F             BEQ.N    ??HAL_DMA_DeInit_10
   \      0x1E4   0x6820             LDR      R0,[R4, #+0]
   \      0x1E6   0x....             LDR.N    R1,??DataTable1_10
   \      0x1E8   0x4288             CMP      R0,R1
   \      0x1EA   0xD03B             BEQ.N    ??HAL_DMA_DeInit_10
   \      0x1EC   0x6820             LDR      R0,[R4, #+0]
   \      0x1EE   0x....             LDR.N    R1,??DataTable1_11
   \      0x1F0   0x4288             CMP      R0,R1
   \      0x1F2   0xD037             BEQ.N    ??HAL_DMA_DeInit_10
   \      0x1F4   0x6820             LDR      R0,[R4, #+0]
   \      0x1F6   0x....             LDR.N    R1,??DataTable1_12
   \      0x1F8   0x4288             CMP      R0,R1
   \      0x1FA   0xD033             BEQ.N    ??HAL_DMA_DeInit_10
   \      0x1FC   0x6820             LDR      R0,[R4, #+0]
   \      0x1FE   0x....             LDR.N    R1,??DataTable1_13
   \      0x200   0x4288             CMP      R0,R1
   \      0x202   0xD02F             BEQ.N    ??HAL_DMA_DeInit_10
   \      0x204   0x6820             LDR      R0,[R4, #+0]
   \      0x206   0x....             LDR.N    R1,??DataTable1_14
   \      0x208   0x4288             CMP      R0,R1
   \      0x20A   0xD02B             BEQ.N    ??HAL_DMA_DeInit_10
   \      0x20C   0x6820             LDR      R0,[R4, #+0]
   \      0x20E   0x....             LDR.N    R1,??DataTable1_15
   \      0x210   0x4288             CMP      R0,R1
   \      0x212   0xD027             BEQ.N    ??HAL_DMA_DeInit_10
   \      0x214   0x6820             LDR      R0,[R4, #+0]
   \      0x216   0x.... 0x....      LDR.W    R1,??DataTable2_1
   \      0x21A   0x4288             CMP      R0,R1
   \      0x21C   0xD022             BEQ.N    ??HAL_DMA_DeInit_10
   \      0x21E   0x6820             LDR      R0,[R4, #+0]
   \      0x220   0x.... 0x....      LDR.W    R1,??DataTable2_2
   \      0x224   0x4288             CMP      R0,R1
   \      0x226   0xD01D             BEQ.N    ??HAL_DMA_DeInit_10
   \      0x228   0x6820             LDR      R0,[R4, #+0]
   \      0x22A   0x.... 0x....      LDR.W    R1,??DataTable2_3
   \      0x22E   0x4288             CMP      R0,R1
   \      0x230   0xD018             BEQ.N    ??HAL_DMA_DeInit_10
   \      0x232   0x6820             LDR      R0,[R4, #+0]
   \      0x234   0x.... 0x....      LDR.W    R1,??DataTable2_4
   \      0x238   0x4288             CMP      R0,R1
   \      0x23A   0xD013             BEQ.N    ??HAL_DMA_DeInit_10
   \      0x23C   0x6820             LDR      R0,[R4, #+0]
   \      0x23E   0x.... 0x....      LDR.W    R1,??DataTable2_5
   \      0x242   0x4288             CMP      R0,R1
   \      0x244   0xD00E             BEQ.N    ??HAL_DMA_DeInit_10
   \      0x246   0x6820             LDR      R0,[R4, #+0]
   \      0x248   0x.... 0x....      LDR.W    R1,??DataTable2_6
   \      0x24C   0x4288             CMP      R0,R1
   \      0x24E   0xD009             BEQ.N    ??HAL_DMA_DeInit_10
   \      0x250   0x6820             LDR      R0,[R4, #+0]
   \      0x252   0x.... 0x....      LDR.W    R1,??DataTable2_7
   \      0x256   0x4288             CMP      R0,R1
   \      0x258   0xD004             BEQ.N    ??HAL_DMA_DeInit_10
   \      0x25A   0x6820             LDR      R0,[R4, #+0]
   \      0x25C   0x.... 0x....      LDR.W    R1,??DataTable2_8
   \      0x260   0x4288             CMP      R0,R1
   \      0x262   0xD16B             BNE.N    ??HAL_DMA_DeInit_11
   \                     ??HAL_DMA_DeInit_10: (+1)
   \      0x264   0x2001             MOVS     R0,#+1
   \      0x266   0xE06A             B.N      ??HAL_DMA_DeInit_12
   \                     ??HAL_DMA_DeInit_8: (+1)
   \      0x268   0x6820             LDR      R0,[R4, #+0]
   \      0x26A   0x.... 0x....      LDR.W    R1,??DataTable2_9
   \      0x26E   0x4288             CMP      R0,R1
   \      0x270   0xD042             BEQ.N    ??HAL_DMA_DeInit_13
   \      0x272   0x6820             LDR      R0,[R4, #+0]
   \      0x274   0x.... 0x....      LDR.W    R1,??DataTable2_10
   \      0x278   0x4288             CMP      R0,R1
   \      0x27A   0xD03D             BEQ.N    ??HAL_DMA_DeInit_13
   \      0x27C   0x6820             LDR      R0,[R4, #+0]
   \      0x27E   0x.... 0x....      LDR.W    R1,??DataTable2_11
   \      0x282   0x4288             CMP      R0,R1
   \      0x284   0xD038             BEQ.N    ??HAL_DMA_DeInit_13
   \      0x286   0x6820             LDR      R0,[R4, #+0]
   \      0x288   0x.... 0x....      LDR.W    R1,??DataTable2_12
   \      0x28C   0x4288             CMP      R0,R1
   \      0x28E   0xD033             BEQ.N    ??HAL_DMA_DeInit_13
   \      0x290   0x6820             LDR      R0,[R4, #+0]
   \      0x292   0x.... 0x....      LDR.W    R1,??DataTable2_13
   \      0x296   0x4288             CMP      R0,R1
   \      0x298   0xD02E             BEQ.N    ??HAL_DMA_DeInit_13
   \      0x29A   0x6820             LDR      R0,[R4, #+0]
   \      0x29C   0x.... 0x....      LDR.W    R1,??DataTable2_14
   \      0x2A0   0x4288             CMP      R0,R1
   \      0x2A2   0xD029             BEQ.N    ??HAL_DMA_DeInit_13
   \      0x2A4   0x6820             LDR      R0,[R4, #+0]
   \      0x2A6   0x.... 0x....      LDR.W    R1,??DataTable2_15
   \      0x2AA   0x4288             CMP      R0,R1
   \      0x2AC   0xD024             BEQ.N    ??HAL_DMA_DeInit_13
   \      0x2AE   0x6820             LDR      R0,[R4, #+0]
   \      0x2B0   0x.... 0x....      LDR.W    R1,??DataTable2_16
   \      0x2B4   0x4288             CMP      R0,R1
   \      0x2B6   0xD01F             BEQ.N    ??HAL_DMA_DeInit_13
   \      0x2B8   0x6820             LDR      R0,[R4, #+0]
   \      0x2BA   0x....             LDR.N    R1,??DataTable2_1
   \      0x2BC   0x4288             CMP      R0,R1
   \      0x2BE   0xD01B             BEQ.N    ??HAL_DMA_DeInit_13
   \      0x2C0   0x6820             LDR      R0,[R4, #+0]
   \      0x2C2   0x....             LDR.N    R1,??DataTable2_2
   \      0x2C4   0x4288             CMP      R0,R1
   \      0x2C6   0xD017             BEQ.N    ??HAL_DMA_DeInit_13
   \      0x2C8   0x6820             LDR      R0,[R4, #+0]
   \      0x2CA   0x....             LDR.N    R1,??DataTable2_3
   \      0x2CC   0x4288             CMP      R0,R1
   \      0x2CE   0xD013             BEQ.N    ??HAL_DMA_DeInit_13
   \      0x2D0   0x6820             LDR      R0,[R4, #+0]
   \      0x2D2   0x....             LDR.N    R1,??DataTable2_4
   \      0x2D4   0x4288             CMP      R0,R1
   \      0x2D6   0xD00F             BEQ.N    ??HAL_DMA_DeInit_13
   \      0x2D8   0x6820             LDR      R0,[R4, #+0]
   \      0x2DA   0x....             LDR.N    R1,??DataTable2_5
   \      0x2DC   0x4288             CMP      R0,R1
   \      0x2DE   0xD00B             BEQ.N    ??HAL_DMA_DeInit_13
   \      0x2E0   0x6820             LDR      R0,[R4, #+0]
   \      0x2E2   0x....             LDR.N    R1,??DataTable2_6
   \      0x2E4   0x4288             CMP      R0,R1
   \      0x2E6   0xD007             BEQ.N    ??HAL_DMA_DeInit_13
   \      0x2E8   0x6820             LDR      R0,[R4, #+0]
   \      0x2EA   0x....             LDR.N    R1,??DataTable2_7
   \      0x2EC   0x4288             CMP      R0,R1
   \      0x2EE   0xD003             BEQ.N    ??HAL_DMA_DeInit_13
   \      0x2F0   0x6820             LDR      R0,[R4, #+0]
   \      0x2F2   0x....             LDR.N    R1,??DataTable2_8
   \      0x2F4   0x4288             CMP      R0,R1
   \      0x2F6   0xD101             BNE.N    ??HAL_DMA_DeInit_14
   \                     ??HAL_DMA_DeInit_13: (+1)
   \      0x2F8   0x2001             MOVS     R0,#+1
   \      0x2FA   0xE000             B.N      ??HAL_DMA_DeInit_15
   \                     ??HAL_DMA_DeInit_14: (+1)
   \      0x2FC   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_DeInit_15: (+1)
   \      0x2FE   0xB2C0             UXTB     R0,R0
   \      0x300   0x2800             CMP      R0,#+0
   \      0x302   0xD019             BEQ.N    ??HAL_DMA_DeInit_16
   \      0x304   0x2000             MOVS     R0,#+0
   \      0x306   0x6821             LDR      R1,[R4, #+0]
   \      0x308   0x6008             STR      R0,[R1, #+0]
   \      0x30A   0x2000             MOVS     R0,#+0
   \      0x30C   0x6821             LDR      R1,[R4, #+0]
   \      0x30E   0x6048             STR      R0,[R1, #+4]
   \      0x310   0x2000             MOVS     R0,#+0
   \      0x312   0x6821             LDR      R1,[R4, #+0]
   \      0x314   0x6088             STR      R0,[R1, #+8]
   \      0x316   0x2000             MOVS     R0,#+0
   \      0x318   0x6821             LDR      R1,[R4, #+0]
   \      0x31A   0x60C8             STR      R0,[R1, #+12]
   \      0x31C   0x2000             MOVS     R0,#+0
   \      0x31E   0x6821             LDR      R1,[R4, #+0]
   \      0x320   0x6108             STR      R0,[R1, #+16]
   \      0x322   0x0020             MOVS     R0,R4
   \      0x324   0x.... 0x....      BL       DMA_CalcBaseAndBitshift
   \      0x328   0x2101             MOVS     R1,#+1
   \      0x32A   0xF894 0x205C      LDRB     R2,[R4, #+92]
   \      0x32E   0xF012 0x021F      ANDS     R2,R2,#0x1F
   \      0x332   0x4091             LSLS     R1,R1,R2
   \      0x334   0x6041             STR      R1,[R0, #+4]
   \      0x336   0xE72E             B.N      ??HAL_DMA_DeInit_9
   \                     ??HAL_DMA_DeInit_16: (+1)
   \      0x338   0x2001             MOVS     R0,#+1
   \      0x33A   0xE039             B.N      ??HAL_DMA_DeInit_1
   \                     ??HAL_DMA_DeInit_11: (+1)
   \      0x33C   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_DeInit_12: (+1)
   \      0x33E   0xB2C0             UXTB     R0,R0
   \      0x340   0x2800             CMP      R0,#+0
   \      0x342   0xD020             BEQ.N    ??HAL_DMA_DeInit_17
    533          #endif /* BDMA1 */
    534            {
    535              /* Initialize parameters for DMAMUX channel :
    536              DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    537              DMA_CalcDMAMUXChannelBaseAndMask(hdma);
   \      0x344   0x0020             MOVS     R0,R4
   \      0x346   0x.... 0x....      BL       DMA_CalcDMAMUXChannelBaseAndMask
    538          
    539              if(hdma->DMAmuxChannel != 0U)
   \      0x34A   0x6E20             LDR      R0,[R4, #+96]
   \      0x34C   0x2800             CMP      R0,#+0
   \      0x34E   0xD005             BEQ.N    ??HAL_DMA_DeInit_18
    540              {
    541                /* Resett he DMAMUX channel that corresponds to the DMA stream */
    542                hdma->DMAmuxChannel->CCR = 0U;
   \      0x350   0x2000             MOVS     R0,#+0
   \      0x352   0x6E21             LDR      R1,[R4, #+96]
   \      0x354   0x6008             STR      R0,[R1, #+0]
    543          
    544                /* Clear the DMAMUX synchro overrun flag */
    545                hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
   \      0x356   0x6EA0             LDR      R0,[R4, #+104]
   \      0x358   0x6E61             LDR      R1,[R4, #+100]
   \      0x35A   0x6048             STR      R0,[R1, #+4]
    546              }
    547          
    548              if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
   \                     ??HAL_DMA_DeInit_18: (+1)
   \      0x35C   0x6860             LDR      R0,[R4, #+4]
   \      0x35E   0x2800             CMP      R0,#+0
   \      0x360   0xD00B             BEQ.N    ??HAL_DMA_DeInit_19
   \      0x362   0x6860             LDR      R0,[R4, #+4]
   \      0x364   0x2809             CMP      R0,#+9
   \      0x366   0xD208             BCS.N    ??HAL_DMA_DeInit_19
    549              {
    550                /* Initialize parameters for DMAMUX request generator :
    551                DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
    552                DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
   \      0x368   0x0020             MOVS     R0,R4
   \      0x36A   0x.... 0x....      BL       DMA_CalcDMAMUXRequestGenBaseAndMask
    553          
    554                /* Reset the DMAMUX request generator register */
    555                hdma->DMAmuxRequestGen->RGCR = 0U;
   \      0x36E   0x2000             MOVS     R0,#+0
   \      0x370   0x6EE1             LDR      R1,[R4, #+108]
   \      0x372   0x6008             STR      R0,[R1, #+0]
    556          
    557                /* Clear the DMAMUX request generator overrun flag */
    558                hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
   \      0x374   0x6F60             LDR      R0,[R4, #+116]
   \      0x376   0x6F21             LDR      R1,[R4, #+112]
   \      0x378   0x6048             STR      R0,[R1, #+4]
    559              }
    560          
    561              hdma->DMAmuxRequestGen = 0U;
   \                     ??HAL_DMA_DeInit_19: (+1)
   \      0x37A   0x2000             MOVS     R0,#+0
   \      0x37C   0x66E0             STR      R0,[R4, #+108]
    562              hdma->DMAmuxRequestGenStatus = 0U;
   \      0x37E   0x2000             MOVS     R0,#+0
   \      0x380   0x6720             STR      R0,[R4, #+112]
    563              hdma->DMAmuxRequestGenStatusMask = 0U;
   \      0x382   0x2000             MOVS     R0,#+0
   \      0x384   0x6760             STR      R0,[R4, #+116]
    564            }
    565          
    566          
    567            /* Clean callbacks */
    568            hdma->XferCpltCallback       = NULL;
   \                     ??HAL_DMA_DeInit_17: (+1)
   \      0x386   0x2000             MOVS     R0,#+0
   \      0x388   0x63E0             STR      R0,[R4, #+60]
    569            hdma->XferHalfCpltCallback   = NULL;
   \      0x38A   0x2000             MOVS     R0,#+0
   \      0x38C   0x6420             STR      R0,[R4, #+64]
    570            hdma->XferM1CpltCallback     = NULL;
   \      0x38E   0x2000             MOVS     R0,#+0
   \      0x390   0x6460             STR      R0,[R4, #+68]
    571            hdma->XferM1HalfCpltCallback = NULL;
   \      0x392   0x2000             MOVS     R0,#+0
   \      0x394   0x64A0             STR      R0,[R4, #+72]
    572            hdma->XferErrorCallback      = NULL;
   \      0x396   0x2000             MOVS     R0,#+0
   \      0x398   0x64E0             STR      R0,[R4, #+76]
    573            hdma->XferAbortCallback      = NULL;
   \      0x39A   0x2000             MOVS     R0,#+0
   \      0x39C   0x6520             STR      R0,[R4, #+80]
    574          
    575            /* Initialize the error code */
    576            hdma->ErrorCode = HAL_DMA_ERROR_NONE;
   \      0x39E   0x2000             MOVS     R0,#+0
   \      0x3A0   0x6560             STR      R0,[R4, #+84]
    577          
    578            /* Initialize the DMA state */
    579            hdma->State = HAL_DMA_STATE_RESET;
   \      0x3A2   0x2000             MOVS     R0,#+0
   \      0x3A4   0xF884 0x0035      STRB     R0,[R4, #+53]
    580          
    581            /* Release Lock */
    582            __HAL_UNLOCK(hdma);
   \      0x3A8   0x2000             MOVS     R0,#+0
   \      0x3AA   0xF884 0x0034      STRB     R0,[R4, #+52]
    583          
    584            return HAL_OK;
   \      0x3AE   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_DeInit_1: (+1)
   \      0x3B0   0xBD32             POP      {R1,R4,R5,PC}
    585          }
    586          
    587          /**
    588            * @}
    589            */
    590          
    591          /** @addtogroup DMA_Exported_Functions_Group2
    592            *
    593          @verbatim
    594           ===============================================================================
    595                                #####  IO operation functions  #####
    596           ===============================================================================
    597              [..]  This section provides functions allowing to:
    598                (+) Configure the source, destination address and data length and Start DMA transfer
    599                (+) Configure the source, destination address and data length and
    600                    Start DMA transfer with interrupt
    601                (+) Register and Unregister DMA callbacks
    602                (+) Abort DMA transfer
    603                (+) Poll for transfer complete
    604                (+) Handle DMA interrupt request
    605          
    606          @endverbatim
    607            * @{
    608            */
    609          
    610          /**
    611            * @brief  Starts the DMA Transfer.
    612            * @param  hdma      : pointer to a DMA_HandleTypeDef structure that contains
    613            *                     the configuration information for the specified DMA Stream.
    614            * @param  SrcAddress: The source memory Buffer address
    615            * @param  DstAddress: The destination memory Buffer address
    616            * @param  DataLength: The length of data to be transferred from source to destination
    617            * @retval HAL status
    618            */

   \                                 In section .text, align 2, keep-with-next
    619          HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
    620          {
   \                     HAL_DMA_Start: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
    621            HAL_StatusTypeDef status = HAL_OK;
   \        0x4   0x2500             MOVS     R5,#+0
    622          
    623            /* Check the parameters */
    624            assert_param(IS_DMA_BUFFER_SIZE(DataLength));
    625          
    626            /* Check the DMA peripheral handle */
    627            if(hdma == NULL)
   \        0x6   0x2C00             CMP      R4,#+0
   \        0x8   0xD101             BNE.N    ??HAL_DMA_Start_0
    628            {
    629              return HAL_ERROR;
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0xE0D7             B.N      ??HAL_DMA_Start_1
    630            }
    631          
    632            /* Process locked */
    633            __HAL_LOCK(hdma);
   \                     ??HAL_DMA_Start_0: (+1)
   \        0xE   0xF894 0x0034      LDRB     R0,[R4, #+52]
   \       0x12   0x2801             CMP      R0,#+1
   \       0x14   0xD101             BNE.N    ??HAL_DMA_Start_2
   \       0x16   0x2002             MOVS     R0,#+2
   \       0x18   0xE0D1             B.N      ??HAL_DMA_Start_1
   \                     ??HAL_DMA_Start_2: (+1)
   \       0x1A   0x2001             MOVS     R0,#+1
   \       0x1C   0xF884 0x0034      STRB     R0,[R4, #+52]
    634          
    635            if(HAL_DMA_STATE_READY == hdma->State)
   \       0x20   0xF894 0x0035      LDRB     R0,[R4, #+53]
   \       0x24   0x2801             CMP      R0,#+1
   \       0x26   0xF040 0x80C1      BNE.W    ??HAL_DMA_Start_3
    636            {
    637              /* Change DMA peripheral state */
    638              hdma->State = HAL_DMA_STATE_BUSY;
   \       0x2A   0x2002             MOVS     R0,#+2
   \       0x2C   0xF884 0x0035      STRB     R0,[R4, #+53]
    639          
    640              /* Initialize the error code */
    641              hdma->ErrorCode = HAL_DMA_ERROR_NONE;
   \       0x30   0x2000             MOVS     R0,#+0
   \       0x32   0x6560             STR      R0,[R4, #+84]
    642          
    643              /* Disable the peripheral */
    644              __HAL_DMA_DISABLE(hdma);
   \       0x34   0x.... 0x....      LDR.W    R6,??DataTable3_1
   \       0x38   0x6820             LDR      R0,[R4, #+0]
   \       0x3A   0x42B0             CMP      R0,R6
   \       0x3C   0xD04A             BEQ.N    ??HAL_DMA_Start_4
   \       0x3E   0x6820             LDR      R0,[R4, #+0]
   \       0x40   0x.... 0x....      LDR.W    R7,??DataTable3_2
   \       0x44   0x42B8             CMP      R0,R7
   \       0x46   0xD045             BEQ.N    ??HAL_DMA_Start_4
   \       0x48   0x6820             LDR      R0,[R4, #+0]
   \       0x4A   0x.... 0x....      LDR.W    R7,??DataTable3_3
   \       0x4E   0x42B8             CMP      R0,R7
   \       0x50   0xD040             BEQ.N    ??HAL_DMA_Start_4
   \       0x52   0x6820             LDR      R0,[R4, #+0]
   \       0x54   0x.... 0x....      LDR.W    R7,??DataTable3_4
   \       0x58   0x42B8             CMP      R0,R7
   \       0x5A   0xD03B             BEQ.N    ??HAL_DMA_Start_4
   \       0x5C   0x6820             LDR      R0,[R4, #+0]
   \       0x5E   0x.... 0x....      LDR.W    R7,??DataTable3_5
   \       0x62   0x42B8             CMP      R0,R7
   \       0x64   0xD036             BEQ.N    ??HAL_DMA_Start_4
   \       0x66   0x6820             LDR      R0,[R4, #+0]
   \       0x68   0x.... 0x....      LDR.W    R7,??DataTable3_6
   \       0x6C   0x42B8             CMP      R0,R7
   \       0x6E   0xD031             BEQ.N    ??HAL_DMA_Start_4
   \       0x70   0x6820             LDR      R0,[R4, #+0]
   \       0x72   0x.... 0x....      LDR.W    R7,??DataTable3_7
   \       0x76   0x42B8             CMP      R0,R7
   \       0x78   0xD02C             BEQ.N    ??HAL_DMA_Start_4
   \       0x7A   0x6820             LDR      R0,[R4, #+0]
   \       0x7C   0x.... 0x....      LDR.W    R7,??DataTable3_8
   \       0x80   0x42B8             CMP      R0,R7
   \       0x82   0xD027             BEQ.N    ??HAL_DMA_Start_4
   \       0x84   0x6820             LDR      R0,[R4, #+0]
   \       0x86   0x.... 0x....      LDR.W    R7,??DataTable3_9
   \       0x8A   0x42B8             CMP      R0,R7
   \       0x8C   0xD022             BEQ.N    ??HAL_DMA_Start_4
   \       0x8E   0x6820             LDR      R0,[R4, #+0]
   \       0x90   0x.... 0x....      LDR.W    R7,??DataTable3_10
   \       0x94   0x42B8             CMP      R0,R7
   \       0x96   0xD01D             BEQ.N    ??HAL_DMA_Start_4
   \       0x98   0x6820             LDR      R0,[R4, #+0]
   \       0x9A   0x.... 0x....      LDR.W    R7,??DataTable3_11
   \       0x9E   0x42B8             CMP      R0,R7
   \       0xA0   0xD018             BEQ.N    ??HAL_DMA_Start_4
   \       0xA2   0x6820             LDR      R0,[R4, #+0]
   \       0xA4   0x.... 0x....      LDR.W    R7,??DataTable4
   \       0xA8   0x42B8             CMP      R0,R7
   \       0xAA   0xD013             BEQ.N    ??HAL_DMA_Start_4
   \       0xAC   0x6820             LDR      R0,[R4, #+0]
   \       0xAE   0x.... 0x....      LDR.W    R7,??DataTable4_1
   \       0xB2   0x42B8             CMP      R0,R7
   \       0xB4   0xD00E             BEQ.N    ??HAL_DMA_Start_4
   \       0xB6   0x6820             LDR      R0,[R4, #+0]
   \       0xB8   0x.... 0x....      LDR.W    R7,??DataTable4_2
   \       0xBC   0x42B8             CMP      R0,R7
   \       0xBE   0xD009             BEQ.N    ??HAL_DMA_Start_4
   \       0xC0   0x6820             LDR      R0,[R4, #+0]
   \       0xC2   0x.... 0x....      LDR.W    R7,??DataTable4_3
   \       0xC6   0x42B8             CMP      R0,R7
   \       0xC8   0xD004             BEQ.N    ??HAL_DMA_Start_4
   \       0xCA   0x6820             LDR      R0,[R4, #+0]
   \       0xCC   0x.... 0x....      LDR.W    R7,??DataTable4_4
   \       0xD0   0x42B8             CMP      R0,R7
   \       0xD2   0xD106             BNE.N    ??HAL_DMA_Start_5
   \                     ??HAL_DMA_Start_4: (+1)
   \       0xD4   0x6820             LDR      R0,[R4, #+0]
   \       0xD6   0x6800             LDR      R0,[R0, #+0]
   \       0xD8   0x0840             LSRS     R0,R0,#+1
   \       0xDA   0x0040             LSLS     R0,R0,#+1
   \       0xDC   0x6827             LDR      R7,[R4, #+0]
   \       0xDE   0x6038             STR      R0,[R7, #+0]
   \       0xE0   0xE005             B.N      ??HAL_DMA_Start_6
   \                     ??HAL_DMA_Start_5: (+1)
   \       0xE2   0x6820             LDR      R0,[R4, #+0]
   \       0xE4   0x6800             LDR      R0,[R0, #+0]
   \       0xE6   0x0840             LSRS     R0,R0,#+1
   \       0xE8   0x0040             LSLS     R0,R0,#+1
   \       0xEA   0x6827             LDR      R7,[R4, #+0]
   \       0xEC   0x6038             STR      R0,[R7, #+0]
    645          
    646              /* Configure the source, destination address and the data length */
    647              DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
   \                     ??HAL_DMA_Start_6: (+1)
   \       0xEE   0x0020             MOVS     R0,R4
   \       0xF0   0x.... 0x....      BL       DMA_SetConfig
    648          
    649              /* Enable the Peripheral */
    650              __HAL_DMA_ENABLE(hdma);
   \       0xF4   0x6820             LDR      R0,[R4, #+0]
   \       0xF6   0x42B0             CMP      R0,R6
   \       0xF8   0xD04A             BEQ.N    ??HAL_DMA_Start_7
   \       0xFA   0x6820             LDR      R0,[R4, #+0]
   \       0xFC   0x.... 0x....      LDR.W    R1,??DataTable3_2
   \      0x100   0x4288             CMP      R0,R1
   \      0x102   0xD045             BEQ.N    ??HAL_DMA_Start_7
   \      0x104   0x6820             LDR      R0,[R4, #+0]
   \      0x106   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \      0x10A   0x4288             CMP      R0,R1
   \      0x10C   0xD040             BEQ.N    ??HAL_DMA_Start_7
   \      0x10E   0x6820             LDR      R0,[R4, #+0]
   \      0x110   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \      0x114   0x4288             CMP      R0,R1
   \      0x116   0xD03B             BEQ.N    ??HAL_DMA_Start_7
   \      0x118   0x6820             LDR      R0,[R4, #+0]
   \      0x11A   0x.... 0x....      LDR.W    R1,??DataTable3_5
   \      0x11E   0x4288             CMP      R0,R1
   \      0x120   0xD036             BEQ.N    ??HAL_DMA_Start_7
   \      0x122   0x6820             LDR      R0,[R4, #+0]
   \      0x124   0x.... 0x....      LDR.W    R1,??DataTable3_6
   \      0x128   0x4288             CMP      R0,R1
   \      0x12A   0xD031             BEQ.N    ??HAL_DMA_Start_7
   \      0x12C   0x6820             LDR      R0,[R4, #+0]
   \      0x12E   0x.... 0x....      LDR.W    R1,??DataTable3_7
   \      0x132   0x4288             CMP      R0,R1
   \      0x134   0xD02C             BEQ.N    ??HAL_DMA_Start_7
   \      0x136   0x6820             LDR      R0,[R4, #+0]
   \      0x138   0x.... 0x....      LDR.W    R1,??DataTable3_8
   \      0x13C   0x4288             CMP      R0,R1
   \      0x13E   0xD027             BEQ.N    ??HAL_DMA_Start_7
   \      0x140   0x6820             LDR      R0,[R4, #+0]
   \      0x142   0x.... 0x....      LDR.W    R1,??DataTable3_9
   \      0x146   0x4288             CMP      R0,R1
   \      0x148   0xD022             BEQ.N    ??HAL_DMA_Start_7
   \      0x14A   0x6820             LDR      R0,[R4, #+0]
   \      0x14C   0x.... 0x....      LDR.W    R1,??DataTable3_10
   \      0x150   0x4288             CMP      R0,R1
   \      0x152   0xD01D             BEQ.N    ??HAL_DMA_Start_7
   \      0x154   0x6820             LDR      R0,[R4, #+0]
   \      0x156   0x.... 0x....      LDR.W    R1,??DataTable3_11
   \      0x15A   0x4288             CMP      R0,R1
   \      0x15C   0xD018             BEQ.N    ??HAL_DMA_Start_7
   \      0x15E   0x6820             LDR      R0,[R4, #+0]
   \      0x160   0x.... 0x....      LDR.W    R1,??DataTable4
   \      0x164   0x4288             CMP      R0,R1
   \      0x166   0xD013             BEQ.N    ??HAL_DMA_Start_7
   \      0x168   0x6820             LDR      R0,[R4, #+0]
   \      0x16A   0x.... 0x....      LDR.W    R1,??DataTable4_1
   \      0x16E   0x4288             CMP      R0,R1
   \      0x170   0xD00E             BEQ.N    ??HAL_DMA_Start_7
   \      0x172   0x6820             LDR      R0,[R4, #+0]
   \      0x174   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \      0x178   0x4288             CMP      R0,R1
   \      0x17A   0xD009             BEQ.N    ??HAL_DMA_Start_7
   \      0x17C   0x6820             LDR      R0,[R4, #+0]
   \      0x17E   0x.... 0x....      LDR.W    R1,??DataTable4_3
   \      0x182   0x4288             CMP      R0,R1
   \      0x184   0xD004             BEQ.N    ??HAL_DMA_Start_7
   \      0x186   0x6820             LDR      R0,[R4, #+0]
   \      0x188   0x.... 0x....      LDR.W    R1,??DataTable4_4
   \      0x18C   0x4288             CMP      R0,R1
   \      0x18E   0xD106             BNE.N    ??HAL_DMA_Start_8
   \                     ??HAL_DMA_Start_7: (+1)
   \      0x190   0x6820             LDR      R0,[R4, #+0]
   \      0x192   0x6800             LDR      R0,[R0, #+0]
   \      0x194   0xF050 0x0001      ORRS     R0,R0,#0x1
   \      0x198   0x6821             LDR      R1,[R4, #+0]
   \      0x19A   0x6008             STR      R0,[R1, #+0]
   \      0x19C   0xE00D             B.N      ??HAL_DMA_Start_9
   \                     ??HAL_DMA_Start_8: (+1)
   \      0x19E   0x6820             LDR      R0,[R4, #+0]
   \      0x1A0   0x6800             LDR      R0,[R0, #+0]
   \      0x1A2   0xF050 0x0001      ORRS     R0,R0,#0x1
   \      0x1A6   0x6821             LDR      R1,[R4, #+0]
   \      0x1A8   0x6008             STR      R0,[R1, #+0]
   \      0x1AA   0xE006             B.N      ??HAL_DMA_Start_9
    651            }
    652            else
    653            {
    654              /* Set the error code to busy */
    655              hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
   \                     ??HAL_DMA_Start_3: (+1)
   \      0x1AC   0xF44F 0x6000      MOV      R0,#+2048
   \      0x1B0   0x6560             STR      R0,[R4, #+84]
    656          
    657              /* Process unlocked */
    658              __HAL_UNLOCK(hdma);
   \      0x1B2   0x2000             MOVS     R0,#+0
   \      0x1B4   0xF884 0x0034      STRB     R0,[R4, #+52]
    659          
    660              /* Return error status */
    661              status = HAL_ERROR;
   \      0x1B8   0x2501             MOVS     R5,#+1
    662            }
    663            return status;
   \                     ??HAL_DMA_Start_9: (+1)
   \      0x1BA   0x0028             MOVS     R0,R5
   \      0x1BC   0xB2C0             UXTB     R0,R0
   \                     ??HAL_DMA_Start_1: (+1)
   \      0x1BE   0xBDF2             POP      {R1,R4-R7,PC}
    664          }
    665          
    666          /**
    667            * @brief  Start the DMA Transfer with interrupt enabled.
    668            * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
    669            *                     the configuration information for the specified DMA Stream.
    670            * @param  SrcAddress: The source memory Buffer address
    671            * @param  DstAddress: The destination memory Buffer address
    672            * @param  DataLength: The length of data to be transferred from source to destination
    673            * @retval HAL status
    674            */

   \                                 In section .text, align 2, keep-with-next
    675          HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
    676          {
   \                     HAL_DMA_Start_IT: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
    677            HAL_StatusTypeDef status = HAL_OK;
   \        0x4   0x2500             MOVS     R5,#+0
    678          
    679            /* Check the parameters */
    680            assert_param(IS_DMA_BUFFER_SIZE(DataLength));
    681          
    682            /* Check the DMA peripheral handle */
    683            if(hdma == NULL)
   \        0x6   0x2C00             CMP      R4,#+0
   \        0x8   0xD101             BNE.N    ??HAL_DMA_Start_IT_0
    684            {
    685              return HAL_ERROR;
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0xE1BF             B.N      ??HAL_DMA_Start_IT_1
    686            }
    687          
    688            /* Process locked */
    689            __HAL_LOCK(hdma);
   \                     ??HAL_DMA_Start_IT_0: (+1)
   \        0xE   0xF894 0x0034      LDRB     R0,[R4, #+52]
   \       0x12   0x2801             CMP      R0,#+1
   \       0x14   0xD101             BNE.N    ??HAL_DMA_Start_IT_2
   \       0x16   0x2002             MOVS     R0,#+2
   \       0x18   0xE1B9             B.N      ??HAL_DMA_Start_IT_1
   \                     ??HAL_DMA_Start_IT_2: (+1)
   \       0x1A   0x2001             MOVS     R0,#+1
   \       0x1C   0xF884 0x0034      STRB     R0,[R4, #+52]
    690          
    691            if(HAL_DMA_STATE_READY == hdma->State)
   \       0x20   0xF894 0x0035      LDRB     R0,[R4, #+53]
   \       0x24   0x2801             CMP      R0,#+1
   \       0x26   0xF040 0x81A9      BNE.W    ??HAL_DMA_Start_IT_3
    692            {
    693              /* Change DMA peripheral state */
    694              hdma->State = HAL_DMA_STATE_BUSY;
   \       0x2A   0x2002             MOVS     R0,#+2
   \       0x2C   0xF884 0x0035      STRB     R0,[R4, #+53]
    695          
    696              /* Initialize the error code */
    697              hdma->ErrorCode = HAL_DMA_ERROR_NONE;
   \       0x30   0x2000             MOVS     R0,#+0
   \       0x32   0x6560             STR      R0,[R4, #+84]
    698          
    699              /* Disable the peripheral */
    700              __HAL_DMA_DISABLE(hdma);
   \       0x34   0x.... 0x....      LDR.W    R6,??DataTable3_1
   \       0x38   0x6820             LDR      R0,[R4, #+0]
   \       0x3A   0x42B0             CMP      R0,R6
   \       0x3C   0xD04A             BEQ.N    ??HAL_DMA_Start_IT_4
   \       0x3E   0x6820             LDR      R0,[R4, #+0]
   \       0x40   0x.... 0x....      LDR.W    R7,??DataTable3_2
   \       0x44   0x42B8             CMP      R0,R7
   \       0x46   0xD045             BEQ.N    ??HAL_DMA_Start_IT_4
   \       0x48   0x6820             LDR      R0,[R4, #+0]
   \       0x4A   0x.... 0x....      LDR.W    R7,??DataTable3_3
   \       0x4E   0x42B8             CMP      R0,R7
   \       0x50   0xD040             BEQ.N    ??HAL_DMA_Start_IT_4
   \       0x52   0x6820             LDR      R0,[R4, #+0]
   \       0x54   0x.... 0x....      LDR.W    R7,??DataTable3_4
   \       0x58   0x42B8             CMP      R0,R7
   \       0x5A   0xD03B             BEQ.N    ??HAL_DMA_Start_IT_4
   \       0x5C   0x6820             LDR      R0,[R4, #+0]
   \       0x5E   0x.... 0x....      LDR.W    R7,??DataTable3_5
   \       0x62   0x42B8             CMP      R0,R7
   \       0x64   0xD036             BEQ.N    ??HAL_DMA_Start_IT_4
   \       0x66   0x6820             LDR      R0,[R4, #+0]
   \       0x68   0x.... 0x....      LDR.W    R7,??DataTable3_6
   \       0x6C   0x42B8             CMP      R0,R7
   \       0x6E   0xD031             BEQ.N    ??HAL_DMA_Start_IT_4
   \       0x70   0x6820             LDR      R0,[R4, #+0]
   \       0x72   0x.... 0x....      LDR.W    R7,??DataTable3_7
   \       0x76   0x42B8             CMP      R0,R7
   \       0x78   0xD02C             BEQ.N    ??HAL_DMA_Start_IT_4
   \       0x7A   0x6820             LDR      R0,[R4, #+0]
   \       0x7C   0x.... 0x....      LDR.W    R7,??DataTable3_8
   \       0x80   0x42B8             CMP      R0,R7
   \       0x82   0xD027             BEQ.N    ??HAL_DMA_Start_IT_4
   \       0x84   0x6820             LDR      R0,[R4, #+0]
   \       0x86   0x.... 0x....      LDR.W    R7,??DataTable3_9
   \       0x8A   0x42B8             CMP      R0,R7
   \       0x8C   0xD022             BEQ.N    ??HAL_DMA_Start_IT_4
   \       0x8E   0x6820             LDR      R0,[R4, #+0]
   \       0x90   0x.... 0x....      LDR.W    R7,??DataTable3_10
   \       0x94   0x42B8             CMP      R0,R7
   \       0x96   0xD01D             BEQ.N    ??HAL_DMA_Start_IT_4
   \       0x98   0x6820             LDR      R0,[R4, #+0]
   \       0x9A   0x.... 0x....      LDR.W    R7,??DataTable3_11
   \       0x9E   0x42B8             CMP      R0,R7
   \       0xA0   0xD018             BEQ.N    ??HAL_DMA_Start_IT_4
   \       0xA2   0x6820             LDR      R0,[R4, #+0]
   \       0xA4   0x.... 0x....      LDR.W    R7,??DataTable4
   \       0xA8   0x42B8             CMP      R0,R7
   \       0xAA   0xD013             BEQ.N    ??HAL_DMA_Start_IT_4
   \       0xAC   0x6820             LDR      R0,[R4, #+0]
   \       0xAE   0x.... 0x....      LDR.W    R7,??DataTable4_1
   \       0xB2   0x42B8             CMP      R0,R7
   \       0xB4   0xD00E             BEQ.N    ??HAL_DMA_Start_IT_4
   \       0xB6   0x6820             LDR      R0,[R4, #+0]
   \       0xB8   0x.... 0x....      LDR.W    R7,??DataTable4_2
   \       0xBC   0x42B8             CMP      R0,R7
   \       0xBE   0xD009             BEQ.N    ??HAL_DMA_Start_IT_4
   \       0xC0   0x6820             LDR      R0,[R4, #+0]
   \       0xC2   0x.... 0x....      LDR.W    R7,??DataTable4_3
   \       0xC6   0x42B8             CMP      R0,R7
   \       0xC8   0xD004             BEQ.N    ??HAL_DMA_Start_IT_4
   \       0xCA   0x6820             LDR      R0,[R4, #+0]
   \       0xCC   0x.... 0x....      LDR.W    R7,??DataTable4_4
   \       0xD0   0x42B8             CMP      R0,R7
   \       0xD2   0xD106             BNE.N    ??HAL_DMA_Start_IT_5
   \                     ??HAL_DMA_Start_IT_4: (+1)
   \       0xD4   0x6820             LDR      R0,[R4, #+0]
   \       0xD6   0x6800             LDR      R0,[R0, #+0]
   \       0xD8   0x0840             LSRS     R0,R0,#+1
   \       0xDA   0x0040             LSLS     R0,R0,#+1
   \       0xDC   0x6827             LDR      R7,[R4, #+0]
   \       0xDE   0x6038             STR      R0,[R7, #+0]
   \       0xE0   0xE005             B.N      ??HAL_DMA_Start_IT_6
   \                     ??HAL_DMA_Start_IT_5: (+1)
   \       0xE2   0x6820             LDR      R0,[R4, #+0]
   \       0xE4   0x6800             LDR      R0,[R0, #+0]
   \       0xE6   0x0840             LSRS     R0,R0,#+1
   \       0xE8   0x0040             LSLS     R0,R0,#+1
   \       0xEA   0x6827             LDR      R7,[R4, #+0]
   \       0xEC   0x6038             STR      R0,[R7, #+0]
    701          
    702              /* Configure the source, destination address and the data length */
    703              DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
   \                     ??HAL_DMA_Start_IT_6: (+1)
   \       0xEE   0x0020             MOVS     R0,R4
   \       0xF0   0x.... 0x....      BL       DMA_SetConfig
    704          
    705              if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
   \       0xF4   0x6820             LDR      R0,[R4, #+0]
   \       0xF6   0x42B0             CMP      R0,R6
   \       0xF8   0xD040             BEQ.N    ??HAL_DMA_Start_IT_7
   \       0xFA   0x6820             LDR      R0,[R4, #+0]
   \       0xFC   0x....             LDR.N    R1,??DataTable3_2
   \       0xFE   0x4288             CMP      R0,R1
   \      0x100   0xD03C             BEQ.N    ??HAL_DMA_Start_IT_7
   \      0x102   0x6820             LDR      R0,[R4, #+0]
   \      0x104   0x....             LDR.N    R1,??DataTable3_3
   \      0x106   0x4288             CMP      R0,R1
   \      0x108   0xD038             BEQ.N    ??HAL_DMA_Start_IT_7
   \      0x10A   0x6820             LDR      R0,[R4, #+0]
   \      0x10C   0x....             LDR.N    R1,??DataTable3_4
   \      0x10E   0x4288             CMP      R0,R1
   \      0x110   0xD034             BEQ.N    ??HAL_DMA_Start_IT_7
   \      0x112   0x6820             LDR      R0,[R4, #+0]
   \      0x114   0x....             LDR.N    R1,??DataTable3_5
   \      0x116   0x4288             CMP      R0,R1
   \      0x118   0xD030             BEQ.N    ??HAL_DMA_Start_IT_7
   \      0x11A   0x6820             LDR      R0,[R4, #+0]
   \      0x11C   0x....             LDR.N    R1,??DataTable3_6
   \      0x11E   0x4288             CMP      R0,R1
   \      0x120   0xD02C             BEQ.N    ??HAL_DMA_Start_IT_7
   \      0x122   0x6820             LDR      R0,[R4, #+0]
   \      0x124   0x....             LDR.N    R1,??DataTable3_7
   \      0x126   0x4288             CMP      R0,R1
   \      0x128   0xD028             BEQ.N    ??HAL_DMA_Start_IT_7
   \      0x12A   0x6820             LDR      R0,[R4, #+0]
   \      0x12C   0x....             LDR.N    R1,??DataTable3_8
   \      0x12E   0x4288             CMP      R0,R1
   \      0x130   0xD024             BEQ.N    ??HAL_DMA_Start_IT_7
   \      0x132   0x6820             LDR      R0,[R4, #+0]
   \      0x134   0x....             LDR.N    R1,??DataTable3_9
   \      0x136   0x4288             CMP      R0,R1
   \      0x138   0xD020             BEQ.N    ??HAL_DMA_Start_IT_7
   \      0x13A   0x6820             LDR      R0,[R4, #+0]
   \      0x13C   0x....             LDR.N    R1,??DataTable3_10
   \      0x13E   0x4288             CMP      R0,R1
   \      0x140   0xD01C             BEQ.N    ??HAL_DMA_Start_IT_7
   \      0x142   0x6820             LDR      R0,[R4, #+0]
   \      0x144   0x....             LDR.N    R1,??DataTable3_11
   \      0x146   0x4288             CMP      R0,R1
   \      0x148   0xD018             BEQ.N    ??HAL_DMA_Start_IT_7
   \      0x14A   0x6820             LDR      R0,[R4, #+0]
   \      0x14C   0x.... 0x....      LDR.W    R1,??DataTable4
   \      0x150   0x4288             CMP      R0,R1
   \      0x152   0xD013             BEQ.N    ??HAL_DMA_Start_IT_7
   \      0x154   0x6820             LDR      R0,[R4, #+0]
   \      0x156   0x.... 0x....      LDR.W    R1,??DataTable4_1
   \      0x15A   0x4288             CMP      R0,R1
   \      0x15C   0xD00E             BEQ.N    ??HAL_DMA_Start_IT_7
   \      0x15E   0x6820             LDR      R0,[R4, #+0]
   \      0x160   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \      0x164   0x4288             CMP      R0,R1
   \      0x166   0xD009             BEQ.N    ??HAL_DMA_Start_IT_7
   \      0x168   0x6820             LDR      R0,[R4, #+0]
   \      0x16A   0x.... 0x....      LDR.W    R1,??DataTable4_3
   \      0x16E   0x4288             CMP      R0,R1
   \      0x170   0xD004             BEQ.N    ??HAL_DMA_Start_IT_7
   \      0x172   0x6820             LDR      R0,[R4, #+0]
   \      0x174   0x.... 0x....      LDR.W    R1,??DataTable4_4
   \      0x178   0x4288             CMP      R0,R1
   \      0x17A   0xD101             BNE.N    ??HAL_DMA_Start_IT_8
   \                     ??HAL_DMA_Start_IT_7: (+1)
   \      0x17C   0x2001             MOVS     R0,#+1
   \      0x17E   0xE000             B.N      ??HAL_DMA_Start_IT_9
   \                     ??HAL_DMA_Start_IT_8: (+1)
   \      0x180   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_Start_IT_9: (+1)
   \      0x182   0xB2C0             UXTB     R0,R0
   \      0x184   0x2800             CMP      R0,#+0
   \      0x186   0xD011             BEQ.N    ??HAL_DMA_Start_IT_10
    706              {
    707                /* Enable Common interrupts*/
    708                MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
   \      0x188   0x6820             LDR      R0,[R4, #+0]
   \      0x18A   0x6800             LDR      R0,[R0, #+0]
   \      0x18C   0xF030 0x001E      BICS     R0,R0,#0x1E
   \      0x190   0xF050 0x0016      ORRS     R0,R0,#0x16
   \      0x194   0x6821             LDR      R1,[R4, #+0]
   \      0x196   0x6008             STR      R0,[R1, #+0]
    709          
    710                if(hdma->XferHalfCpltCallback != NULL)
   \      0x198   0x6C20             LDR      R0,[R4, #+64]
   \      0x19A   0x2800             CMP      R0,#+0
   \      0x19C   0xD017             BEQ.N    ??HAL_DMA_Start_IT_11
    711                {
    712                  /* Enable Half Transfer IT if corresponding Callback is set */
    713                  ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
   \      0x19E   0x6820             LDR      R0,[R4, #+0]
   \      0x1A0   0x6800             LDR      R0,[R0, #+0]
   \      0x1A2   0xF050 0x0008      ORRS     R0,R0,#0x8
   \      0x1A6   0x6821             LDR      R1,[R4, #+0]
   \      0x1A8   0x6008             STR      R0,[R1, #+0]
   \      0x1AA   0xE010             B.N      ??HAL_DMA_Start_IT_11
    714                }
    715              }
    716              else /* BDMA channel */
    717              {
    718                /* Enable Common interrupts */
    719                MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
   \                     ??HAL_DMA_Start_IT_10: (+1)
   \      0x1AC   0x6820             LDR      R0,[R4, #+0]
   \      0x1AE   0x6800             LDR      R0,[R0, #+0]
   \      0x1B0   0xF030 0x000E      BICS     R0,R0,#0xE
   \      0x1B4   0xF050 0x000A      ORRS     R0,R0,#0xA
   \      0x1B8   0x6821             LDR      R1,[R4, #+0]
   \      0x1BA   0x6008             STR      R0,[R1, #+0]
    720          
    721                if(hdma->XferHalfCpltCallback != NULL)
   \      0x1BC   0x6C20             LDR      R0,[R4, #+64]
   \      0x1BE   0x2800             CMP      R0,#+0
   \      0x1C0   0xD005             BEQ.N    ??HAL_DMA_Start_IT_11
    722                {
    723                  /*Enable Half Transfer IT if corresponding Callback is set */
    724                  ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
   \      0x1C2   0x6820             LDR      R0,[R4, #+0]
   \      0x1C4   0x6800             LDR      R0,[R0, #+0]
   \      0x1C6   0xF050 0x0004      ORRS     R0,R0,#0x4
   \      0x1CA   0x6821             LDR      R1,[R4, #+0]
   \      0x1CC   0x6008             STR      R0,[R1, #+0]
    725                }
    726              }
    727          
    728              if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
   \                     ??HAL_DMA_Start_IT_11: (+1)
   \      0x1CE   0x6820             LDR      R0,[R4, #+0]
   \      0x1D0   0x42B0             CMP      R0,R6
   \      0x1D2   0xD068             BEQ.N    ??HAL_DMA_Start_IT_12
   \      0x1D4   0x6820             LDR      R0,[R4, #+0]
   \      0x1D6   0x....             LDR.N    R1,??DataTable3_2
   \      0x1D8   0x4288             CMP      R0,R1
   \      0x1DA   0xD064             BEQ.N    ??HAL_DMA_Start_IT_12
   \      0x1DC   0x6820             LDR      R0,[R4, #+0]
   \      0x1DE   0x....             LDR.N    R1,??DataTable3_3
   \      0x1E0   0x4288             CMP      R0,R1
   \      0x1E2   0xD060             BEQ.N    ??HAL_DMA_Start_IT_12
   \      0x1E4   0x6820             LDR      R0,[R4, #+0]
   \      0x1E6   0x....             LDR.N    R1,??DataTable3_4
   \      0x1E8   0x4288             CMP      R0,R1
   \      0x1EA   0xD05C             BEQ.N    ??HAL_DMA_Start_IT_12
   \      0x1EC   0x6820             LDR      R0,[R4, #+0]
   \      0x1EE   0x....             LDR.N    R1,??DataTable3_5
   \      0x1F0   0x4288             CMP      R0,R1
   \      0x1F2   0xD058             BEQ.N    ??HAL_DMA_Start_IT_12
   \      0x1F4   0x6820             LDR      R0,[R4, #+0]
   \      0x1F6   0x....             LDR.N    R1,??DataTable3_6
   \      0x1F8   0x4288             CMP      R0,R1
   \      0x1FA   0xD054             BEQ.N    ??HAL_DMA_Start_IT_12
   \      0x1FC   0x6820             LDR      R0,[R4, #+0]
   \      0x1FE   0x....             LDR.N    R1,??DataTable3_7
   \      0x200   0x4288             CMP      R0,R1
   \      0x202   0xD050             BEQ.N    ??HAL_DMA_Start_IT_12
   \      0x204   0x6820             LDR      R0,[R4, #+0]
   \      0x206   0x....             LDR.N    R1,??DataTable3_8
   \      0x208   0x4288             CMP      R0,R1
   \      0x20A   0xD04C             BEQ.N    ??HAL_DMA_Start_IT_12
   \      0x20C   0x6820             LDR      R0,[R4, #+0]
   \      0x20E   0x....             LDR.N    R1,??DataTable3_9
   \      0x210   0x4288             CMP      R0,R1
   \      0x212   0xD048             BEQ.N    ??HAL_DMA_Start_IT_12
   \      0x214   0x6820             LDR      R0,[R4, #+0]
   \      0x216   0x....             LDR.N    R1,??DataTable3_10
   \      0x218   0x4288             CMP      R0,R1
   \      0x21A   0xD044             BEQ.N    ??HAL_DMA_Start_IT_12
   \      0x21C   0x6820             LDR      R0,[R4, #+0]
   \      0x21E   0x....             LDR.N    R1,??DataTable3_11
   \      0x220   0x4288             CMP      R0,R1
   \      0x222   0xD040             BEQ.N    ??HAL_DMA_Start_IT_12
   \      0x224   0x6820             LDR      R0,[R4, #+0]
   \      0x226   0x.... 0x....      LDR.W    R1,??DataTable4
   \      0x22A   0x4288             CMP      R0,R1
   \      0x22C   0xD03B             BEQ.N    ??HAL_DMA_Start_IT_12
   \      0x22E   0x6820             LDR      R0,[R4, #+0]
   \      0x230   0x.... 0x....      LDR.W    R1,??DataTable4_1
   \      0x234   0x4288             CMP      R0,R1
   \      0x236   0xD036             BEQ.N    ??HAL_DMA_Start_IT_12
   \      0x238   0x6820             LDR      R0,[R4, #+0]
   \      0x23A   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \      0x23E   0x4288             CMP      R0,R1
   \      0x240   0xD031             BEQ.N    ??HAL_DMA_Start_IT_12
   \      0x242   0x6820             LDR      R0,[R4, #+0]
   \      0x244   0x.... 0x....      LDR.W    R1,??DataTable4_3
   \      0x248   0x4288             CMP      R0,R1
   \      0x24A   0xD02C             BEQ.N    ??HAL_DMA_Start_IT_12
   \      0x24C   0x6820             LDR      R0,[R4, #+0]
   \      0x24E   0x.... 0x....      LDR.W    R1,??DataTable4_4
   \      0x252   0x4288             CMP      R0,R1
   \      0x254   0xD027             BEQ.N    ??HAL_DMA_Start_IT_12
   \      0x256   0x6820             LDR      R0,[R4, #+0]
   \      0x258   0x.... 0x....      LDR.W    R1,??DataTable4_5
   \      0x25C   0x4288             CMP      R0,R1
   \      0x25E   0xD022             BEQ.N    ??HAL_DMA_Start_IT_12
   \      0x260   0x6820             LDR      R0,[R4, #+0]
   \      0x262   0x.... 0x....      LDR.W    R1,??DataTable4_6
   \      0x266   0x4288             CMP      R0,R1
   \      0x268   0xD01D             BEQ.N    ??HAL_DMA_Start_IT_12
   \      0x26A   0x6820             LDR      R0,[R4, #+0]
   \      0x26C   0x.... 0x....      LDR.W    R1,??DataTable4_7
   \      0x270   0x4288             CMP      R0,R1
   \      0x272   0xD018             BEQ.N    ??HAL_DMA_Start_IT_12
   \      0x274   0x6820             LDR      R0,[R4, #+0]
   \      0x276   0x.... 0x....      LDR.W    R1,??DataTable4_8
   \      0x27A   0x4288             CMP      R0,R1
   \      0x27C   0xD013             BEQ.N    ??HAL_DMA_Start_IT_12
   \      0x27E   0x6820             LDR      R0,[R4, #+0]
   \      0x280   0x.... 0x....      LDR.W    R1,??DataTable4_9
   \      0x284   0x4288             CMP      R0,R1
   \      0x286   0xD00E             BEQ.N    ??HAL_DMA_Start_IT_12
   \      0x288   0x6820             LDR      R0,[R4, #+0]
   \      0x28A   0x.... 0x....      LDR.W    R1,??DataTable4_10
   \      0x28E   0x4288             CMP      R0,R1
   \      0x290   0xD009             BEQ.N    ??HAL_DMA_Start_IT_12
   \      0x292   0x6820             LDR      R0,[R4, #+0]
   \      0x294   0x.... 0x....      LDR.W    R1,??DataTable4_11
   \      0x298   0x4288             CMP      R0,R1
   \      0x29A   0xD004             BEQ.N    ??HAL_DMA_Start_IT_12
   \      0x29C   0x6820             LDR      R0,[R4, #+0]
   \      0x29E   0x.... 0x....      LDR.W    R1,??DataTable5
   \      0x2A2   0x4288             CMP      R0,R1
   \      0x2A4   0xD101             BNE.N    ??HAL_DMA_Start_IT_13
   \                     ??HAL_DMA_Start_IT_12: (+1)
   \      0x2A6   0x2001             MOVS     R0,#+1
   \      0x2A8   0xE000             B.N      ??HAL_DMA_Start_IT_14
   \                     ??HAL_DMA_Start_IT_13: (+1)
   \      0x2AA   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_Start_IT_14: (+1)
   \      0x2AC   0xB2C0             UXTB     R0,R0
   \      0x2AE   0x2800             CMP      R0,#+0
   \      0x2B0   0xD012             BEQ.N    ??HAL_DMA_Start_IT_15
    729              {
    730                /* Check if DMAMUX Synchronization is enabled */
    731                if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
   \      0x2B2   0x6E20             LDR      R0,[R4, #+96]
   \      0x2B4   0x6800             LDR      R0,[R0, #+0]
   \      0x2B6   0x03C0             LSLS     R0,R0,#+15
   \      0x2B8   0xD505             BPL.N    ??HAL_DMA_Start_IT_16
    732                {
    733                  /* Enable DMAMUX sync overrun IT*/
    734                  hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
   \      0x2BA   0x6E20             LDR      R0,[R4, #+96]
   \      0x2BC   0x6800             LDR      R0,[R0, #+0]
   \      0x2BE   0xF450 0x7080      ORRS     R0,R0,#0x100
   \      0x2C2   0x6E21             LDR      R1,[R4, #+96]
   \      0x2C4   0x6008             STR      R0,[R1, #+0]
    735                }
    736          
    737                if(hdma->DMAmuxRequestGen != 0U)
   \                     ??HAL_DMA_Start_IT_16: (+1)
   \      0x2C6   0x6EE0             LDR      R0,[R4, #+108]
   \      0x2C8   0x2800             CMP      R0,#+0
   \      0x2CA   0xD005             BEQ.N    ??HAL_DMA_Start_IT_15
    738                {
    739                  /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
    740                  /* enable the request gen overrun IT */
    741                  hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
   \      0x2CC   0x6EE0             LDR      R0,[R4, #+108]
   \      0x2CE   0x6800             LDR      R0,[R0, #+0]
   \      0x2D0   0xF450 0x7080      ORRS     R0,R0,#0x100
   \      0x2D4   0x6EE1             LDR      R1,[R4, #+108]
   \      0x2D6   0x6008             STR      R0,[R1, #+0]
    742                }
    743              }
    744          
    745              /* Enable the Peripheral */
    746              __HAL_DMA_ENABLE(hdma);
   \                     ??HAL_DMA_Start_IT_15: (+1)
   \      0x2D8   0x6820             LDR      R0,[R4, #+0]
   \      0x2DA   0x42B0             CMP      R0,R6
   \      0x2DC   0xD040             BEQ.N    ??HAL_DMA_Start_IT_17
   \      0x2DE   0x6820             LDR      R0,[R4, #+0]
   \      0x2E0   0x....             LDR.N    R1,??DataTable3_2
   \      0x2E2   0x4288             CMP      R0,R1
   \      0x2E4   0xD03C             BEQ.N    ??HAL_DMA_Start_IT_17
   \      0x2E6   0x6820             LDR      R0,[R4, #+0]
   \      0x2E8   0x....             LDR.N    R1,??DataTable3_3
   \      0x2EA   0x4288             CMP      R0,R1
   \      0x2EC   0xD038             BEQ.N    ??HAL_DMA_Start_IT_17
   \      0x2EE   0x6820             LDR      R0,[R4, #+0]
   \      0x2F0   0x....             LDR.N    R1,??DataTable3_4
   \      0x2F2   0x4288             CMP      R0,R1
   \      0x2F4   0xD034             BEQ.N    ??HAL_DMA_Start_IT_17
   \      0x2F6   0x6820             LDR      R0,[R4, #+0]
   \      0x2F8   0x....             LDR.N    R1,??DataTable3_5
   \      0x2FA   0x4288             CMP      R0,R1
   \      0x2FC   0xD030             BEQ.N    ??HAL_DMA_Start_IT_17
   \      0x2FE   0x6820             LDR      R0,[R4, #+0]
   \      0x300   0x....             LDR.N    R1,??DataTable3_6
   \      0x302   0x4288             CMP      R0,R1
   \      0x304   0xD02C             BEQ.N    ??HAL_DMA_Start_IT_17
   \      0x306   0x6820             LDR      R0,[R4, #+0]
   \      0x308   0x....             LDR.N    R1,??DataTable3_7
   \      0x30A   0x4288             CMP      R0,R1
   \      0x30C   0xD028             BEQ.N    ??HAL_DMA_Start_IT_17
   \      0x30E   0x6820             LDR      R0,[R4, #+0]
   \      0x310   0x....             LDR.N    R1,??DataTable3_8
   \      0x312   0x4288             CMP      R0,R1
   \      0x314   0xD024             BEQ.N    ??HAL_DMA_Start_IT_17
   \      0x316   0x6820             LDR      R0,[R4, #+0]
   \      0x318   0x....             LDR.N    R1,??DataTable3_9
   \      0x31A   0x4288             CMP      R0,R1
   \      0x31C   0xD020             BEQ.N    ??HAL_DMA_Start_IT_17
   \      0x31E   0x6820             LDR      R0,[R4, #+0]
   \      0x320   0x....             LDR.N    R1,??DataTable3_10
   \      0x322   0x4288             CMP      R0,R1
   \      0x324   0xD01C             BEQ.N    ??HAL_DMA_Start_IT_17
   \      0x326   0x6820             LDR      R0,[R4, #+0]
   \      0x328   0x....             LDR.N    R1,??DataTable3_11
   \      0x32A   0x4288             CMP      R0,R1
   \      0x32C   0xD018             BEQ.N    ??HAL_DMA_Start_IT_17
   \      0x32E   0x6820             LDR      R0,[R4, #+0]
   \      0x330   0x.... 0x....      LDR.W    R1,??DataTable4
   \      0x334   0x4288             CMP      R0,R1
   \      0x336   0xD013             BEQ.N    ??HAL_DMA_Start_IT_17
   \      0x338   0x6820             LDR      R0,[R4, #+0]
   \      0x33A   0x.... 0x....      LDR.W    R1,??DataTable4_1
   \      0x33E   0x4288             CMP      R0,R1
   \      0x340   0xD00E             BEQ.N    ??HAL_DMA_Start_IT_17
   \      0x342   0x6820             LDR      R0,[R4, #+0]
   \      0x344   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \      0x348   0x4288             CMP      R0,R1
   \      0x34A   0xD009             BEQ.N    ??HAL_DMA_Start_IT_17
   \      0x34C   0x6820             LDR      R0,[R4, #+0]
   \      0x34E   0x.... 0x....      LDR.W    R1,??DataTable4_3
   \      0x352   0x4288             CMP      R0,R1
   \      0x354   0xD004             BEQ.N    ??HAL_DMA_Start_IT_17
   \      0x356   0x6820             LDR      R0,[R4, #+0]
   \      0x358   0x.... 0x....      LDR.W    R1,??DataTable4_4
   \      0x35C   0x4288             CMP      R0,R1
   \      0x35E   0xD106             BNE.N    ??HAL_DMA_Start_IT_18
   \                     ??HAL_DMA_Start_IT_17: (+1)
   \      0x360   0x6820             LDR      R0,[R4, #+0]
   \      0x362   0x6800             LDR      R0,[R0, #+0]
   \      0x364   0xF050 0x0001      ORRS     R0,R0,#0x1
   \      0x368   0x6821             LDR      R1,[R4, #+0]
   \      0x36A   0x6008             STR      R0,[R1, #+0]
   \      0x36C   0xE00D             B.N      ??HAL_DMA_Start_IT_19
   \                     ??HAL_DMA_Start_IT_18: (+1)
   \      0x36E   0x6820             LDR      R0,[R4, #+0]
   \      0x370   0x6800             LDR      R0,[R0, #+0]
   \      0x372   0xF050 0x0001      ORRS     R0,R0,#0x1
   \      0x376   0x6821             LDR      R1,[R4, #+0]
   \      0x378   0x6008             STR      R0,[R1, #+0]
   \      0x37A   0xE006             B.N      ??HAL_DMA_Start_IT_19
    747            }
    748            else
    749            {
    750              /* Set the error code to busy */
    751              hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
   \                     ??HAL_DMA_Start_IT_3: (+1)
   \      0x37C   0xF44F 0x6000      MOV      R0,#+2048
   \      0x380   0x6560             STR      R0,[R4, #+84]
    752          
    753              /* Process unlocked */
    754              __HAL_UNLOCK(hdma);
   \      0x382   0x2000             MOVS     R0,#+0
   \      0x384   0xF884 0x0034      STRB     R0,[R4, #+52]
    755          
    756              /* Return error status */
    757              status = HAL_ERROR;
   \      0x388   0x2501             MOVS     R5,#+1
    758            }
    759          
    760            return status;
   \                     ??HAL_DMA_Start_IT_19: (+1)
   \      0x38A   0x0028             MOVS     R0,R5
   \      0x38C   0xB2C0             UXTB     R0,R0
   \                     ??HAL_DMA_Start_IT_1: (+1)
   \      0x38E   0xBDF2             POP      {R1,R4-R7,PC}
    761          }
    762          
    763          /**
    764            * @brief  Aborts the DMA Transfer.
    765            * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
    766            *                 the configuration information for the specified DMA Stream.
    767            *
    768            * @note  After disabling a DMA Stream, a check for wait until the DMA Stream is
    769            *        effectively disabled is added. If a Stream is disabled
    770            *        while a data transfer is ongoing, the current data will be transferred
    771            *        and the Stream will be effectively disabled only after the transfer of
    772            *        this single data is finished.
    773            * @retval HAL status
    774            */

   \                                 In section .text, align 2, keep-with-next
    775          HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
    776          {
   \                     HAL_DMA_Abort: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
    777            /* calculate DMA base and stream number */
    778            DMA_Base_Registers *regs_dma;
    779            BDMA_Base_Registers *regs_bdma;
    780            const __IO uint32_t *enableRegister;
    781          
    782            uint32_t tickstart = HAL_GetTick();
   \        0x4   0x.... 0x....      BL       HAL_GetTick
   \        0x8   0x0006             MOVS     R6,R0
    783          
    784           /* Check the DMA peripheral handle */
    785            if(hdma == NULL)
   \        0xA   0x2C00             CMP      R4,#+0
   \        0xC   0xD101             BNE.N    ??HAL_DMA_Abort_0
    786            {
    787              return HAL_ERROR;
   \        0xE   0x2001             MOVS     R0,#+1
   \       0x10   0xE245             B.N      ??HAL_DMA_Abort_1
    788            }
    789          
    790            /* Check the DMA peripheral state */
    791            if(hdma->State != HAL_DMA_STATE_BUSY)
   \                     ??HAL_DMA_Abort_0: (+1)
   \       0x12   0xF894 0x0035      LDRB     R0,[R4, #+53]
   \       0x16   0x2802             CMP      R0,#+2
   \       0x18   0xD006             BEQ.N    ??HAL_DMA_Abort_2
    792            {
    793              hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
   \       0x1A   0x2080             MOVS     R0,#+128
   \       0x1C   0x6560             STR      R0,[R4, #+84]
    794          
    795              /* Process Unlocked */
    796              __HAL_UNLOCK(hdma);
   \       0x1E   0x2000             MOVS     R0,#+0
   \       0x20   0xF884 0x0034      STRB     R0,[R4, #+52]
    797          
    798              return HAL_ERROR;
   \       0x24   0x2001             MOVS     R0,#+1
   \       0x26   0xE23A             B.N      ??HAL_DMA_Abort_1
    799            }
    800            else
    801            {
    802              /* Disable all the transfer interrupts */
    803              if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
   \                     ??HAL_DMA_Abort_2: (+1)
   \       0x28   0x.... 0x....      LDR.W    R5,??DataTable5_1
   \       0x2C   0x6820             LDR      R0,[R4, #+0]
   \       0x2E   0x42A8             CMP      R0,R5
   \       0x30   0xD04A             BEQ.N    ??HAL_DMA_Abort_3
   \       0x32   0x6820             LDR      R0,[R4, #+0]
   \       0x34   0x.... 0x....      LDR.W    R1,??DataTable5_2
   \       0x38   0x4288             CMP      R0,R1
   \       0x3A   0xD045             BEQ.N    ??HAL_DMA_Abort_3
   \       0x3C   0x6820             LDR      R0,[R4, #+0]
   \       0x3E   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \       0x42   0x4288             CMP      R0,R1
   \       0x44   0xD040             BEQ.N    ??HAL_DMA_Abort_3
   \       0x46   0x6820             LDR      R0,[R4, #+0]
   \       0x48   0x.... 0x....      LDR.W    R1,??DataTable5_4
   \       0x4C   0x4288             CMP      R0,R1
   \       0x4E   0xD03B             BEQ.N    ??HAL_DMA_Abort_3
   \       0x50   0x6820             LDR      R0,[R4, #+0]
   \       0x52   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \       0x56   0x4288             CMP      R0,R1
   \       0x58   0xD036             BEQ.N    ??HAL_DMA_Abort_3
   \       0x5A   0x6820             LDR      R0,[R4, #+0]
   \       0x5C   0x.... 0x....      LDR.W    R1,??DataTable5_6
   \       0x60   0x4288             CMP      R0,R1
   \       0x62   0xD031             BEQ.N    ??HAL_DMA_Abort_3
   \       0x64   0x6820             LDR      R0,[R4, #+0]
   \       0x66   0x.... 0x....      LDR.W    R1,??DataTable5_7
   \       0x6A   0x4288             CMP      R0,R1
   \       0x6C   0xD02C             BEQ.N    ??HAL_DMA_Abort_3
   \       0x6E   0x6820             LDR      R0,[R4, #+0]
   \       0x70   0x.... 0x....      LDR.W    R1,??DataTable5_8
   \       0x74   0x4288             CMP      R0,R1
   \       0x76   0xD027             BEQ.N    ??HAL_DMA_Abort_3
   \       0x78   0x6820             LDR      R0,[R4, #+0]
   \       0x7A   0x.... 0x....      LDR.W    R1,??DataTable5_9
   \       0x7E   0x4288             CMP      R0,R1
   \       0x80   0xD022             BEQ.N    ??HAL_DMA_Abort_3
   \       0x82   0x6820             LDR      R0,[R4, #+0]
   \       0x84   0x.... 0x....      LDR.W    R1,??DataTable5_10
   \       0x88   0x4288             CMP      R0,R1
   \       0x8A   0xD01D             BEQ.N    ??HAL_DMA_Abort_3
   \       0x8C   0x6820             LDR      R0,[R4, #+0]
   \       0x8E   0x.... 0x....      LDR.W    R1,??DataTable5_11
   \       0x92   0x4288             CMP      R0,R1
   \       0x94   0xD018             BEQ.N    ??HAL_DMA_Abort_3
   \       0x96   0x6820             LDR      R0,[R4, #+0]
   \       0x98   0x.... 0x....      LDR.W    R1,??DataTable4
   \       0x9C   0x4288             CMP      R0,R1
   \       0x9E   0xD013             BEQ.N    ??HAL_DMA_Abort_3
   \       0xA0   0x6820             LDR      R0,[R4, #+0]
   \       0xA2   0x.... 0x....      LDR.W    R1,??DataTable4_1
   \       0xA6   0x4288             CMP      R0,R1
   \       0xA8   0xD00E             BEQ.N    ??HAL_DMA_Abort_3
   \       0xAA   0x6820             LDR      R0,[R4, #+0]
   \       0xAC   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \       0xB0   0x4288             CMP      R0,R1
   \       0xB2   0xD009             BEQ.N    ??HAL_DMA_Abort_3
   \       0xB4   0x6820             LDR      R0,[R4, #+0]
   \       0xB6   0x.... 0x....      LDR.W    R1,??DataTable4_3
   \       0xBA   0x4288             CMP      R0,R1
   \       0xBC   0xD004             BEQ.N    ??HAL_DMA_Abort_3
   \       0xBE   0x6820             LDR      R0,[R4, #+0]
   \       0xC0   0x.... 0x....      LDR.W    R1,??DataTable4_4
   \       0xC4   0x4288             CMP      R0,R1
   \       0xC6   0xD101             BNE.N    ??HAL_DMA_Abort_4
   \                     ??HAL_DMA_Abort_3: (+1)
   \       0xC8   0x2001             MOVS     R0,#+1
   \       0xCA   0xE000             B.N      ??HAL_DMA_Abort_5
   \                     ??HAL_DMA_Abort_4: (+1)
   \       0xCC   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_Abort_5: (+1)
   \       0xCE   0xB2C0             UXTB     R0,R0
   \       0xD0   0x2800             CMP      R0,#+0
   \       0xD2   0xD00D             BEQ.N    ??HAL_DMA_Abort_6
    804              {
    805                 /* Disable DMA All Interrupts  */
    806                ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
   \       0xD4   0x6820             LDR      R0,[R4, #+0]
   \       0xD6   0x6800             LDR      R0,[R0, #+0]
   \       0xD8   0xF030 0x001E      BICS     R0,R0,#0x1E
   \       0xDC   0x6821             LDR      R1,[R4, #+0]
   \       0xDE   0x6008             STR      R0,[R1, #+0]
    807                ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
   \       0xE0   0x6820             LDR      R0,[R4, #+0]
   \       0xE2   0x6940             LDR      R0,[R0, #+20]
   \       0xE4   0xF030 0x0080      BICS     R0,R0,#0x80
   \       0xE8   0x6821             LDR      R1,[R4, #+0]
   \       0xEA   0x6148             STR      R0,[R1, #+20]
    808          
    809                enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
   \       0xEC   0x6827             LDR      R7,[R4, #+0]
   \       0xEE   0xE006             B.N      ??HAL_DMA_Abort_7
    810              }
    811              else /* BDMA channel */
    812              {
    813                /* Disable DMA All Interrupts */
    814                ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
   \                     ??HAL_DMA_Abort_6: (+1)
   \       0xF0   0x6820             LDR      R0,[R4, #+0]
   \       0xF2   0x6800             LDR      R0,[R0, #+0]
   \       0xF4   0xF030 0x000E      BICS     R0,R0,#0xE
   \       0xF8   0x6821             LDR      R1,[R4, #+0]
   \       0xFA   0x6008             STR      R0,[R1, #+0]
    815          
    816                enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
   \       0xFC   0x6827             LDR      R7,[R4, #+0]
    817              }
    818          
    819              if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
   \                     ??HAL_DMA_Abort_7: (+1)
   \       0xFE   0x6820             LDR      R0,[R4, #+0]
   \      0x100   0x42A8             CMP      R0,R5
   \      0x102   0xD072             BEQ.N    ??HAL_DMA_Abort_8
   \      0x104   0x6820             LDR      R0,[R4, #+0]
   \      0x106   0x.... 0x....      LDR.W    R1,??DataTable5_2
   \      0x10A   0x4288             CMP      R0,R1
   \      0x10C   0xD06D             BEQ.N    ??HAL_DMA_Abort_8
   \      0x10E   0x6820             LDR      R0,[R4, #+0]
   \      0x110   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \      0x114   0x4288             CMP      R0,R1
   \      0x116   0xD068             BEQ.N    ??HAL_DMA_Abort_8
   \      0x118   0x6820             LDR      R0,[R4, #+0]
   \      0x11A   0x.... 0x....      LDR.W    R1,??DataTable5_4
   \      0x11E   0x4288             CMP      R0,R1
   \      0x120   0xD063             BEQ.N    ??HAL_DMA_Abort_8
   \      0x122   0x6820             LDR      R0,[R4, #+0]
   \      0x124   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \      0x128   0x4288             CMP      R0,R1
   \      0x12A   0xD05E             BEQ.N    ??HAL_DMA_Abort_8
   \      0x12C   0x6820             LDR      R0,[R4, #+0]
   \      0x12E   0x.... 0x....      LDR.W    R1,??DataTable5_6
   \      0x132   0x4288             CMP      R0,R1
   \      0x134   0xD059             BEQ.N    ??HAL_DMA_Abort_8
   \      0x136   0x6820             LDR      R0,[R4, #+0]
   \      0x138   0x.... 0x....      LDR.W    R1,??DataTable5_7
   \      0x13C   0x4288             CMP      R0,R1
   \      0x13E   0xD054             BEQ.N    ??HAL_DMA_Abort_8
   \      0x140   0x6820             LDR      R0,[R4, #+0]
   \      0x142   0x.... 0x....      LDR.W    R1,??DataTable5_8
   \      0x146   0x4288             CMP      R0,R1
   \      0x148   0xD04F             BEQ.N    ??HAL_DMA_Abort_8
   \      0x14A   0x6820             LDR      R0,[R4, #+0]
   \      0x14C   0x.... 0x....      LDR.W    R1,??DataTable5_9
   \      0x150   0x4288             CMP      R0,R1
   \      0x152   0xD04A             BEQ.N    ??HAL_DMA_Abort_8
   \      0x154   0x6820             LDR      R0,[R4, #+0]
   \      0x156   0x.... 0x....      LDR.W    R1,??DataTable5_10
   \      0x15A   0x4288             CMP      R0,R1
   \      0x15C   0xD045             BEQ.N    ??HAL_DMA_Abort_8
   \      0x15E   0x6820             LDR      R0,[R4, #+0]
   \      0x160   0x.... 0x....      LDR.W    R1,??DataTable5_11
   \      0x164   0x4288             CMP      R0,R1
   \      0x166   0xD040             BEQ.N    ??HAL_DMA_Abort_8
   \      0x168   0x6820             LDR      R0,[R4, #+0]
   \      0x16A   0x.... 0x....      LDR.W    R1,??DataTable4
   \      0x16E   0x4288             CMP      R0,R1
   \      0x170   0xD03B             BEQ.N    ??HAL_DMA_Abort_8
   \      0x172   0x6820             LDR      R0,[R4, #+0]
   \      0x174   0x.... 0x....      LDR.W    R1,??DataTable4_1
   \      0x178   0x4288             CMP      R0,R1
   \      0x17A   0xD036             BEQ.N    ??HAL_DMA_Abort_8
   \      0x17C   0x6820             LDR      R0,[R4, #+0]
   \      0x17E   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \      0x182   0x4288             CMP      R0,R1
   \      0x184   0xD031             BEQ.N    ??HAL_DMA_Abort_8
   \      0x186   0x6820             LDR      R0,[R4, #+0]
   \      0x188   0x.... 0x....      LDR.W    R1,??DataTable4_3
   \      0x18C   0x4288             CMP      R0,R1
   \      0x18E   0xD02C             BEQ.N    ??HAL_DMA_Abort_8
   \      0x190   0x6820             LDR      R0,[R4, #+0]
   \      0x192   0x.... 0x....      LDR.W    R1,??DataTable4_4
   \      0x196   0x4288             CMP      R0,R1
   \      0x198   0xD027             BEQ.N    ??HAL_DMA_Abort_8
   \      0x19A   0x6820             LDR      R0,[R4, #+0]
   \      0x19C   0x.... 0x....      LDR.W    R1,??DataTable4_5
   \      0x1A0   0x4288             CMP      R0,R1
   \      0x1A2   0xD022             BEQ.N    ??HAL_DMA_Abort_8
   \      0x1A4   0x6820             LDR      R0,[R4, #+0]
   \      0x1A6   0x.... 0x....      LDR.W    R1,??DataTable4_6
   \      0x1AA   0x4288             CMP      R0,R1
   \      0x1AC   0xD01D             BEQ.N    ??HAL_DMA_Abort_8
   \      0x1AE   0x6820             LDR      R0,[R4, #+0]
   \      0x1B0   0x.... 0x....      LDR.W    R1,??DataTable4_7
   \      0x1B4   0x4288             CMP      R0,R1
   \      0x1B6   0xD018             BEQ.N    ??HAL_DMA_Abort_8
   \      0x1B8   0x6820             LDR      R0,[R4, #+0]
   \      0x1BA   0x.... 0x....      LDR.W    R1,??DataTable4_8
   \      0x1BE   0x4288             CMP      R0,R1
   \      0x1C0   0xD013             BEQ.N    ??HAL_DMA_Abort_8
   \      0x1C2   0x6820             LDR      R0,[R4, #+0]
   \      0x1C4   0x.... 0x....      LDR.W    R1,??DataTable4_9
   \      0x1C8   0x4288             CMP      R0,R1
   \      0x1CA   0xD00E             BEQ.N    ??HAL_DMA_Abort_8
   \      0x1CC   0x6820             LDR      R0,[R4, #+0]
   \      0x1CE   0x.... 0x....      LDR.W    R1,??DataTable4_10
   \      0x1D2   0x4288             CMP      R0,R1
   \      0x1D4   0xD009             BEQ.N    ??HAL_DMA_Abort_8
   \      0x1D6   0x6820             LDR      R0,[R4, #+0]
   \      0x1D8   0x.... 0x....      LDR.W    R1,??DataTable4_11
   \      0x1DC   0x4288             CMP      R0,R1
   \      0x1DE   0xD004             BEQ.N    ??HAL_DMA_Abort_8
   \      0x1E0   0x6820             LDR      R0,[R4, #+0]
   \      0x1E2   0x.... 0x....      LDR.W    R1,??DataTable5
   \      0x1E6   0x4288             CMP      R0,R1
   \      0x1E8   0xD101             BNE.N    ??HAL_DMA_Abort_9
   \                     ??HAL_DMA_Abort_8: (+1)
   \      0x1EA   0x2001             MOVS     R0,#+1
   \      0x1EC   0xE000             B.N      ??HAL_DMA_Abort_10
   \                     ??HAL_DMA_Abort_9: (+1)
   \      0x1EE   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_Abort_10: (+1)
   \      0x1F0   0xB2C0             UXTB     R0,R0
   \      0x1F2   0x2800             CMP      R0,#+0
   \      0x1F4   0xD005             BEQ.N    ??HAL_DMA_Abort_11
    820              {
    821                /* disable the DMAMUX sync overrun IT */
    822                hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
   \      0x1F6   0x6E20             LDR      R0,[R4, #+96]
   \      0x1F8   0x6800             LDR      R0,[R0, #+0]
   \      0x1FA   0xF430 0x7080      BICS     R0,R0,#0x100
   \      0x1FE   0x6E21             LDR      R1,[R4, #+96]
   \      0x200   0x6008             STR      R0,[R1, #+0]
    823              }
    824          
    825              /* Disable the stream */
    826              __HAL_DMA_DISABLE(hdma);
   \                     ??HAL_DMA_Abort_11: (+1)
   \      0x202   0x6820             LDR      R0,[R4, #+0]
   \      0x204   0x42A8             CMP      R0,R5
   \      0x206   0xD045             BEQ.N    ??HAL_DMA_Abort_12
   \      0x208   0x6820             LDR      R0,[R4, #+0]
   \      0x20A   0x.... 0x....      LDR.W    R1,??DataTable5_2
   \      0x20E   0x4288             CMP      R0,R1
   \      0x210   0xD040             BEQ.N    ??HAL_DMA_Abort_12
   \      0x212   0x6820             LDR      R0,[R4, #+0]
   \      0x214   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \      0x218   0x4288             CMP      R0,R1
   \      0x21A   0xD03B             BEQ.N    ??HAL_DMA_Abort_12
   \      0x21C   0x6820             LDR      R0,[R4, #+0]
   \      0x21E   0x.... 0x....      LDR.W    R1,??DataTable5_4
   \      0x222   0x4288             CMP      R0,R1
   \      0x224   0xD036             BEQ.N    ??HAL_DMA_Abort_12
   \      0x226   0x6820             LDR      R0,[R4, #+0]
   \      0x228   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \      0x22C   0x4288             CMP      R0,R1
   \      0x22E   0xD031             BEQ.N    ??HAL_DMA_Abort_12
   \      0x230   0x6820             LDR      R0,[R4, #+0]
   \      0x232   0x.... 0x....      LDR.W    R1,??DataTable5_6
   \      0x236   0x4288             CMP      R0,R1
   \      0x238   0xD02C             BEQ.N    ??HAL_DMA_Abort_12
   \      0x23A   0x6820             LDR      R0,[R4, #+0]
   \      0x23C   0x.... 0x....      LDR.W    R1,??DataTable5_7
   \      0x240   0x4288             CMP      R0,R1
   \      0x242   0xD027             BEQ.N    ??HAL_DMA_Abort_12
   \      0x244   0x6820             LDR      R0,[R4, #+0]
   \      0x246   0x.... 0x....      LDR.W    R1,??DataTable5_8
   \      0x24A   0x4288             CMP      R0,R1
   \      0x24C   0xD022             BEQ.N    ??HAL_DMA_Abort_12
   \      0x24E   0x6820             LDR      R0,[R4, #+0]
   \      0x250   0x.... 0x....      LDR.W    R1,??DataTable5_9
   \      0x254   0x4288             CMP      R0,R1
   \      0x256   0xD01D             BEQ.N    ??HAL_DMA_Abort_12
   \      0x258   0x6820             LDR      R0,[R4, #+0]
   \      0x25A   0x.... 0x....      LDR.W    R1,??DataTable5_10
   \      0x25E   0x4288             CMP      R0,R1
   \      0x260   0xD018             BEQ.N    ??HAL_DMA_Abort_12
   \      0x262   0x6820             LDR      R0,[R4, #+0]
   \      0x264   0x.... 0x....      LDR.W    R1,??DataTable5_11
   \      0x268   0x4288             CMP      R0,R1
   \      0x26A   0xD013             BEQ.N    ??HAL_DMA_Abort_12
   \      0x26C   0x6820             LDR      R0,[R4, #+0]
   \      0x26E   0x....             LDR.N    R1,??DataTable4
   \      0x270   0x4288             CMP      R0,R1
   \      0x272   0xD00F             BEQ.N    ??HAL_DMA_Abort_12
   \      0x274   0x6820             LDR      R0,[R4, #+0]
   \      0x276   0x....             LDR.N    R1,??DataTable4_1
   \      0x278   0x4288             CMP      R0,R1
   \      0x27A   0xD00B             BEQ.N    ??HAL_DMA_Abort_12
   \      0x27C   0x6820             LDR      R0,[R4, #+0]
   \      0x27E   0x....             LDR.N    R1,??DataTable4_2
   \      0x280   0x4288             CMP      R0,R1
   \      0x282   0xD007             BEQ.N    ??HAL_DMA_Abort_12
   \      0x284   0x6820             LDR      R0,[R4, #+0]
   \      0x286   0x....             LDR.N    R1,??DataTable4_3
   \      0x288   0x4288             CMP      R0,R1
   \      0x28A   0xD003             BEQ.N    ??HAL_DMA_Abort_12
   \      0x28C   0x6820             LDR      R0,[R4, #+0]
   \      0x28E   0x....             LDR.N    R1,??DataTable4_4
   \      0x290   0x4288             CMP      R0,R1
   \      0x292   0xD106             BNE.N    ??HAL_DMA_Abort_13
   \                     ??HAL_DMA_Abort_12: (+1)
   \      0x294   0x6820             LDR      R0,[R4, #+0]
   \      0x296   0x6800             LDR      R0,[R0, #+0]
   \      0x298   0x0840             LSRS     R0,R0,#+1
   \      0x29A   0x0040             LSLS     R0,R0,#+1
   \      0x29C   0x6821             LDR      R1,[R4, #+0]
   \      0x29E   0x6008             STR      R0,[R1, #+0]
   \      0x2A0   0xE005             B.N      ??HAL_DMA_Abort_14
   \                     ??HAL_DMA_Abort_13: (+1)
   \      0x2A2   0x6820             LDR      R0,[R4, #+0]
   \      0x2A4   0x6800             LDR      R0,[R0, #+0]
   \      0x2A6   0x0840             LSRS     R0,R0,#+1
   \      0x2A8   0x0040             LSLS     R0,R0,#+1
   \      0x2AA   0x6821             LDR      R1,[R4, #+0]
   \      0x2AC   0x6008             STR      R0,[R1, #+0]
    827          
    828              /* Check if the DMA Stream is effectively disabled */
    829              while(((*enableRegister) & DMA_SxCR_EN) != 0U)
   \                     ??HAL_DMA_Abort_14: (+1)
   \      0x2AE   0x6838             LDR      R0,[R7, #+0]
   \      0x2B0   0x07C0             LSLS     R0,R0,#+31
   \      0x2B2   0xD50E             BPL.N    ??HAL_DMA_Abort_15
    830              {
    831                /* Check for the Timeout */
    832                if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
   \      0x2B4   0x.... 0x....      BL       HAL_GetTick
   \      0x2B8   0x1B80             SUBS     R0,R0,R6
   \      0x2BA   0x2806             CMP      R0,#+6
   \      0x2BC   0xD3F7             BCC.N    ??HAL_DMA_Abort_14
    833                {
    834                  /* Update error code */
    835                  hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
   \      0x2BE   0x2020             MOVS     R0,#+32
   \      0x2C0   0x6560             STR      R0,[R4, #+84]
    836          
    837                  /* Change the DMA state */
    838                  hdma->State = HAL_DMA_STATE_ERROR;
   \      0x2C2   0x2003             MOVS     R0,#+3
   \      0x2C4   0xF884 0x0035      STRB     R0,[R4, #+53]
    839          
    840                  /* Process Unlocked */
    841                  __HAL_UNLOCK(hdma);
   \      0x2C8   0x2000             MOVS     R0,#+0
   \      0x2CA   0xF884 0x0034      STRB     R0,[R4, #+52]
    842          
    843                  return HAL_ERROR;
   \      0x2CE   0x2001             MOVS     R0,#+1
   \      0x2D0   0xE0E5             B.N      ??HAL_DMA_Abort_1
    844                }
    845              }
    846          
    847              /* Clear all interrupt flags at correct offset within the register */
    848              if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
   \                     ??HAL_DMA_Abort_15: (+1)
   \      0x2D2   0x6820             LDR      R0,[R4, #+0]
   \      0x2D4   0x42A8             CMP      R0,R5
   \      0x2D6   0xD045             BEQ.N    ??HAL_DMA_Abort_16
   \      0x2D8   0x6820             LDR      R0,[R4, #+0]
   \      0x2DA   0x.... 0x....      LDR.W    R1,??DataTable5_2
   \      0x2DE   0x4288             CMP      R0,R1
   \      0x2E0   0xD040             BEQ.N    ??HAL_DMA_Abort_16
   \      0x2E2   0x6820             LDR      R0,[R4, #+0]
   \      0x2E4   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \      0x2E8   0x4288             CMP      R0,R1
   \      0x2EA   0xD03B             BEQ.N    ??HAL_DMA_Abort_16
   \      0x2EC   0x6820             LDR      R0,[R4, #+0]
   \      0x2EE   0x.... 0x....      LDR.W    R1,??DataTable5_4
   \      0x2F2   0x4288             CMP      R0,R1
   \      0x2F4   0xD036             BEQ.N    ??HAL_DMA_Abort_16
   \      0x2F6   0x6820             LDR      R0,[R4, #+0]
   \      0x2F8   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \      0x2FC   0x4288             CMP      R0,R1
   \      0x2FE   0xD031             BEQ.N    ??HAL_DMA_Abort_16
   \      0x300   0x6820             LDR      R0,[R4, #+0]
   \      0x302   0x.... 0x....      LDR.W    R1,??DataTable5_6
   \      0x306   0x4288             CMP      R0,R1
   \      0x308   0xD02C             BEQ.N    ??HAL_DMA_Abort_16
   \      0x30A   0x6820             LDR      R0,[R4, #+0]
   \      0x30C   0x.... 0x....      LDR.W    R1,??DataTable5_7
   \      0x310   0x4288             CMP      R0,R1
   \      0x312   0xD027             BEQ.N    ??HAL_DMA_Abort_16
   \      0x314   0x6820             LDR      R0,[R4, #+0]
   \      0x316   0x.... 0x....      LDR.W    R1,??DataTable5_8
   \      0x31A   0x4288             CMP      R0,R1
   \      0x31C   0xD022             BEQ.N    ??HAL_DMA_Abort_16
   \      0x31E   0x6820             LDR      R0,[R4, #+0]
   \      0x320   0x.... 0x....      LDR.W    R1,??DataTable5_9
   \      0x324   0x4288             CMP      R0,R1
   \      0x326   0xD01D             BEQ.N    ??HAL_DMA_Abort_16
   \      0x328   0x6820             LDR      R0,[R4, #+0]
   \      0x32A   0x.... 0x....      LDR.W    R1,??DataTable5_10
   \      0x32E   0x4288             CMP      R0,R1
   \      0x330   0xD018             BEQ.N    ??HAL_DMA_Abort_16
   \      0x332   0x6820             LDR      R0,[R4, #+0]
   \      0x334   0x.... 0x....      LDR.W    R1,??DataTable5_11
   \      0x338   0x4288             CMP      R0,R1
   \      0x33A   0xD013             BEQ.N    ??HAL_DMA_Abort_16
   \      0x33C   0x6820             LDR      R0,[R4, #+0]
   \      0x33E   0x....             LDR.N    R1,??DataTable4
   \      0x340   0x4288             CMP      R0,R1
   \      0x342   0xD00F             BEQ.N    ??HAL_DMA_Abort_16
   \      0x344   0x6820             LDR      R0,[R4, #+0]
   \      0x346   0x....             LDR.N    R1,??DataTable4_1
   \      0x348   0x4288             CMP      R0,R1
   \      0x34A   0xD00B             BEQ.N    ??HAL_DMA_Abort_16
   \      0x34C   0x6820             LDR      R0,[R4, #+0]
   \      0x34E   0x....             LDR.N    R1,??DataTable4_2
   \      0x350   0x4288             CMP      R0,R1
   \      0x352   0xD007             BEQ.N    ??HAL_DMA_Abort_16
   \      0x354   0x6820             LDR      R0,[R4, #+0]
   \      0x356   0x....             LDR.N    R1,??DataTable4_3
   \      0x358   0x4288             CMP      R0,R1
   \      0x35A   0xD003             BEQ.N    ??HAL_DMA_Abort_16
   \      0x35C   0x6820             LDR      R0,[R4, #+0]
   \      0x35E   0x....             LDR.N    R1,??DataTable4_4
   \      0x360   0x4288             CMP      R0,R1
   \      0x362   0xD101             BNE.N    ??HAL_DMA_Abort_17
   \                     ??HAL_DMA_Abort_16: (+1)
   \      0x364   0x2001             MOVS     R0,#+1
   \      0x366   0xE000             B.N      ??HAL_DMA_Abort_18
   \                     ??HAL_DMA_Abort_17: (+1)
   \      0x368   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_Abort_18: (+1)
   \      0x36A   0xB2C0             UXTB     R0,R0
   \      0x36C   0x2800             CMP      R0,#+0
   \      0x36E   0xD008             BEQ.N    ??HAL_DMA_Abort_19
    849              {
    850                regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
   \      0x370   0x6DA0             LDR      R0,[R4, #+88]
    851                regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
   \      0x372   0x213F             MOVS     R1,#+63
   \      0x374   0xF894 0x205C      LDRB     R2,[R4, #+92]
   \      0x378   0xF012 0x021F      ANDS     R2,R2,#0x1F
   \      0x37C   0x4091             LSLS     R1,R1,R2
   \      0x37E   0x6081             STR      R1,[R0, #+8]
   \      0x380   0xE007             B.N      ??HAL_DMA_Abort_20
    852              }
    853              else /* BDMA channel */
    854              {
    855                regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
   \                     ??HAL_DMA_Abort_19: (+1)
   \      0x382   0x6DA0             LDR      R0,[R4, #+88]
    856                regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
   \      0x384   0x2101             MOVS     R1,#+1
   \      0x386   0xF894 0x205C      LDRB     R2,[R4, #+92]
   \      0x38A   0xF012 0x021F      ANDS     R2,R2,#0x1F
   \      0x38E   0x4091             LSLS     R1,R1,R2
   \      0x390   0x6041             STR      R1,[R0, #+4]
    857              }
    858          
    859              if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
   \                     ??HAL_DMA_Abort_20: (+1)
   \      0x392   0x6820             LDR      R0,[R4, #+0]
   \      0x394   0x42A8             CMP      R0,R5
   \      0x396   0xD066             BEQ.N    ??HAL_DMA_Abort_21
   \      0x398   0x6820             LDR      R0,[R4, #+0]
   \      0x39A   0x.... 0x....      LDR.W    R1,??DataTable5_2
   \      0x39E   0x4288             CMP      R0,R1
   \      0x3A0   0xD061             BEQ.N    ??HAL_DMA_Abort_21
   \      0x3A2   0x6820             LDR      R0,[R4, #+0]
   \      0x3A4   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \      0x3A8   0x4288             CMP      R0,R1
   \      0x3AA   0xD05C             BEQ.N    ??HAL_DMA_Abort_21
   \      0x3AC   0x6820             LDR      R0,[R4, #+0]
   \      0x3AE   0x.... 0x....      LDR.W    R1,??DataTable5_4
   \      0x3B2   0x4288             CMP      R0,R1
   \      0x3B4   0xD057             BEQ.N    ??HAL_DMA_Abort_21
   \      0x3B6   0x6820             LDR      R0,[R4, #+0]
   \      0x3B8   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \      0x3BC   0x4288             CMP      R0,R1
   \      0x3BE   0xD052             BEQ.N    ??HAL_DMA_Abort_21
   \      0x3C0   0x6820             LDR      R0,[R4, #+0]
   \      0x3C2   0x.... 0x....      LDR.W    R1,??DataTable5_6
   \      0x3C6   0x4288             CMP      R0,R1
   \      0x3C8   0xD04D             BEQ.N    ??HAL_DMA_Abort_21
   \      0x3CA   0x6820             LDR      R0,[R4, #+0]
   \      0x3CC   0x.... 0x....      LDR.W    R1,??DataTable5_7
   \      0x3D0   0x4288             CMP      R0,R1
   \      0x3D2   0xD048             BEQ.N    ??HAL_DMA_Abort_21
   \      0x3D4   0x6820             LDR      R0,[R4, #+0]
   \      0x3D6   0x.... 0x....      LDR.W    R1,??DataTable5_8
   \      0x3DA   0x4288             CMP      R0,R1
   \      0x3DC   0xD043             BEQ.N    ??HAL_DMA_Abort_21
   \      0x3DE   0x6820             LDR      R0,[R4, #+0]
   \      0x3E0   0x.... 0x....      LDR.W    R1,??DataTable5_9
   \      0x3E4   0x4288             CMP      R0,R1
   \      0x3E6   0xD03E             BEQ.N    ??HAL_DMA_Abort_21
   \      0x3E8   0x6820             LDR      R0,[R4, #+0]
   \      0x3EA   0x.... 0x....      LDR.W    R1,??DataTable5_10
   \      0x3EE   0x4288             CMP      R0,R1
   \      0x3F0   0xD039             BEQ.N    ??HAL_DMA_Abort_21
   \      0x3F2   0x6820             LDR      R0,[R4, #+0]
   \      0x3F4   0x.... 0x....      LDR.W    R1,??DataTable5_11
   \      0x3F8   0x4288             CMP      R0,R1
   \      0x3FA   0xD034             BEQ.N    ??HAL_DMA_Abort_21
   \      0x3FC   0x6820             LDR      R0,[R4, #+0]
   \      0x3FE   0x....             LDR.N    R1,??DataTable4
   \      0x400   0x4288             CMP      R0,R1
   \      0x402   0xD030             BEQ.N    ??HAL_DMA_Abort_21
   \      0x404   0x6820             LDR      R0,[R4, #+0]
   \      0x406   0x....             LDR.N    R1,??DataTable4_1
   \      0x408   0x4288             CMP      R0,R1
   \      0x40A   0xD02C             BEQ.N    ??HAL_DMA_Abort_21
   \      0x40C   0x6820             LDR      R0,[R4, #+0]
   \      0x40E   0x....             LDR.N    R1,??DataTable4_2
   \      0x410   0x4288             CMP      R0,R1
   \      0x412   0xD028             BEQ.N    ??HAL_DMA_Abort_21
   \      0x414   0x6820             LDR      R0,[R4, #+0]
   \      0x416   0x....             LDR.N    R1,??DataTable4_3
   \      0x418   0x4288             CMP      R0,R1
   \      0x41A   0xD024             BEQ.N    ??HAL_DMA_Abort_21
   \      0x41C   0x6820             LDR      R0,[R4, #+0]
   \      0x41E   0x....             LDR.N    R1,??DataTable4_4
   \      0x420   0x4288             CMP      R0,R1
   \      0x422   0xD020             BEQ.N    ??HAL_DMA_Abort_21
   \      0x424   0x6820             LDR      R0,[R4, #+0]
   \      0x426   0x....             LDR.N    R1,??DataTable4_5
   \      0x428   0x4288             CMP      R0,R1
   \      0x42A   0xD01C             BEQ.N    ??HAL_DMA_Abort_21
   \      0x42C   0x6820             LDR      R0,[R4, #+0]
   \      0x42E   0x....             LDR.N    R1,??DataTable4_6
   \      0x430   0x4288             CMP      R0,R1
   \      0x432   0xD018             BEQ.N    ??HAL_DMA_Abort_21
   \      0x434   0x6820             LDR      R0,[R4, #+0]
   \      0x436   0x....             LDR.N    R1,??DataTable4_7
   \      0x438   0x4288             CMP      R0,R1
   \      0x43A   0xD014             BEQ.N    ??HAL_DMA_Abort_21
   \      0x43C   0x6820             LDR      R0,[R4, #+0]
   \      0x43E   0x....             LDR.N    R1,??DataTable4_8
   \      0x440   0x4288             CMP      R0,R1
   \      0x442   0xD010             BEQ.N    ??HAL_DMA_Abort_21
   \      0x444   0x6820             LDR      R0,[R4, #+0]
   \      0x446   0x....             LDR.N    R1,??DataTable4_9
   \      0x448   0x4288             CMP      R0,R1
   \      0x44A   0xD00C             BEQ.N    ??HAL_DMA_Abort_21
   \      0x44C   0x6820             LDR      R0,[R4, #+0]
   \      0x44E   0x....             LDR.N    R1,??DataTable4_10
   \      0x450   0x4288             CMP      R0,R1
   \      0x452   0xD008             BEQ.N    ??HAL_DMA_Abort_21
   \      0x454   0x6820             LDR      R0,[R4, #+0]
   \      0x456   0x....             LDR.N    R1,??DataTable4_11
   \      0x458   0x4288             CMP      R0,R1
   \      0x45A   0xD004             BEQ.N    ??HAL_DMA_Abort_21
   \      0x45C   0x6820             LDR      R0,[R4, #+0]
   \      0x45E   0x.... 0x....      LDR.W    R1,??DataTable5
   \      0x462   0x4288             CMP      R0,R1
   \      0x464   0xD101             BNE.N    ??HAL_DMA_Abort_22
   \                     ??HAL_DMA_Abort_21: (+1)
   \      0x466   0x2001             MOVS     R0,#+1
   \      0x468   0xE000             B.N      ??HAL_DMA_Abort_23
   \                     ??HAL_DMA_Abort_22: (+1)
   \      0x46A   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_Abort_23: (+1)
   \      0x46C   0xB2C0             UXTB     R0,R0
   \      0x46E   0x2800             CMP      R0,#+0
   \      0x470   0xD00E             BEQ.N    ??HAL_DMA_Abort_24
    860              {
    861                /* Clear the DMAMUX synchro overrun flag */
    862                hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
   \      0x472   0x6EA0             LDR      R0,[R4, #+104]
   \      0x474   0x6E61             LDR      R1,[R4, #+100]
   \      0x476   0x6048             STR      R0,[R1, #+4]
    863          
    864                if(hdma->DMAmuxRequestGen != 0U)
   \      0x478   0x6EE0             LDR      R0,[R4, #+108]
   \      0x47A   0x2800             CMP      R0,#+0
   \      0x47C   0xD008             BEQ.N    ??HAL_DMA_Abort_24
    865                {
    866                  /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
    867                  /* disable the request gen overrun IT */
    868                  hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
   \      0x47E   0x6EE0             LDR      R0,[R4, #+108]
   \      0x480   0x6800             LDR      R0,[R0, #+0]
   \      0x482   0xF430 0x7080      BICS     R0,R0,#0x100
   \      0x486   0x6EE1             LDR      R1,[R4, #+108]
   \      0x488   0x6008             STR      R0,[R1, #+0]
    869          
    870                  /* Clear the DMAMUX request generator overrun flag */
    871                  hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
   \      0x48A   0x6F60             LDR      R0,[R4, #+116]
   \      0x48C   0x6F21             LDR      R1,[R4, #+112]
   \      0x48E   0x6048             STR      R0,[R1, #+4]
    872                }
    873              }
    874          
    875              /* Change the DMA state */
    876              hdma->State = HAL_DMA_STATE_READY;
   \                     ??HAL_DMA_Abort_24: (+1)
   \      0x490   0x2001             MOVS     R0,#+1
   \      0x492   0xF884 0x0035      STRB     R0,[R4, #+53]
    877          
    878              /* Process Unlocked */
    879              __HAL_UNLOCK(hdma);
   \      0x496   0x2000             MOVS     R0,#+0
   \      0x498   0xF884 0x0034      STRB     R0,[R4, #+52]
    880            }
    881          
    882            return HAL_OK;
   \      0x49C   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_Abort_1: (+1)
   \      0x49E   0xBDF2             POP      {R1,R4-R7,PC}
    883          }
    884          
    885          /**
    886            * @brief  Aborts the DMA Transfer in Interrupt mode.
    887            * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
    888            *                 the configuration information for the specified DMA Stream.
    889            * @retval HAL status
    890            */

   \                                 In section .text, align 2, keep-with-next
    891          HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
    892          {
   \                     HAL_DMA_Abort_IT: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    893            BDMA_Base_Registers *regs_bdma;
    894          
    895            /* Check the DMA peripheral handle */
    896            if(hdma == NULL)
   \        0x2   0x2800             CMP      R0,#+0
   \        0x4   0xD101             BNE.N    ??HAL_DMA_Abort_IT_0
    897            {
    898              return HAL_ERROR;
   \        0x6   0x2001             MOVS     R0,#+1
   \        0x8   0xE1A1             B.N      ??HAL_DMA_Abort_IT_1
    899            }
    900          
    901            if(hdma->State != HAL_DMA_STATE_BUSY)
   \                     ??HAL_DMA_Abort_IT_0: (+1)
   \        0xA   0xF890 0x1035      LDRB     R1,[R0, #+53]
   \        0xE   0x2902             CMP      R1,#+2
   \       0x10   0xD003             BEQ.N    ??HAL_DMA_Abort_IT_2
    902            {
    903              hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
   \       0x12   0x2180             MOVS     R1,#+128
   \       0x14   0x6541             STR      R1,[R0, #+84]
    904              return HAL_ERROR;
   \       0x16   0x2001             MOVS     R0,#+1
   \       0x18   0xE199             B.N      ??HAL_DMA_Abort_IT_1
    905            }
    906            else
    907            {
    908              if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
   \                     ??HAL_DMA_Abort_IT_2: (+1)
   \       0x1A   0x.... 0x....      LDR.W    R2,??DataTable5_1
   \       0x1E   0x6801             LDR      R1,[R0, #+0]
   \       0x20   0x4291             CMP      R1,R2
   \       0x22   0xD04A             BEQ.N    ??HAL_DMA_Abort_IT_3
   \       0x24   0x6801             LDR      R1,[R0, #+0]
   \       0x26   0x.... 0x....      LDR.W    R3,??DataTable5_2
   \       0x2A   0x4299             CMP      R1,R3
   \       0x2C   0xD045             BEQ.N    ??HAL_DMA_Abort_IT_3
   \       0x2E   0x6801             LDR      R1,[R0, #+0]
   \       0x30   0x.... 0x....      LDR.W    R3,??DataTable5_3
   \       0x34   0x4299             CMP      R1,R3
   \       0x36   0xD040             BEQ.N    ??HAL_DMA_Abort_IT_3
   \       0x38   0x6801             LDR      R1,[R0, #+0]
   \       0x3A   0x.... 0x....      LDR.W    R3,??DataTable5_4
   \       0x3E   0x4299             CMP      R1,R3
   \       0x40   0xD03B             BEQ.N    ??HAL_DMA_Abort_IT_3
   \       0x42   0x6801             LDR      R1,[R0, #+0]
   \       0x44   0x.... 0x....      LDR.W    R3,??DataTable5_5
   \       0x48   0x4299             CMP      R1,R3
   \       0x4A   0xD036             BEQ.N    ??HAL_DMA_Abort_IT_3
   \       0x4C   0x6801             LDR      R1,[R0, #+0]
   \       0x4E   0x.... 0x....      LDR.W    R3,??DataTable5_6
   \       0x52   0x4299             CMP      R1,R3
   \       0x54   0xD031             BEQ.N    ??HAL_DMA_Abort_IT_3
   \       0x56   0x6801             LDR      R1,[R0, #+0]
   \       0x58   0x.... 0x....      LDR.W    R3,??DataTable5_7
   \       0x5C   0x4299             CMP      R1,R3
   \       0x5E   0xD02C             BEQ.N    ??HAL_DMA_Abort_IT_3
   \       0x60   0x6801             LDR      R1,[R0, #+0]
   \       0x62   0x.... 0x....      LDR.W    R3,??DataTable5_8
   \       0x66   0x4299             CMP      R1,R3
   \       0x68   0xD027             BEQ.N    ??HAL_DMA_Abort_IT_3
   \       0x6A   0x6801             LDR      R1,[R0, #+0]
   \       0x6C   0x.... 0x....      LDR.W    R3,??DataTable5_9
   \       0x70   0x4299             CMP      R1,R3
   \       0x72   0xD022             BEQ.N    ??HAL_DMA_Abort_IT_3
   \       0x74   0x6801             LDR      R1,[R0, #+0]
   \       0x76   0x.... 0x....      LDR.W    R3,??DataTable5_10
   \       0x7A   0x4299             CMP      R1,R3
   \       0x7C   0xD01D             BEQ.N    ??HAL_DMA_Abort_IT_3
   \       0x7E   0x6801             LDR      R1,[R0, #+0]
   \       0x80   0x.... 0x....      LDR.W    R3,??DataTable5_11
   \       0x84   0x4299             CMP      R1,R3
   \       0x86   0xD018             BEQ.N    ??HAL_DMA_Abort_IT_3
   \       0x88   0x6801             LDR      R1,[R0, #+0]
   \       0x8A   0x.... 0x....      LDR.W    R3,??DataTable6
   \       0x8E   0x4299             CMP      R1,R3
   \       0x90   0xD013             BEQ.N    ??HAL_DMA_Abort_IT_3
   \       0x92   0x6801             LDR      R1,[R0, #+0]
   \       0x94   0x.... 0x....      LDR.W    R3,??DataTable6_1
   \       0x98   0x4299             CMP      R1,R3
   \       0x9A   0xD00E             BEQ.N    ??HAL_DMA_Abort_IT_3
   \       0x9C   0x6801             LDR      R1,[R0, #+0]
   \       0x9E   0x.... 0x....      LDR.W    R3,??DataTable6_2
   \       0xA2   0x4299             CMP      R1,R3
   \       0xA4   0xD009             BEQ.N    ??HAL_DMA_Abort_IT_3
   \       0xA6   0x6801             LDR      R1,[R0, #+0]
   \       0xA8   0x.... 0x....      LDR.W    R3,??DataTable6_3
   \       0xAC   0x4299             CMP      R1,R3
   \       0xAE   0xD004             BEQ.N    ??HAL_DMA_Abort_IT_3
   \       0xB0   0x6801             LDR      R1,[R0, #+0]
   \       0xB2   0x.... 0x....      LDR.W    R3,??DataTable5_12
   \       0xB6   0x4299             CMP      R1,R3
   \       0xB8   0xD101             BNE.N    ??HAL_DMA_Abort_IT_4
   \                     ??HAL_DMA_Abort_IT_3: (+1)
   \       0xBA   0x2101             MOVS     R1,#+1
   \       0xBC   0xE000             B.N      ??HAL_DMA_Abort_IT_5
   \                     ??HAL_DMA_Abort_IT_4: (+1)
   \       0xBE   0x2100             MOVS     R1,#+0
   \                     ??HAL_DMA_Abort_IT_5: (+1)
   \       0xC0   0xB2C9             UXTB     R1,R1
   \       0xC2   0x2900             CMP      R1,#+0
   \       0xC4   0xD053             BEQ.N    ??HAL_DMA_Abort_IT_6
    909              {
    910                /* Set Abort State  */
    911                hdma->State = HAL_DMA_STATE_ABORT;
   \       0xC6   0x2104             MOVS     R1,#+4
   \       0xC8   0xF880 0x1035      STRB     R1,[R0, #+53]
    912          
    913                /* Disable the stream */
    914                __HAL_DMA_DISABLE(hdma);
   \       0xCC   0x6801             LDR      R1,[R0, #+0]
   \       0xCE   0x4291             CMP      R1,R2
   \       0xD0   0xD03F             BEQ.N    ??HAL_DMA_Abort_IT_7
   \       0xD2   0x6801             LDR      R1,[R0, #+0]
   \       0xD4   0x....             LDR.N    R2,??DataTable5_2
   \       0xD6   0x4291             CMP      R1,R2
   \       0xD8   0xD03B             BEQ.N    ??HAL_DMA_Abort_IT_7
   \       0xDA   0x6801             LDR      R1,[R0, #+0]
   \       0xDC   0x....             LDR.N    R2,??DataTable5_3
   \       0xDE   0x4291             CMP      R1,R2
   \       0xE0   0xD037             BEQ.N    ??HAL_DMA_Abort_IT_7
   \       0xE2   0x6801             LDR      R1,[R0, #+0]
   \       0xE4   0x....             LDR.N    R2,??DataTable5_4
   \       0xE6   0x4291             CMP      R1,R2
   \       0xE8   0xD033             BEQ.N    ??HAL_DMA_Abort_IT_7
   \       0xEA   0x6801             LDR      R1,[R0, #+0]
   \       0xEC   0x....             LDR.N    R2,??DataTable5_5
   \       0xEE   0x4291             CMP      R1,R2
   \       0xF0   0xD02F             BEQ.N    ??HAL_DMA_Abort_IT_7
   \       0xF2   0x6801             LDR      R1,[R0, #+0]
   \       0xF4   0x....             LDR.N    R2,??DataTable5_6
   \       0xF6   0x4291             CMP      R1,R2
   \       0xF8   0xD02B             BEQ.N    ??HAL_DMA_Abort_IT_7
   \       0xFA   0x6801             LDR      R1,[R0, #+0]
   \       0xFC   0x....             LDR.N    R2,??DataTable5_7
   \       0xFE   0x4291             CMP      R1,R2
   \      0x100   0xD027             BEQ.N    ??HAL_DMA_Abort_IT_7
   \      0x102   0x6801             LDR      R1,[R0, #+0]
   \      0x104   0x....             LDR.N    R2,??DataTable5_8
   \      0x106   0x4291             CMP      R1,R2
   \      0x108   0xD023             BEQ.N    ??HAL_DMA_Abort_IT_7
   \      0x10A   0x6801             LDR      R1,[R0, #+0]
   \      0x10C   0x....             LDR.N    R2,??DataTable5_9
   \      0x10E   0x4291             CMP      R1,R2
   \      0x110   0xD01F             BEQ.N    ??HAL_DMA_Abort_IT_7
   \      0x112   0x6801             LDR      R1,[R0, #+0]
   \      0x114   0x....             LDR.N    R2,??DataTable5_10
   \      0x116   0x4291             CMP      R1,R2
   \      0x118   0xD01B             BEQ.N    ??HAL_DMA_Abort_IT_7
   \      0x11A   0x6801             LDR      R1,[R0, #+0]
   \      0x11C   0x....             LDR.N    R2,??DataTable5_11
   \      0x11E   0x4291             CMP      R1,R2
   \      0x120   0xD017             BEQ.N    ??HAL_DMA_Abort_IT_7
   \      0x122   0x6801             LDR      R1,[R0, #+0]
   \      0x124   0x.... 0x....      LDR.W    R2,??DataTable6
   \      0x128   0x4291             CMP      R1,R2
   \      0x12A   0xD012             BEQ.N    ??HAL_DMA_Abort_IT_7
   \      0x12C   0x6801             LDR      R1,[R0, #+0]
   \      0x12E   0x.... 0x....      LDR.W    R2,??DataTable6_1
   \      0x132   0x4291             CMP      R1,R2
   \      0x134   0xD00D             BEQ.N    ??HAL_DMA_Abort_IT_7
   \      0x136   0x6801             LDR      R1,[R0, #+0]
   \      0x138   0x.... 0x....      LDR.W    R2,??DataTable6_2
   \      0x13C   0x4291             CMP      R1,R2
   \      0x13E   0xD008             BEQ.N    ??HAL_DMA_Abort_IT_7
   \      0x140   0x6801             LDR      R1,[R0, #+0]
   \      0x142   0x.... 0x....      LDR.W    R2,??DataTable6_3
   \      0x146   0x4291             CMP      R1,R2
   \      0x148   0xD003             BEQ.N    ??HAL_DMA_Abort_IT_7
   \      0x14A   0x6801             LDR      R1,[R0, #+0]
   \      0x14C   0x....             LDR.N    R2,??DataTable5_12
   \      0x14E   0x4291             CMP      R1,R2
   \      0x150   0xD106             BNE.N    ??HAL_DMA_Abort_IT_8
   \                     ??HAL_DMA_Abort_IT_7: (+1)
   \      0x152   0x6801             LDR      R1,[R0, #+0]
   \      0x154   0x6809             LDR      R1,[R1, #+0]
   \      0x156   0x0849             LSRS     R1,R1,#+1
   \      0x158   0x0049             LSLS     R1,R1,#+1
   \      0x15A   0x6800             LDR      R0,[R0, #+0]
   \      0x15C   0x6001             STR      R1,[R0, #+0]
   \      0x15E   0xE0F5             B.N      ??HAL_DMA_Abort_IT_9
   \                     ??HAL_DMA_Abort_IT_8: (+1)
   \      0x160   0x6801             LDR      R1,[R0, #+0]
   \      0x162   0x6809             LDR      R1,[R1, #+0]
   \      0x164   0x0849             LSRS     R1,R1,#+1
   \      0x166   0x0049             LSLS     R1,R1,#+1
   \      0x168   0x6800             LDR      R0,[R0, #+0]
   \      0x16A   0x6001             STR      R1,[R0, #+0]
   \      0x16C   0xE0EE             B.N      ??HAL_DMA_Abort_IT_9
    915              }
    916              else /* BDMA channel */
    917              {
    918                /* Disable DMA All Interrupts  */
    919                ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
   \                     ??HAL_DMA_Abort_IT_6: (+1)
   \      0x16E   0x6801             LDR      R1,[R0, #+0]
   \      0x170   0x6809             LDR      R1,[R1, #+0]
   \      0x172   0xF031 0x010E      BICS     R1,R1,#0xE
   \      0x176   0x6803             LDR      R3,[R0, #+0]
   \      0x178   0x6019             STR      R1,[R3, #+0]
    920          
    921                /* Disable the channel */
    922                __HAL_DMA_DISABLE(hdma);
   \      0x17A   0x6801             LDR      R1,[R0, #+0]
   \      0x17C   0x4291             CMP      R1,R2
   \      0x17E   0xD03F             BEQ.N    ??HAL_DMA_Abort_IT_10
   \      0x180   0x6801             LDR      R1,[R0, #+0]
   \      0x182   0x....             LDR.N    R3,??DataTable5_2
   \      0x184   0x4299             CMP      R1,R3
   \      0x186   0xD03B             BEQ.N    ??HAL_DMA_Abort_IT_10
   \      0x188   0x6801             LDR      R1,[R0, #+0]
   \      0x18A   0x....             LDR.N    R3,??DataTable5_3
   \      0x18C   0x4299             CMP      R1,R3
   \      0x18E   0xD037             BEQ.N    ??HAL_DMA_Abort_IT_10
   \      0x190   0x6801             LDR      R1,[R0, #+0]
   \      0x192   0x....             LDR.N    R3,??DataTable5_4
   \      0x194   0x4299             CMP      R1,R3
   \      0x196   0xD033             BEQ.N    ??HAL_DMA_Abort_IT_10
   \      0x198   0x6801             LDR      R1,[R0, #+0]
   \      0x19A   0x....             LDR.N    R3,??DataTable5_5
   \      0x19C   0x4299             CMP      R1,R3
   \      0x19E   0xD02F             BEQ.N    ??HAL_DMA_Abort_IT_10
   \      0x1A0   0x6801             LDR      R1,[R0, #+0]
   \      0x1A2   0x....             LDR.N    R3,??DataTable5_6
   \      0x1A4   0x4299             CMP      R1,R3
   \      0x1A6   0xD02B             BEQ.N    ??HAL_DMA_Abort_IT_10
   \      0x1A8   0x6801             LDR      R1,[R0, #+0]
   \      0x1AA   0x....             LDR.N    R3,??DataTable5_7
   \      0x1AC   0x4299             CMP      R1,R3
   \      0x1AE   0xD027             BEQ.N    ??HAL_DMA_Abort_IT_10
   \      0x1B0   0x6801             LDR      R1,[R0, #+0]
   \      0x1B2   0x....             LDR.N    R3,??DataTable5_8
   \      0x1B4   0x4299             CMP      R1,R3
   \      0x1B6   0xD023             BEQ.N    ??HAL_DMA_Abort_IT_10
   \      0x1B8   0x6801             LDR      R1,[R0, #+0]
   \      0x1BA   0x....             LDR.N    R3,??DataTable5_9
   \      0x1BC   0x4299             CMP      R1,R3
   \      0x1BE   0xD01F             BEQ.N    ??HAL_DMA_Abort_IT_10
   \      0x1C0   0x6801             LDR      R1,[R0, #+0]
   \      0x1C2   0x....             LDR.N    R3,??DataTable5_10
   \      0x1C4   0x4299             CMP      R1,R3
   \      0x1C6   0xD01B             BEQ.N    ??HAL_DMA_Abort_IT_10
   \      0x1C8   0x6801             LDR      R1,[R0, #+0]
   \      0x1CA   0x....             LDR.N    R3,??DataTable5_11
   \      0x1CC   0x4299             CMP      R1,R3
   \      0x1CE   0xD017             BEQ.N    ??HAL_DMA_Abort_IT_10
   \      0x1D0   0x6801             LDR      R1,[R0, #+0]
   \      0x1D2   0x.... 0x....      LDR.W    R3,??DataTable6
   \      0x1D6   0x4299             CMP      R1,R3
   \      0x1D8   0xD012             BEQ.N    ??HAL_DMA_Abort_IT_10
   \      0x1DA   0x6801             LDR      R1,[R0, #+0]
   \      0x1DC   0x.... 0x....      LDR.W    R3,??DataTable6_1
   \      0x1E0   0x4299             CMP      R1,R3
   \      0x1E2   0xD00D             BEQ.N    ??HAL_DMA_Abort_IT_10
   \      0x1E4   0x6801             LDR      R1,[R0, #+0]
   \      0x1E6   0x.... 0x....      LDR.W    R3,??DataTable6_2
   \      0x1EA   0x4299             CMP      R1,R3
   \      0x1EC   0xD008             BEQ.N    ??HAL_DMA_Abort_IT_10
   \      0x1EE   0x6801             LDR      R1,[R0, #+0]
   \      0x1F0   0x.... 0x....      LDR.W    R3,??DataTable6_3
   \      0x1F4   0x4299             CMP      R1,R3
   \      0x1F6   0xD003             BEQ.N    ??HAL_DMA_Abort_IT_10
   \      0x1F8   0x6801             LDR      R1,[R0, #+0]
   \      0x1FA   0x....             LDR.N    R3,??DataTable5_12
   \      0x1FC   0x4299             CMP      R1,R3
   \      0x1FE   0xD106             BNE.N    ??HAL_DMA_Abort_IT_11
   \                     ??HAL_DMA_Abort_IT_10: (+1)
   \      0x200   0x6801             LDR      R1,[R0, #+0]
   \      0x202   0x6809             LDR      R1,[R1, #+0]
   \      0x204   0x0849             LSRS     R1,R1,#+1
   \      0x206   0x0049             LSLS     R1,R1,#+1
   \      0x208   0x6803             LDR      R3,[R0, #+0]
   \      0x20A   0x6019             STR      R1,[R3, #+0]
   \      0x20C   0xE005             B.N      ??HAL_DMA_Abort_IT_12
   \                     ??HAL_DMA_Abort_IT_11: (+1)
   \      0x20E   0x6801             LDR      R1,[R0, #+0]
   \      0x210   0x6809             LDR      R1,[R1, #+0]
   \      0x212   0x0849             LSRS     R1,R1,#+1
   \      0x214   0x0049             LSLS     R1,R1,#+1
   \      0x216   0x6803             LDR      R3,[R0, #+0]
   \      0x218   0x6019             STR      R1,[R3, #+0]
    923          
    924                if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
   \                     ??HAL_DMA_Abort_IT_12: (+1)
   \      0x21A   0x6801             LDR      R1,[R0, #+0]
   \      0x21C   0x4291             CMP      R1,R2
   \      0x21E   0xD067             BEQ.N    ??HAL_DMA_Abort_IT_13
   \      0x220   0x6801             LDR      R1,[R0, #+0]
   \      0x222   0x....             LDR.N    R2,??DataTable5_2
   \      0x224   0x4291             CMP      R1,R2
   \      0x226   0xD063             BEQ.N    ??HAL_DMA_Abort_IT_13
   \      0x228   0x6801             LDR      R1,[R0, #+0]
   \      0x22A   0x....             LDR.N    R2,??DataTable5_3
   \      0x22C   0x4291             CMP      R1,R2
   \      0x22E   0xD05F             BEQ.N    ??HAL_DMA_Abort_IT_13
   \      0x230   0x6801             LDR      R1,[R0, #+0]
   \      0x232   0x....             LDR.N    R2,??DataTable5_4
   \      0x234   0x4291             CMP      R1,R2
   \      0x236   0xD05B             BEQ.N    ??HAL_DMA_Abort_IT_13
   \      0x238   0x6801             LDR      R1,[R0, #+0]
   \      0x23A   0x....             LDR.N    R2,??DataTable5_5
   \      0x23C   0x4291             CMP      R1,R2
   \      0x23E   0xD057             BEQ.N    ??HAL_DMA_Abort_IT_13
   \      0x240   0x6801             LDR      R1,[R0, #+0]
   \      0x242   0x....             LDR.N    R2,??DataTable5_6
   \      0x244   0x4291             CMP      R1,R2
   \      0x246   0xD053             BEQ.N    ??HAL_DMA_Abort_IT_13
   \      0x248   0x6801             LDR      R1,[R0, #+0]
   \      0x24A   0x....             LDR.N    R2,??DataTable5_7
   \      0x24C   0x4291             CMP      R1,R2
   \      0x24E   0xD04F             BEQ.N    ??HAL_DMA_Abort_IT_13
   \      0x250   0x6801             LDR      R1,[R0, #+0]
   \      0x252   0x....             LDR.N    R2,??DataTable5_8
   \      0x254   0x4291             CMP      R1,R2
   \      0x256   0xD04B             BEQ.N    ??HAL_DMA_Abort_IT_13
   \      0x258   0x6801             LDR      R1,[R0, #+0]
   \      0x25A   0x....             LDR.N    R2,??DataTable5_9
   \      0x25C   0x4291             CMP      R1,R2
   \      0x25E   0xD047             BEQ.N    ??HAL_DMA_Abort_IT_13
   \      0x260   0x6801             LDR      R1,[R0, #+0]
   \      0x262   0x....             LDR.N    R2,??DataTable5_10
   \      0x264   0x4291             CMP      R1,R2
   \      0x266   0xD043             BEQ.N    ??HAL_DMA_Abort_IT_13
   \      0x268   0x6801             LDR      R1,[R0, #+0]
   \      0x26A   0x....             LDR.N    R2,??DataTable5_11
   \      0x26C   0x4291             CMP      R1,R2
   \      0x26E   0xD03F             BEQ.N    ??HAL_DMA_Abort_IT_13
   \      0x270   0x6801             LDR      R1,[R0, #+0]
   \      0x272   0x.... 0x....      LDR.W    R2,??DataTable6
   \      0x276   0x4291             CMP      R1,R2
   \      0x278   0xD03A             BEQ.N    ??HAL_DMA_Abort_IT_13
   \      0x27A   0x6801             LDR      R1,[R0, #+0]
   \      0x27C   0x.... 0x....      LDR.W    R2,??DataTable6_1
   \      0x280   0x4291             CMP      R1,R2
   \      0x282   0xD035             BEQ.N    ??HAL_DMA_Abort_IT_13
   \      0x284   0x6801             LDR      R1,[R0, #+0]
   \      0x286   0x.... 0x....      LDR.W    R2,??DataTable6_2
   \      0x28A   0x4291             CMP      R1,R2
   \      0x28C   0xD030             BEQ.N    ??HAL_DMA_Abort_IT_13
   \      0x28E   0x6801             LDR      R1,[R0, #+0]
   \      0x290   0x.... 0x....      LDR.W    R2,??DataTable6_3
   \      0x294   0x4291             CMP      R1,R2
   \      0x296   0xD02B             BEQ.N    ??HAL_DMA_Abort_IT_13
   \      0x298   0x6801             LDR      R1,[R0, #+0]
   \      0x29A   0x....             LDR.N    R2,??DataTable5_12
   \      0x29C   0x4291             CMP      R1,R2
   \      0x29E   0xD027             BEQ.N    ??HAL_DMA_Abort_IT_13
   \      0x2A0   0x6801             LDR      R1,[R0, #+0]
   \      0x2A2   0x.... 0x....      LDR.W    R2,??DataTable6_4
   \      0x2A6   0x4291             CMP      R1,R2
   \      0x2A8   0xD022             BEQ.N    ??HAL_DMA_Abort_IT_13
   \      0x2AA   0x6801             LDR      R1,[R0, #+0]
   \      0x2AC   0x.... 0x....      LDR.W    R2,??DataTable6_5
   \      0x2B0   0x4291             CMP      R1,R2
   \      0x2B2   0xD01D             BEQ.N    ??HAL_DMA_Abort_IT_13
   \      0x2B4   0x6801             LDR      R1,[R0, #+0]
   \      0x2B6   0x.... 0x....      LDR.W    R2,??DataTable6_6
   \      0x2BA   0x4291             CMP      R1,R2
   \      0x2BC   0xD018             BEQ.N    ??HAL_DMA_Abort_IT_13
   \      0x2BE   0x6801             LDR      R1,[R0, #+0]
   \      0x2C0   0x.... 0x....      LDR.W    R2,??DataTable6_7
   \      0x2C4   0x4291             CMP      R1,R2
   \      0x2C6   0xD013             BEQ.N    ??HAL_DMA_Abort_IT_13
   \      0x2C8   0x6801             LDR      R1,[R0, #+0]
   \      0x2CA   0x.... 0x....      LDR.W    R2,??DataTable6_8
   \      0x2CE   0x4291             CMP      R1,R2
   \      0x2D0   0xD00E             BEQ.N    ??HAL_DMA_Abort_IT_13
   \      0x2D2   0x6801             LDR      R1,[R0, #+0]
   \      0x2D4   0x.... 0x....      LDR.W    R2,??DataTable6_9
   \      0x2D8   0x4291             CMP      R1,R2
   \      0x2DA   0xD009             BEQ.N    ??HAL_DMA_Abort_IT_13
   \      0x2DC   0x6801             LDR      R1,[R0, #+0]
   \      0x2DE   0x.... 0x....      LDR.W    R2,??DataTable6_10
   \      0x2E2   0x4291             CMP      R1,R2
   \      0x2E4   0xD004             BEQ.N    ??HAL_DMA_Abort_IT_13
   \      0x2E6   0x6801             LDR      R1,[R0, #+0]
   \      0x2E8   0x.... 0x....      LDR.W    R2,??DataTable6_11
   \      0x2EC   0x4291             CMP      R1,R2
   \      0x2EE   0xD101             BNE.N    ??HAL_DMA_Abort_IT_14
   \                     ??HAL_DMA_Abort_IT_13: (+1)
   \      0x2F0   0x2101             MOVS     R1,#+1
   \      0x2F2   0xE000             B.N      ??HAL_DMA_Abort_IT_15
   \                     ??HAL_DMA_Abort_IT_14: (+1)
   \      0x2F4   0x2100             MOVS     R1,#+0
   \                     ??HAL_DMA_Abort_IT_15: (+1)
   \      0x2F6   0xB2C9             UXTB     R1,R1
   \      0x2F8   0x2900             CMP      R1,#+0
   \      0x2FA   0xD01C             BEQ.N    ??HAL_DMA_Abort_IT_16
    925                {
    926                  /* disable the DMAMUX sync overrun IT */
    927                  hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
   \      0x2FC   0x6E01             LDR      R1,[R0, #+96]
   \      0x2FE   0x6809             LDR      R1,[R1, #+0]
   \      0x300   0xF431 0x7180      BICS     R1,R1,#0x100
   \      0x304   0x6E02             LDR      R2,[R0, #+96]
   \      0x306   0x6011             STR      R1,[R2, #+0]
    928          
    929                  /* Clear all flags */
    930                  regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
   \      0x308   0x6D81             LDR      R1,[R0, #+88]
    931                  regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
   \      0x30A   0x2201             MOVS     R2,#+1
   \      0x30C   0xF890 0x305C      LDRB     R3,[R0, #+92]
   \      0x310   0xF013 0x031F      ANDS     R3,R3,#0x1F
   \      0x314   0x409A             LSLS     R2,R2,R3
   \      0x316   0x604A             STR      R2,[R1, #+4]
    932          
    933                  /* Clear the DMAMUX synchro overrun flag */
    934                  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
   \      0x318   0x6E81             LDR      R1,[R0, #+104]
   \      0x31A   0x6E42             LDR      R2,[R0, #+100]
   \      0x31C   0x6051             STR      R1,[R2, #+4]
    935          
    936                  if(hdma->DMAmuxRequestGen != 0U)
   \      0x31E   0x6EC1             LDR      R1,[R0, #+108]
   \      0x320   0x2900             CMP      R1,#+0
   \      0x322   0xD008             BEQ.N    ??HAL_DMA_Abort_IT_16
    937                  {
    938                    /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
    939                    /* disable the request gen overrun IT */
    940                    hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
   \      0x324   0x6EC1             LDR      R1,[R0, #+108]
   \      0x326   0x6809             LDR      R1,[R1, #+0]
   \      0x328   0xF431 0x7180      BICS     R1,R1,#0x100
   \      0x32C   0x6EC2             LDR      R2,[R0, #+108]
   \      0x32E   0x6011             STR      R1,[R2, #+0]
    941          
    942                    /* Clear the DMAMUX request generator overrun flag */
    943                    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
   \      0x330   0x6F41             LDR      R1,[R0, #+116]
   \      0x332   0x6F02             LDR      R2,[R0, #+112]
   \      0x334   0x6051             STR      R1,[R2, #+4]
    944                  }
    945                }
    946          
    947                /* Change the DMA state */
    948                hdma->State = HAL_DMA_STATE_READY;
   \                     ??HAL_DMA_Abort_IT_16: (+1)
   \      0x336   0x2101             MOVS     R1,#+1
   \      0x338   0xF880 0x1035      STRB     R1,[R0, #+53]
    949          
    950                /* Process Unlocked */
    951                __HAL_UNLOCK(hdma);
   \      0x33C   0x2100             MOVS     R1,#+0
   \      0x33E   0xF880 0x1034      STRB     R1,[R0, #+52]
    952          
    953                /* Call User Abort callback */
    954                if(hdma->XferAbortCallback != NULL)
   \      0x342   0x6D01             LDR      R1,[R0, #+80]
   \      0x344   0x2900             CMP      R1,#+0
   \      0x346   0xD001             BEQ.N    ??HAL_DMA_Abort_IT_9
    955                {
    956                  hdma->XferAbortCallback(hdma);
   \      0x348   0x6D01             LDR      R1,[R0, #+80]
   \      0x34A   0x4788             BLX      R1
    957                }
    958              }
    959            }
    960          
    961            return HAL_OK;
   \                     ??HAL_DMA_Abort_IT_9: (+1)
   \      0x34C   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_Abort_IT_1: (+1)
   \      0x34E   0xBD02             POP      {R1,PC}
    962          }
    963          
    964          /**
    965            * @brief  Polling for transfer complete.
    966            * @param  hdma:          pointer to a DMA_HandleTypeDef structure that contains
    967            *                        the configuration information for the specified DMA Stream.
    968            * @param  CompleteLevel: Specifies the DMA level complete.
    969            * @note   The polling mode is kept in this version for legacy. it is recommended to use the IT model instead.
    970            *         This model could be used for debug purpose.
    971            * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode).
    972            * @param  Timeout:       Timeout duration.
    973            * @retval HAL status
    974            */

   \                                 In section .text, align 2, keep-with-next
    975          HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
    976          {
   \                     HAL_DMA_PollForTransfer: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
   \        0x8   0x0017             MOVS     R7,R2
    977            HAL_StatusTypeDef status = HAL_OK;
   \        0xA   0x2600             MOVS     R6,#+0
    978            uint32_t cpltlevel_mask;
    979            uint32_t tickstart = HAL_GetTick();
   \        0xC   0x.... 0x....      BL       HAL_GetTick
   \       0x10   0x4680             MOV      R8,R0
    980          
    981            /* IT status register */
    982            __IO uint32_t *isr_reg;
    983            /* IT clear flag register */
    984            __IO uint32_t *ifcr_reg;
    985          
    986            /* Check the DMA peripheral handle */
    987            if(hdma == NULL)
   \       0x12   0x2C00             CMP      R4,#+0
   \       0x14   0xD101             BNE.N    ??HAL_DMA_PollForTransfer_0
    988            {
    989              return HAL_ERROR;
   \       0x16   0x2001             MOVS     R0,#+1
   \       0x18   0xE2BC             B.N      ??HAL_DMA_PollForTransfer_1
    990            }
    991          
    992            if(HAL_DMA_STATE_BUSY != hdma->State)
   \                     ??HAL_DMA_PollForTransfer_0: (+1)
   \       0x1A   0xF894 0x0035      LDRB     R0,[R4, #+53]
   \       0x1E   0x2802             CMP      R0,#+2
   \       0x20   0xD006             BEQ.N    ??HAL_DMA_PollForTransfer_2
    993            {
    994              /* No transfer ongoing */
    995              hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
   \       0x22   0x2080             MOVS     R0,#+128
   \       0x24   0x6560             STR      R0,[R4, #+84]
    996              __HAL_UNLOCK(hdma);
   \       0x26   0x2000             MOVS     R0,#+0
   \       0x28   0xF884 0x0034      STRB     R0,[R4, #+52]
    997          
    998              return HAL_ERROR;
   \       0x2C   0x2001             MOVS     R0,#+1
   \       0x2E   0xE2B1             B.N      ??HAL_DMA_PollForTransfer_1
    999            }
   1000          
   1001            if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
   \                     ??HAL_DMA_PollForTransfer_2: (+1)
   \       0x30   0x.... 0x....      LDR.W    R11,??DataTable6_12
   \       0x34   0x6820             LDR      R0,[R4, #+0]
   \       0x36   0x4558             CMP      R0,R11
   \       0x38   0xD04A             BEQ.N    ??HAL_DMA_PollForTransfer_3
   \       0x3A   0x6820             LDR      R0,[R4, #+0]
   \       0x3C   0x.... 0x....      LDR.W    R1,??DataTable6_13
   \       0x40   0x4288             CMP      R0,R1
   \       0x42   0xD045             BEQ.N    ??HAL_DMA_PollForTransfer_3
   \       0x44   0x6820             LDR      R0,[R4, #+0]
   \       0x46   0x.... 0x....      LDR.W    R1,??DataTable6_14
   \       0x4A   0x4288             CMP      R0,R1
   \       0x4C   0xD040             BEQ.N    ??HAL_DMA_PollForTransfer_3
   \       0x4E   0x6820             LDR      R0,[R4, #+0]
   \       0x50   0x.... 0x....      LDR.W    R1,??DataTable6_15
   \       0x54   0x4288             CMP      R0,R1
   \       0x56   0xD03B             BEQ.N    ??HAL_DMA_PollForTransfer_3
   \       0x58   0x6820             LDR      R0,[R4, #+0]
   \       0x5A   0x.... 0x....      LDR.W    R1,??DataTable6_16
   \       0x5E   0x4288             CMP      R0,R1
   \       0x60   0xD036             BEQ.N    ??HAL_DMA_PollForTransfer_3
   \       0x62   0x6820             LDR      R0,[R4, #+0]
   \       0x64   0x.... 0x....      LDR.W    R1,??DataTable6_17
   \       0x68   0x4288             CMP      R0,R1
   \       0x6A   0xD031             BEQ.N    ??HAL_DMA_PollForTransfer_3
   \       0x6C   0x6820             LDR      R0,[R4, #+0]
   \       0x6E   0x.... 0x....      LDR.W    R1,??DataTable6_18
   \       0x72   0x4288             CMP      R0,R1
   \       0x74   0xD02C             BEQ.N    ??HAL_DMA_PollForTransfer_3
   \       0x76   0x6820             LDR      R0,[R4, #+0]
   \       0x78   0x.... 0x....      LDR.W    R1,??DataTable6_19
   \       0x7C   0x4288             CMP      R0,R1
   \       0x7E   0xD027             BEQ.N    ??HAL_DMA_PollForTransfer_3
   \       0x80   0x6820             LDR      R0,[R4, #+0]
   \       0x82   0x.... 0x....      LDR.W    R1,??DataTable6_20
   \       0x86   0x4288             CMP      R0,R1
   \       0x88   0xD022             BEQ.N    ??HAL_DMA_PollForTransfer_3
   \       0x8A   0x6820             LDR      R0,[R4, #+0]
   \       0x8C   0x.... 0x....      LDR.W    R1,??DataTable6_21
   \       0x90   0x4288             CMP      R0,R1
   \       0x92   0xD01D             BEQ.N    ??HAL_DMA_PollForTransfer_3
   \       0x94   0x6820             LDR      R0,[R4, #+0]
   \       0x96   0x.... 0x....      LDR.W    R1,??DataTable6_22
   \       0x9A   0x4288             CMP      R0,R1
   \       0x9C   0xD018             BEQ.N    ??HAL_DMA_PollForTransfer_3
   \       0x9E   0x6820             LDR      R0,[R4, #+0]
   \       0xA0   0x.... 0x....      LDR.W    R1,??DataTable6
   \       0xA4   0x4288             CMP      R0,R1
   \       0xA6   0xD013             BEQ.N    ??HAL_DMA_PollForTransfer_3
   \       0xA8   0x6820             LDR      R0,[R4, #+0]
   \       0xAA   0x.... 0x....      LDR.W    R1,??DataTable6_1
   \       0xAE   0x4288             CMP      R0,R1
   \       0xB0   0xD00E             BEQ.N    ??HAL_DMA_PollForTransfer_3
   \       0xB2   0x6820             LDR      R0,[R4, #+0]
   \       0xB4   0x.... 0x....      LDR.W    R1,??DataTable6_2
   \       0xB8   0x4288             CMP      R0,R1
   \       0xBA   0xD009             BEQ.N    ??HAL_DMA_PollForTransfer_3
   \       0xBC   0x6820             LDR      R0,[R4, #+0]
   \       0xBE   0x.... 0x....      LDR.W    R1,??DataTable6_3
   \       0xC2   0x4288             CMP      R0,R1
   \       0xC4   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_3
   \       0xC6   0x6820             LDR      R0,[R4, #+0]
   \       0xC8   0x.... 0x....      LDR.W    R1,??DataTable6_23
   \       0xCC   0x4288             CMP      R0,R1
   \       0xCE   0xD101             BNE.N    ??HAL_DMA_PollForTransfer_4
   \                     ??HAL_DMA_PollForTransfer_3: (+1)
   \       0xD0   0x2001             MOVS     R0,#+1
   \       0xD2   0xE000             B.N      ??HAL_DMA_PollForTransfer_5
   \                     ??HAL_DMA_PollForTransfer_4: (+1)
   \       0xD4   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_PollForTransfer_5: (+1)
   \       0xD6   0x9700             STR      R7,[SP, #+0]
   \       0xD8   0xB2C0             UXTB     R0,R0
   \       0xDA   0x2800             CMP      R0,#+0
   \       0xDC   0xD021             BEQ.N    ??HAL_DMA_PollForTransfer_6
   1002            {
   1003              /* Polling mode not supported in circular mode and double buffering mode */
   1004              if ((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) != 0U)
   \       0xDE   0x6820             LDR      R0,[R4, #+0]
   \       0xE0   0x6800             LDR      R0,[R0, #+0]
   \       0xE2   0x05C0             LSLS     R0,R0,#+23
   \       0xE4   0xD504             BPL.N    ??HAL_DMA_PollForTransfer_7
   1005              {
   1006                hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
   \       0xE6   0xF44F 0x7080      MOV      R0,#+256
   \       0xEA   0x6560             STR      R0,[R4, #+84]
   1007                return HAL_ERROR;
   \       0xEC   0x2001             MOVS     R0,#+1
   \       0xEE   0xE251             B.N      ??HAL_DMA_PollForTransfer_1
   1008              }
   1009          
   1010              /* Get the level transfer complete flag */
   1011              if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
   \                     ??HAL_DMA_PollForTransfer_7: (+1)
   \       0xF0   0x0028             MOVS     R0,R5
   \       0xF2   0xB2C0             UXTB     R0,R0
   \       0xF4   0x2800             CMP      R0,#+0
   \       0xF6   0xD107             BNE.N    ??HAL_DMA_PollForTransfer_8
   1012              {
   1013                /* Transfer Complete flag */
   1014                cpltlevel_mask = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
   \       0xF8   0x2020             MOVS     R0,#+32
   \       0xFA   0xF894 0x705C      LDRB     R7,[R4, #+92]
   \       0xFE   0xF017 0x071F      ANDS     R7,R7,#0x1F
   \      0x102   0xFA10 0xF707      LSLS     R7,R0,R7
   \      0x106   0xE006             B.N      ??HAL_DMA_PollForTransfer_9
   1015              }
   1016              else
   1017              {
   1018                /* Half Transfer Complete flag */
   1019                cpltlevel_mask = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
   \                     ??HAL_DMA_PollForTransfer_8: (+1)
   \      0x108   0x2010             MOVS     R0,#+16
   \      0x10A   0xF894 0x705C      LDRB     R7,[R4, #+92]
   \      0x10E   0xF017 0x071F      ANDS     R7,R7,#0x1F
   \      0x112   0xFA10 0xF707      LSLS     R7,R0,R7
   1020              }
   1021          
   1022              isr_reg  = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
   \                     ??HAL_DMA_PollForTransfer_9: (+1)
   \      0x116   0xF8D4 0x9058      LDR      R9,[R4, #+88]
   1023              ifcr_reg = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
   \      0x11A   0x6DA0             LDR      R0,[R4, #+88]
   \      0x11C   0xF110 0x0A08      ADDS     R10,R0,#+8
   \      0x120   0xE121             B.N      ??HAL_DMA_PollForTransfer_10
   1024            }
   1025            else /* BDMA channel */
   1026            {
   1027              /* Polling mode not supported in circular mode */
   1028              if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
   \                     ??HAL_DMA_PollForTransfer_6: (+1)
   \      0x122   0x6820             LDR      R0,[R4, #+0]
   \      0x124   0x6800             LDR      R0,[R0, #+0]
   \      0x126   0x0680             LSLS     R0,R0,#+26
   \      0x128   0xD504             BPL.N    ??HAL_DMA_PollForTransfer_11
   1029              {
   1030                hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
   \      0x12A   0xF44F 0x7080      MOV      R0,#+256
   \      0x12E   0x6560             STR      R0,[R4, #+84]
   1031                return HAL_ERROR;
   \      0x130   0x2001             MOVS     R0,#+1
   \      0x132   0xE22F             B.N      ??HAL_DMA_PollForTransfer_1
   1032              }
   1033          
   1034              /* Get the level transfer complete flag */
   1035              if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
   \                     ??HAL_DMA_PollForTransfer_11: (+1)
   \      0x134   0x0028             MOVS     R0,R5
   \      0x136   0xB2C0             UXTB     R0,R0
   \      0x138   0x2800             CMP      R0,#+0
   \      0x13A   0xD107             BNE.N    ??HAL_DMA_PollForTransfer_12
   1036              {
   1037                /* Transfer Complete flag */
   1038                cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
   \      0x13C   0x2002             MOVS     R0,#+2
   \      0x13E   0xF894 0x705C      LDRB     R7,[R4, #+92]
   \      0x142   0xF017 0x071F      ANDS     R7,R7,#0x1F
   \      0x146   0xFA10 0xF707      LSLS     R7,R0,R7
   \      0x14A   0xE006             B.N      ??HAL_DMA_PollForTransfer_13
   1039              }
   1040              else
   1041              {
   1042                /* Half Transfer Complete flag */
   1043                cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
   \                     ??HAL_DMA_PollForTransfer_12: (+1)
   \      0x14C   0x2004             MOVS     R0,#+4
   \      0x14E   0xF894 0x705C      LDRB     R7,[R4, #+92]
   \      0x152   0xF017 0x071F      ANDS     R7,R7,#0x1F
   \      0x156   0xFA10 0xF707      LSLS     R7,R0,R7
   1044              }
   1045          
   1046              isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
   \                     ??HAL_DMA_PollForTransfer_13: (+1)
   \      0x15A   0xF8D4 0x9058      LDR      R9,[R4, #+88]
   1047              ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
   \      0x15E   0x6DA0             LDR      R0,[R4, #+88]
   \      0x160   0xF110 0x0A04      ADDS     R10,R0,#+4
   \      0x164   0xE0FF             B.N      ??HAL_DMA_PollForTransfer_10
   1048            }
   1049          
   1050            while(((*isr_reg) & cpltlevel_mask) == 0U)
   1051            {
   1052              if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
   1053              {
   1054                if(((*isr_reg) & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
   1055                {
   1056                  /* Update error code */
   1057                  hdma->ErrorCode |= HAL_DMA_ERROR_FE;
   1058          
   1059                  /* Clear the FIFO error flag */
   1060                  (*ifcr_reg) = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
   1061                }
   1062          
   1063                if(((*isr_reg) & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
   1064                {
   1065                  /* Update error code */
   1066                  hdma->ErrorCode |= HAL_DMA_ERROR_DME;
   1067          
   1068                  /* Clear the Direct Mode error flag */
   1069                  (*ifcr_reg) = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
   1070                }
   1071          
   1072                if(((*isr_reg) & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
   1073                {
   1074                  /* Update error code */
   1075                  hdma->ErrorCode |= HAL_DMA_ERROR_TE;
   1076          
   1077                  /* Clear the transfer error flag */
   1078                  (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
   1079          
   1080                  /* Change the DMA state */
   1081                  hdma->State = HAL_DMA_STATE_READY;
   1082          
   1083                  /* Process Unlocked */
   1084                  __HAL_UNLOCK(hdma);
   1085          
   1086                  return HAL_ERROR;
   1087                }
   1088              }
   1089              else /* BDMA channel */
   1090              {
   1091                if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
   1092                {
   1093                  /* When a DMA transfer error occurs */
   1094                  /* A hardware clear of its EN bits is performed */
   1095                  /* Clear all flags */
   1096                  (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
   1097          
   1098                  /* Update error code */
   1099                  hdma->ErrorCode = HAL_DMA_ERROR_TE;
   1100          
   1101                  /* Change the DMA state */
   1102                  hdma->State = HAL_DMA_STATE_READY;
   1103          
   1104                  /* Process Unlocked */
   1105                  __HAL_UNLOCK(hdma);
   1106          
   1107                  return HAL_ERROR;
   1108                }
   1109              }
   1110          
   1111              /* Check for the Timeout (Not applicable in circular mode)*/
   1112              if(Timeout != HAL_MAX_DELAY)
   1113              {
   1114                if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
   1115                {
   1116                  /* Update error code */
   1117                  hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
   1118          
   1119                  /* if timeout then abort the current transfer */
   1120                  /* No need to check return value: as in this case we will return HAL_ERROR with HAL_DMA_ERROR_TIMEOUT error code  */
   1121                  (void) HAL_DMA_Abort(hdma);
   1122                    /*
   1123                      Note that the Abort function will
   1124                        - Clear the transfer error flags
   1125                        - Unlock
   1126                        - Set the State
   1127                    */
   1128          
   1129                  return HAL_ERROR;
   1130                }
   1131              }
   1132          
   1133              if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
   \                     ??HAL_DMA_PollForTransfer_14: (+1)
   \      0x166   0x2000             MOVS     R0,#+0
   \      0x168   0xE0DF             B.N      ??HAL_DMA_PollForTransfer_15
   \                     ??HAL_DMA_PollForTransfer_16: (+1)
   \      0x16A   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_PollForTransfer_17: (+1)
   \      0x16C   0xB2C0             UXTB     R0,R0
   \      0x16E   0x2800             CMP      R0,#+0
   \      0x170   0xD048             BEQ.N    ??HAL_DMA_PollForTransfer_18
   \      0x172   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x176   0xF894 0x105C      LDRB     R1,[R4, #+92]
   \      0x17A   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \      0x17E   0x40C8             LSRS     R0,R0,R1
   \      0x180   0x07C0             LSLS     R0,R0,#+31
   \      0x182   0xD50B             BPL.N    ??HAL_DMA_PollForTransfer_19
   \      0x184   0x6D60             LDR      R0,[R4, #+84]
   \      0x186   0xF050 0x0002      ORRS     R0,R0,#0x2
   \      0x18A   0x6560             STR      R0,[R4, #+84]
   \      0x18C   0x2001             MOVS     R0,#+1
   \      0x18E   0xF894 0x105C      LDRB     R1,[R4, #+92]
   \      0x192   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \      0x196   0x4088             LSLS     R0,R0,R1
   \      0x198   0xF8CA 0x0000      STR      R0,[R10, #+0]
   \                     ??HAL_DMA_PollForTransfer_19: (+1)
   \      0x19C   0x2004             MOVS     R0,#+4
   \      0x19E   0xF8D9 0x1000      LDR      R1,[R9, #+0]
   \      0x1A2   0xF894 0x205C      LDRB     R2,[R4, #+92]
   \      0x1A6   0xF012 0x021F      ANDS     R2,R2,#0x1F
   \      0x1AA   0xFA10 0xF202      LSLS     R2,R0,R2
   \      0x1AE   0x4211             TST      R1,R2
   \      0x1B0   0xD00A             BEQ.N    ??HAL_DMA_PollForTransfer_20
   \      0x1B2   0x6D61             LDR      R1,[R4, #+84]
   \      0x1B4   0xF051 0x0104      ORRS     R1,R1,#0x4
   \      0x1B8   0x6561             STR      R1,[R4, #+84]
   \      0x1BA   0xF894 0x105C      LDRB     R1,[R4, #+92]
   \      0x1BE   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \      0x1C2   0x4088             LSLS     R0,R0,R1
   \      0x1C4   0xF8CA 0x0000      STR      R0,[R10, #+0]
   \                     ??HAL_DMA_PollForTransfer_20: (+1)
   \      0x1C8   0x2008             MOVS     R0,#+8
   \      0x1CA   0xF8D9 0x1000      LDR      R1,[R9, #+0]
   \      0x1CE   0xF894 0x205C      LDRB     R2,[R4, #+92]
   \      0x1D2   0xF012 0x021F      ANDS     R2,R2,#0x1F
   \      0x1D6   0xFA10 0xF202      LSLS     R2,R0,R2
   \      0x1DA   0x4211             TST      R1,R2
   \      0x1DC   0xD01D             BEQ.N    ??HAL_DMA_PollForTransfer_21
   \      0x1DE   0x6D61             LDR      R1,[R4, #+84]
   \      0x1E0   0xF051 0x0101      ORRS     R1,R1,#0x1
   \      0x1E4   0x6561             STR      R1,[R4, #+84]
   \      0x1E6   0xF894 0x105C      LDRB     R1,[R4, #+92]
   \      0x1EA   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \      0x1EE   0x4088             LSLS     R0,R0,R1
   \      0x1F0   0xF8CA 0x0000      STR      R0,[R10, #+0]
   \      0x1F4   0x2001             MOVS     R0,#+1
   \      0x1F6   0xF884 0x0035      STRB     R0,[R4, #+53]
   \      0x1FA   0x2000             MOVS     R0,#+0
   \      0x1FC   0xF884 0x0034      STRB     R0,[R4, #+52]
   \      0x200   0x2001             MOVS     R0,#+1
   \      0x202   0xE1C7             B.N      ??HAL_DMA_PollForTransfer_1
   \                     ??HAL_DMA_PollForTransfer_18: (+1)
   \      0x204   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x208   0x2108             MOVS     R1,#+8
   \      0x20A   0xF894 0x205C      LDRB     R2,[R4, #+92]
   \      0x20E   0xF012 0x021F      ANDS     R2,R2,#0x1F
   \      0x212   0x4091             LSLS     R1,R1,R2
   \      0x214   0x4208             TST      R0,R1
   \      0x216   0xF040 0x80EC      BNE.W    ??HAL_DMA_PollForTransfer_22
   \                     ??HAL_DMA_PollForTransfer_21: (+1)
   \      0x21A   0x9800             LDR      R0,[SP, #+0]
   \      0x21C   0xF110 0x0F01      CMN      R0,#+1
   \      0x220   0xD00B             BEQ.N    ??HAL_DMA_PollForTransfer_23
   \      0x222   0x.... 0x....      BL       HAL_GetTick
   \      0x226   0xEBB0 0x0008      SUBS     R0,R0,R8
   \      0x22A   0x9900             LDR      R1,[SP, #+0]
   \      0x22C   0x4281             CMP      R1,R0
   \      0x22E   0xF0C0 0x80F2      BCC.W    ??HAL_DMA_PollForTransfer_24
   \      0x232   0x9800             LDR      R0,[SP, #+0]
   \      0x234   0x2800             CMP      R0,#+0
   \      0x236   0xF000 0x80EE      BEQ.W    ??HAL_DMA_PollForTransfer_24
   \                     ??HAL_DMA_PollForTransfer_23: (+1)
   \      0x23A   0x6820             LDR      R0,[R4, #+0]
   \      0x23C   0x4558             CMP      R0,R11
   \      0x23E   0xD073             BEQ.N    ??HAL_DMA_PollForTransfer_25
   \      0x240   0x6820             LDR      R0,[R4, #+0]
   \      0x242   0x.... 0x....      LDR.W    R1,??DataTable6_13
   \      0x246   0x4288             CMP      R0,R1
   \      0x248   0xD06E             BEQ.N    ??HAL_DMA_PollForTransfer_25
   \      0x24A   0x6820             LDR      R0,[R4, #+0]
   \      0x24C   0x.... 0x....      LDR.W    R1,??DataTable6_14
   \      0x250   0x4288             CMP      R0,R1
   \      0x252   0xD069             BEQ.N    ??HAL_DMA_PollForTransfer_25
   \      0x254   0x6820             LDR      R0,[R4, #+0]
   \      0x256   0x.... 0x....      LDR.W    R1,??DataTable6_15
   \      0x25A   0x4288             CMP      R0,R1
   \      0x25C   0xD064             BEQ.N    ??HAL_DMA_PollForTransfer_25
   \      0x25E   0x6820             LDR      R0,[R4, #+0]
   \      0x260   0x.... 0x....      LDR.W    R1,??DataTable6_16
   \      0x264   0x4288             CMP      R0,R1
   \      0x266   0xD05F             BEQ.N    ??HAL_DMA_PollForTransfer_25
   \      0x268   0x6820             LDR      R0,[R4, #+0]
   \      0x26A   0x.... 0x....      LDR.W    R1,??DataTable6_17
   \      0x26E   0x4288             CMP      R0,R1
   \      0x270   0xD05A             BEQ.N    ??HAL_DMA_PollForTransfer_25
   \      0x272   0x6820             LDR      R0,[R4, #+0]
   \      0x274   0x.... 0x....      LDR.W    R1,??DataTable6_18
   \      0x278   0x4288             CMP      R0,R1
   \      0x27A   0xD055             BEQ.N    ??HAL_DMA_PollForTransfer_25
   \      0x27C   0x6820             LDR      R0,[R4, #+0]
   \      0x27E   0x.... 0x....      LDR.W    R1,??DataTable6_19
   \      0x282   0x4288             CMP      R0,R1
   \      0x284   0xD050             BEQ.N    ??HAL_DMA_PollForTransfer_25
   \      0x286   0x6820             LDR      R0,[R4, #+0]
   \      0x288   0x.... 0x....      LDR.W    R1,??DataTable6_20
   \      0x28C   0x4288             CMP      R0,R1
   \      0x28E   0xD04B             BEQ.N    ??HAL_DMA_PollForTransfer_25
   \      0x290   0x6820             LDR      R0,[R4, #+0]
   \      0x292   0x.... 0x....      LDR.W    R1,??DataTable6_21
   \      0x296   0x4288             CMP      R0,R1
   \      0x298   0xD046             BEQ.N    ??HAL_DMA_PollForTransfer_25
   \      0x29A   0x6820             LDR      R0,[R4, #+0]
   \      0x29C   0x.... 0x....      LDR.W    R1,??DataTable6_22
   \      0x2A0   0x4288             CMP      R0,R1
   \      0x2A2   0xD041             BEQ.N    ??HAL_DMA_PollForTransfer_25
   \      0x2A4   0x6820             LDR      R0,[R4, #+0]
   \      0x2A6   0x.... 0x....      LDR.W    R1,??DataTable6
   \      0x2AA   0x4288             CMP      R0,R1
   \      0x2AC   0xD03C             BEQ.N    ??HAL_DMA_PollForTransfer_25
   \      0x2AE   0x6820             LDR      R0,[R4, #+0]
   \      0x2B0   0x.... 0x....      LDR.W    R1,??DataTable6_1
   \      0x2B4   0x4288             CMP      R0,R1
   \      0x2B6   0xD037             BEQ.N    ??HAL_DMA_PollForTransfer_25
   \      0x2B8   0x6820             LDR      R0,[R4, #+0]
   \      0x2BA   0x.... 0x....      LDR.W    R1,??DataTable6_2
   \      0x2BE   0x4288             CMP      R0,R1
   \      0x2C0   0xD032             BEQ.N    ??HAL_DMA_PollForTransfer_25
   \      0x2C2   0x6820             LDR      R0,[R4, #+0]
   \      0x2C4   0x.... 0x....      LDR.W    R1,??DataTable6_3
   \      0x2C8   0x4288             CMP      R0,R1
   \      0x2CA   0xD02D             BEQ.N    ??HAL_DMA_PollForTransfer_25
   \      0x2CC   0x6820             LDR      R0,[R4, #+0]
   \      0x2CE   0x.... 0x....      LDR.W    R1,??DataTable6_23
   \      0x2D2   0x4288             CMP      R0,R1
   \      0x2D4   0xD028             BEQ.N    ??HAL_DMA_PollForTransfer_25
   \      0x2D6   0x6820             LDR      R0,[R4, #+0]
   \      0x2D8   0x.... 0x....      LDR.W    R1,??DataTable6_4
   \      0x2DC   0x4288             CMP      R0,R1
   \      0x2DE   0xD023             BEQ.N    ??HAL_DMA_PollForTransfer_25
   \      0x2E0   0x6820             LDR      R0,[R4, #+0]
   \      0x2E2   0x.... 0x....      LDR.W    R1,??DataTable6_5
   \      0x2E6   0x4288             CMP      R0,R1
   \      0x2E8   0xD01E             BEQ.N    ??HAL_DMA_PollForTransfer_25
   \      0x2EA   0x6820             LDR      R0,[R4, #+0]
   \      0x2EC   0x.... 0x....      LDR.W    R1,??DataTable6_6
   \      0x2F0   0x4288             CMP      R0,R1
   \      0x2F2   0xD019             BEQ.N    ??HAL_DMA_PollForTransfer_25
   \      0x2F4   0x6820             LDR      R0,[R4, #+0]
   \      0x2F6   0x.... 0x....      LDR.W    R1,??DataTable6_7
   \      0x2FA   0x4288             CMP      R0,R1
   \      0x2FC   0xD014             BEQ.N    ??HAL_DMA_PollForTransfer_25
   \      0x2FE   0x6820             LDR      R0,[R4, #+0]
   \      0x300   0x.... 0x....      LDR.W    R1,??DataTable6_8
   \      0x304   0x4288             CMP      R0,R1
   \      0x306   0xD00F             BEQ.N    ??HAL_DMA_PollForTransfer_25
   \      0x308   0x6820             LDR      R0,[R4, #+0]
   \      0x30A   0x.... 0x....      LDR.W    R1,??DataTable6_9
   \      0x30E   0x4288             CMP      R0,R1
   \      0x310   0xD00A             BEQ.N    ??HAL_DMA_PollForTransfer_25
   \      0x312   0x6820             LDR      R0,[R4, #+0]
   \      0x314   0x.... 0x....      LDR.W    R1,??DataTable6_10
   \      0x318   0x4288             CMP      R0,R1
   \      0x31A   0xD005             BEQ.N    ??HAL_DMA_PollForTransfer_25
   \      0x31C   0x6820             LDR      R0,[R4, #+0]
   \      0x31E   0x.... 0x....      LDR.W    R1,??DataTable6_11
   \      0x322   0x4288             CMP      R0,R1
   \      0x324   0xF47F 0xAF1F      BNE.W    ??HAL_DMA_PollForTransfer_14
   \                     ??HAL_DMA_PollForTransfer_25: (+1)
   \      0x328   0x2001             MOVS     R0,#+1
   \                     ??HAL_DMA_PollForTransfer_15: (+1)
   \      0x32A   0xB2C0             UXTB     R0,R0
   \      0x32C   0x2800             CMP      R0,#+0
   \      0x32E   0xD01A             BEQ.N    ??HAL_DMA_PollForTransfer_10
   1134              {
   1135                /* Check for DMAMUX Request generator (if used) overrun status */
   1136                if(hdma->DMAmuxRequestGen != 0U)
   \      0x330   0x6EE0             LDR      R0,[R4, #+108]
   \      0x332   0x2800             CMP      R0,#+0
   \      0x334   0xD00B             BEQ.N    ??HAL_DMA_PollForTransfer_26
   1137                {
   1138                  /* if using DMAMUX request generator Check for DMAMUX request generator overrun */
   1139                  if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
   \      0x336   0x6F20             LDR      R0,[R4, #+112]
   \      0x338   0x6800             LDR      R0,[R0, #+0]
   \      0x33A   0x6F61             LDR      R1,[R4, #+116]
   \      0x33C   0x4208             TST      R0,R1
   \      0x33E   0xD006             BEQ.N    ??HAL_DMA_PollForTransfer_26
   1140                  {
   1141                    /* Clear the DMAMUX request generator overrun flag */
   1142                    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
   \      0x340   0x6F60             LDR      R0,[R4, #+116]
   \      0x342   0x6F21             LDR      R1,[R4, #+112]
   \      0x344   0x6048             STR      R0,[R1, #+4]
   1143          
   1144                    /* Update error code */
   1145                    hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
   \      0x346   0x6D60             LDR      R0,[R4, #+84]
   \      0x348   0xF450 0x6080      ORRS     R0,R0,#0x400
   \      0x34C   0x6560             STR      R0,[R4, #+84]
   1146                  }
   1147                }
   1148          
   1149                /* Check for DMAMUX Synchronization overrun */
   1150                if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
   \                     ??HAL_DMA_PollForTransfer_26: (+1)
   \      0x34E   0x6E60             LDR      R0,[R4, #+100]
   \      0x350   0x6800             LDR      R0,[R0, #+0]
   \      0x352   0x6EA1             LDR      R1,[R4, #+104]
   \      0x354   0x4208             TST      R0,R1
   \      0x356   0xD006             BEQ.N    ??HAL_DMA_PollForTransfer_10
   1151                {
   1152                  /* Clear the DMAMUX synchro overrun flag */
   1153                  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
   \      0x358   0x6EA0             LDR      R0,[R4, #+104]
   \      0x35A   0x6E61             LDR      R1,[R4, #+100]
   \      0x35C   0x6048             STR      R0,[R1, #+4]
   1154          
   1155                  /* Update error code */
   1156                  hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
   \      0x35E   0x6D60             LDR      R0,[R4, #+84]
   \      0x360   0xF450 0x7000      ORRS     R0,R0,#0x200
   \      0x364   0x6560             STR      R0,[R4, #+84]
   1157                }
   1158              }
   \                     ??HAL_DMA_PollForTransfer_10: (+1)
   \      0x366   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x36A   0x4238             TST      R0,R7
   \      0x36C   0xD15A             BNE.N    ??HAL_DMA_PollForTransfer_27
   \      0x36E   0x6820             LDR      R0,[R4, #+0]
   \      0x370   0x4558             CMP      R0,R11
   \      0x372   0xD03C             BEQ.N    ??HAL_DMA_PollForTransfer_28
   \      0x374   0x6820             LDR      R0,[R4, #+0]
   \      0x376   0x....             LDR.N    R1,??DataTable6_13
   \      0x378   0x4288             CMP      R0,R1
   \      0x37A   0xD038             BEQ.N    ??HAL_DMA_PollForTransfer_28
   \      0x37C   0x6820             LDR      R0,[R4, #+0]
   \      0x37E   0x....             LDR.N    R1,??DataTable6_14
   \      0x380   0x4288             CMP      R0,R1
   \      0x382   0xD034             BEQ.N    ??HAL_DMA_PollForTransfer_28
   \      0x384   0x6820             LDR      R0,[R4, #+0]
   \      0x386   0x....             LDR.N    R1,??DataTable6_15
   \      0x388   0x4288             CMP      R0,R1
   \      0x38A   0xD030             BEQ.N    ??HAL_DMA_PollForTransfer_28
   \      0x38C   0x6820             LDR      R0,[R4, #+0]
   \      0x38E   0x....             LDR.N    R1,??DataTable6_16
   \      0x390   0x4288             CMP      R0,R1
   \      0x392   0xD02C             BEQ.N    ??HAL_DMA_PollForTransfer_28
   \      0x394   0x6820             LDR      R0,[R4, #+0]
   \      0x396   0x....             LDR.N    R1,??DataTable6_17
   \      0x398   0x4288             CMP      R0,R1
   \      0x39A   0xD028             BEQ.N    ??HAL_DMA_PollForTransfer_28
   \      0x39C   0x6820             LDR      R0,[R4, #+0]
   \      0x39E   0x....             LDR.N    R1,??DataTable6_18
   \      0x3A0   0x4288             CMP      R0,R1
   \      0x3A2   0xD024             BEQ.N    ??HAL_DMA_PollForTransfer_28
   \      0x3A4   0x6820             LDR      R0,[R4, #+0]
   \      0x3A6   0x....             LDR.N    R1,??DataTable6_19
   \      0x3A8   0x4288             CMP      R0,R1
   \      0x3AA   0xD020             BEQ.N    ??HAL_DMA_PollForTransfer_28
   \      0x3AC   0x6820             LDR      R0,[R4, #+0]
   \      0x3AE   0x....             LDR.N    R1,??DataTable6_20
   \      0x3B0   0x4288             CMP      R0,R1
   \      0x3B2   0xD01C             BEQ.N    ??HAL_DMA_PollForTransfer_28
   \      0x3B4   0x6820             LDR      R0,[R4, #+0]
   \      0x3B6   0x....             LDR.N    R1,??DataTable6_21
   \      0x3B8   0x4288             CMP      R0,R1
   \      0x3BA   0xD018             BEQ.N    ??HAL_DMA_PollForTransfer_28
   \      0x3BC   0x6820             LDR      R0,[R4, #+0]
   \      0x3BE   0x....             LDR.N    R1,??DataTable6_22
   \      0x3C0   0x4288             CMP      R0,R1
   \      0x3C2   0xD014             BEQ.N    ??HAL_DMA_PollForTransfer_28
   \      0x3C4   0x6820             LDR      R0,[R4, #+0]
   \      0x3C6   0x....             LDR.N    R1,??DataTable6
   \      0x3C8   0x4288             CMP      R0,R1
   \      0x3CA   0xD010             BEQ.N    ??HAL_DMA_PollForTransfer_28
   \      0x3CC   0x6820             LDR      R0,[R4, #+0]
   \      0x3CE   0x....             LDR.N    R1,??DataTable6_1
   \      0x3D0   0x4288             CMP      R0,R1
   \      0x3D2   0xD00C             BEQ.N    ??HAL_DMA_PollForTransfer_28
   \      0x3D4   0x6820             LDR      R0,[R4, #+0]
   \      0x3D6   0x....             LDR.N    R1,??DataTable6_2
   \      0x3D8   0x4288             CMP      R0,R1
   \      0x3DA   0xD008             BEQ.N    ??HAL_DMA_PollForTransfer_28
   \      0x3DC   0x6820             LDR      R0,[R4, #+0]
   \      0x3DE   0x....             LDR.N    R1,??DataTable6_3
   \      0x3E0   0x4288             CMP      R0,R1
   \      0x3E2   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_28
   \      0x3E4   0x6820             LDR      R0,[R4, #+0]
   \      0x3E6   0x....             LDR.N    R1,??DataTable6_23
   \      0x3E8   0x4288             CMP      R0,R1
   \      0x3EA   0xF47F 0xAEBE      BNE.W    ??HAL_DMA_PollForTransfer_16
   \                     ??HAL_DMA_PollForTransfer_28: (+1)
   \      0x3EE   0x2001             MOVS     R0,#+1
   \      0x3F0   0xE6BC             B.N      ??HAL_DMA_PollForTransfer_17
   \                     ??HAL_DMA_PollForTransfer_22: (+1)
   \      0x3F2   0x2001             MOVS     R0,#+1
   \      0x3F4   0xF894 0x105C      LDRB     R1,[R4, #+92]
   \      0x3F8   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \      0x3FC   0x4088             LSLS     R0,R0,R1
   \      0x3FE   0xF8C9 0x0000      STR      R0,[R9, #+0]
   \      0x402   0x2001             MOVS     R0,#+1
   \      0x404   0x6560             STR      R0,[R4, #+84]
   \      0x406   0x2001             MOVS     R0,#+1
   \      0x408   0xF884 0x0035      STRB     R0,[R4, #+53]
   \      0x40C   0x2000             MOVS     R0,#+0
   \      0x40E   0xF884 0x0034      STRB     R0,[R4, #+52]
   \      0x412   0x2001             MOVS     R0,#+1
   \      0x414   0xE0BE             B.N      ??HAL_DMA_PollForTransfer_1
   \                     ??HAL_DMA_PollForTransfer_24: (+1)
   \      0x416   0x2020             MOVS     R0,#+32
   \      0x418   0x6560             STR      R0,[R4, #+84]
   \      0x41A   0x0020             MOVS     R0,R4
   \      0x41C   0x.... 0x....      BL       HAL_DMA_Abort
   \      0x420   0x2001             MOVS     R0,#+1
   \      0x422   0xE0B7             B.N      ??HAL_DMA_PollForTransfer_1
   1159            }
   1160          
   1161          
   1162            /* Get the level transfer complete flag */
   1163            if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
   \                     ??HAL_DMA_PollForTransfer_27: (+1)
   \      0x424   0xB2ED             UXTB     R5,R5
   \      0x426   0x2D00             CMP      R5,#+0
   \      0x428   0xD15C             BNE.N    ??HAL_DMA_PollForTransfer_29
   1164            {
   1165              /* Clear the half transfer and transfer complete flags */
   1166              if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
   \      0x42A   0x6820             LDR      R0,[R4, #+0]
   \      0x42C   0x4558             CMP      R0,R11
   \      0x42E   0xD03B             BEQ.N    ??HAL_DMA_PollForTransfer_30
   \      0x430   0x6820             LDR      R0,[R4, #+0]
   \      0x432   0x....             LDR.N    R1,??DataTable6_13
   \      0x434   0x4288             CMP      R0,R1
   \      0x436   0xD037             BEQ.N    ??HAL_DMA_PollForTransfer_30
   \      0x438   0x6820             LDR      R0,[R4, #+0]
   \      0x43A   0x....             LDR.N    R1,??DataTable6_14
   \      0x43C   0x4288             CMP      R0,R1
   \      0x43E   0xD033             BEQ.N    ??HAL_DMA_PollForTransfer_30
   \      0x440   0x6820             LDR      R0,[R4, #+0]
   \      0x442   0x....             LDR.N    R1,??DataTable6_15
   \      0x444   0x4288             CMP      R0,R1
   \      0x446   0xD02F             BEQ.N    ??HAL_DMA_PollForTransfer_30
   \      0x448   0x6820             LDR      R0,[R4, #+0]
   \      0x44A   0x....             LDR.N    R1,??DataTable6_16
   \      0x44C   0x4288             CMP      R0,R1
   \      0x44E   0xD02B             BEQ.N    ??HAL_DMA_PollForTransfer_30
   \      0x450   0x6820             LDR      R0,[R4, #+0]
   \      0x452   0x....             LDR.N    R1,??DataTable6_17
   \      0x454   0x4288             CMP      R0,R1
   \      0x456   0xD027             BEQ.N    ??HAL_DMA_PollForTransfer_30
   \      0x458   0x6820             LDR      R0,[R4, #+0]
   \      0x45A   0x....             LDR.N    R1,??DataTable6_18
   \      0x45C   0x4288             CMP      R0,R1
   \      0x45E   0xD023             BEQ.N    ??HAL_DMA_PollForTransfer_30
   \      0x460   0x6820             LDR      R0,[R4, #+0]
   \      0x462   0x....             LDR.N    R1,??DataTable6_19
   \      0x464   0x4288             CMP      R0,R1
   \      0x466   0xD01F             BEQ.N    ??HAL_DMA_PollForTransfer_30
   \      0x468   0x6820             LDR      R0,[R4, #+0]
   \      0x46A   0x....             LDR.N    R1,??DataTable6_20
   \      0x46C   0x4288             CMP      R0,R1
   \      0x46E   0xD01B             BEQ.N    ??HAL_DMA_PollForTransfer_30
   \      0x470   0x6820             LDR      R0,[R4, #+0]
   \      0x472   0x....             LDR.N    R1,??DataTable6_21
   \      0x474   0x4288             CMP      R0,R1
   \      0x476   0xD017             BEQ.N    ??HAL_DMA_PollForTransfer_30
   \      0x478   0x6820             LDR      R0,[R4, #+0]
   \      0x47A   0x....             LDR.N    R1,??DataTable6_22
   \      0x47C   0x4288             CMP      R0,R1
   \      0x47E   0xD013             BEQ.N    ??HAL_DMA_PollForTransfer_30
   \      0x480   0x6820             LDR      R0,[R4, #+0]
   \      0x482   0x....             LDR.N    R1,??DataTable6
   \      0x484   0x4288             CMP      R0,R1
   \      0x486   0xD00F             BEQ.N    ??HAL_DMA_PollForTransfer_30
   \      0x488   0x6820             LDR      R0,[R4, #+0]
   \      0x48A   0x....             LDR.N    R1,??DataTable6_1
   \      0x48C   0x4288             CMP      R0,R1
   \      0x48E   0xD00B             BEQ.N    ??HAL_DMA_PollForTransfer_30
   \      0x490   0x6820             LDR      R0,[R4, #+0]
   \      0x492   0x....             LDR.N    R1,??DataTable6_2
   \      0x494   0x4288             CMP      R0,R1
   \      0x496   0xD007             BEQ.N    ??HAL_DMA_PollForTransfer_30
   \      0x498   0x6820             LDR      R0,[R4, #+0]
   \      0x49A   0x....             LDR.N    R1,??DataTable6_3
   \      0x49C   0x4288             CMP      R0,R1
   \      0x49E   0xD003             BEQ.N    ??HAL_DMA_PollForTransfer_30
   \      0x4A0   0x6820             LDR      R0,[R4, #+0]
   \      0x4A2   0x....             LDR.N    R1,??DataTable6_23
   \      0x4A4   0x4288             CMP      R0,R1
   \      0x4A6   0xD101             BNE.N    ??HAL_DMA_PollForTransfer_31
   \                     ??HAL_DMA_PollForTransfer_30: (+1)
   \      0x4A8   0x2001             MOVS     R0,#+1
   \      0x4AA   0xE000             B.N      ??HAL_DMA_PollForTransfer_32
   \                     ??HAL_DMA_PollForTransfer_31: (+1)
   \      0x4AC   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_PollForTransfer_32: (+1)
   \      0x4AE   0xB2C0             UXTB     R0,R0
   \      0x4B0   0x2800             CMP      R0,#+0
   \      0x4B2   0xD008             BEQ.N    ??HAL_DMA_PollForTransfer_33
   1167              {
   1168                (*ifcr_reg) = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << (hdma->StreamIndex & 0x1FU);
   \      0x4B4   0x2030             MOVS     R0,#+48
   \      0x4B6   0xF894 0x105C      LDRB     R1,[R4, #+92]
   \      0x4BA   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \      0x4BE   0x4088             LSLS     R0,R0,R1
   \      0x4C0   0xF8CA 0x0000      STR      R0,[R10, #+0]
   \      0x4C4   0xE007             B.N      ??HAL_DMA_PollForTransfer_34
   1169              }
   1170              else /* BDMA channel */
   1171              {
   1172                (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
   \                     ??HAL_DMA_PollForTransfer_33: (+1)
   \      0x4C6   0x2002             MOVS     R0,#+2
   \      0x4C8   0xF894 0x105C      LDRB     R1,[R4, #+92]
   \      0x4CC   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \      0x4D0   0x4088             LSLS     R0,R0,R1
   \      0x4D2   0xF8CA 0x0000      STR      R0,[R10, #+0]
   1173              }
   1174          
   1175              hdma->State = HAL_DMA_STATE_READY;
   \                     ??HAL_DMA_PollForTransfer_34: (+1)
   \      0x4D6   0x2001             MOVS     R0,#+1
   \      0x4D8   0xF884 0x0035      STRB     R0,[R4, #+53]
   1176          
   1177              /* Process Unlocked */
   1178              __HAL_UNLOCK(hdma);
   \      0x4DC   0x2000             MOVS     R0,#+0
   \      0x4DE   0xF884 0x0034      STRB     R0,[R4, #+52]
   \      0x4E2   0xE055             B.N      ??HAL_DMA_PollForTransfer_35
   1179            }
   1180            else /*CompleteLevel = HAL_DMA_HALF_TRANSFER*/
   1181            {
   1182              /* Clear the half transfer and transfer complete flags */
   1183              if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
   \                     ??HAL_DMA_PollForTransfer_29: (+1)
   \      0x4E4   0x6820             LDR      R0,[R4, #+0]
   \      0x4E6   0x4558             CMP      R0,R11
   \      0x4E8   0xD03B             BEQ.N    ??HAL_DMA_PollForTransfer_36
   \      0x4EA   0x6820             LDR      R0,[R4, #+0]
   \      0x4EC   0x....             LDR.N    R1,??DataTable6_13
   \      0x4EE   0x4288             CMP      R0,R1
   \      0x4F0   0xD037             BEQ.N    ??HAL_DMA_PollForTransfer_36
   \      0x4F2   0x6820             LDR      R0,[R4, #+0]
   \      0x4F4   0x....             LDR.N    R1,??DataTable6_14
   \      0x4F6   0x4288             CMP      R0,R1
   \      0x4F8   0xD033             BEQ.N    ??HAL_DMA_PollForTransfer_36
   \      0x4FA   0x6820             LDR      R0,[R4, #+0]
   \      0x4FC   0x....             LDR.N    R1,??DataTable6_15
   \      0x4FE   0x4288             CMP      R0,R1
   \      0x500   0xD02F             BEQ.N    ??HAL_DMA_PollForTransfer_36
   \      0x502   0x6820             LDR      R0,[R4, #+0]
   \      0x504   0x....             LDR.N    R1,??DataTable6_16
   \      0x506   0x4288             CMP      R0,R1
   \      0x508   0xD02B             BEQ.N    ??HAL_DMA_PollForTransfer_36
   \      0x50A   0x6820             LDR      R0,[R4, #+0]
   \      0x50C   0x....             LDR.N    R1,??DataTable6_17
   \      0x50E   0x4288             CMP      R0,R1
   \      0x510   0xD027             BEQ.N    ??HAL_DMA_PollForTransfer_36
   \      0x512   0x6820             LDR      R0,[R4, #+0]
   \      0x514   0x....             LDR.N    R1,??DataTable6_18
   \      0x516   0x4288             CMP      R0,R1
   \      0x518   0xD023             BEQ.N    ??HAL_DMA_PollForTransfer_36
   \      0x51A   0x6820             LDR      R0,[R4, #+0]
   \      0x51C   0x....             LDR.N    R1,??DataTable6_19
   \      0x51E   0x4288             CMP      R0,R1
   \      0x520   0xD01F             BEQ.N    ??HAL_DMA_PollForTransfer_36
   \      0x522   0x6820             LDR      R0,[R4, #+0]
   \      0x524   0x....             LDR.N    R1,??DataTable6_20
   \      0x526   0x4288             CMP      R0,R1
   \      0x528   0xD01B             BEQ.N    ??HAL_DMA_PollForTransfer_36
   \      0x52A   0x6820             LDR      R0,[R4, #+0]
   \      0x52C   0x....             LDR.N    R1,??DataTable6_21
   \      0x52E   0x4288             CMP      R0,R1
   \      0x530   0xD017             BEQ.N    ??HAL_DMA_PollForTransfer_36
   \      0x532   0x6820             LDR      R0,[R4, #+0]
   \      0x534   0x....             LDR.N    R1,??DataTable6_22
   \      0x536   0x4288             CMP      R0,R1
   \      0x538   0xD013             BEQ.N    ??HAL_DMA_PollForTransfer_36
   \      0x53A   0x6820             LDR      R0,[R4, #+0]
   \      0x53C   0x....             LDR.N    R1,??DataTable6
   \      0x53E   0x4288             CMP      R0,R1
   \      0x540   0xD00F             BEQ.N    ??HAL_DMA_PollForTransfer_36
   \      0x542   0x6820             LDR      R0,[R4, #+0]
   \      0x544   0x....             LDR.N    R1,??DataTable6_1
   \      0x546   0x4288             CMP      R0,R1
   \      0x548   0xD00B             BEQ.N    ??HAL_DMA_PollForTransfer_36
   \      0x54A   0x6820             LDR      R0,[R4, #+0]
   \      0x54C   0x....             LDR.N    R1,??DataTable6_2
   \      0x54E   0x4288             CMP      R0,R1
   \      0x550   0xD007             BEQ.N    ??HAL_DMA_PollForTransfer_36
   \      0x552   0x6820             LDR      R0,[R4, #+0]
   \      0x554   0x....             LDR.N    R1,??DataTable6_3
   \      0x556   0x4288             CMP      R0,R1
   \      0x558   0xD003             BEQ.N    ??HAL_DMA_PollForTransfer_36
   \      0x55A   0x6820             LDR      R0,[R4, #+0]
   \      0x55C   0x....             LDR.N    R1,??DataTable6_23
   \      0x55E   0x4288             CMP      R0,R1
   \      0x560   0xD101             BNE.N    ??HAL_DMA_PollForTransfer_37
   \                     ??HAL_DMA_PollForTransfer_36: (+1)
   \      0x562   0x2001             MOVS     R0,#+1
   \      0x564   0xE000             B.N      ??HAL_DMA_PollForTransfer_38
   \                     ??HAL_DMA_PollForTransfer_37: (+1)
   \      0x566   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_PollForTransfer_38: (+1)
   \      0x568   0xB2C0             UXTB     R0,R0
   \      0x56A   0x2800             CMP      R0,#+0
   \      0x56C   0xD008             BEQ.N    ??HAL_DMA_PollForTransfer_39
   1184              {
   1185                (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
   \      0x56E   0x2010             MOVS     R0,#+16
   \      0x570   0xF894 0x105C      LDRB     R1,[R4, #+92]
   \      0x574   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \      0x578   0x4088             LSLS     R0,R0,R1
   \      0x57A   0xF8CA 0x0000      STR      R0,[R10, #+0]
   \      0x57E   0xE007             B.N      ??HAL_DMA_PollForTransfer_35
   1186              }
   1187              else /* BDMA channel */
   1188              {
   1189                (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
   \                     ??HAL_DMA_PollForTransfer_39: (+1)
   \      0x580   0x2004             MOVS     R0,#+4
   \      0x582   0xF894 0x105C      LDRB     R1,[R4, #+92]
   \      0x586   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \      0x58A   0x4088             LSLS     R0,R0,R1
   \      0x58C   0xF8CA 0x0000      STR      R0,[R10, #+0]
   1190              }
   1191            }
   1192          
   1193            return status;
   \                     ??HAL_DMA_PollForTransfer_35: (+1)
   \      0x590   0x0030             MOVS     R0,R6
   \      0x592   0xB2C0             UXTB     R0,R0
   \                     ??HAL_DMA_PollForTransfer_1: (+1)
   \      0x594   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}
   1194          }
   1195          
   1196          /**
   1197            * @brief  Handles DMA interrupt request.
   1198            * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
   1199            *               the configuration information for the specified DMA Stream.
   1200            * @retval None
   1201            */

   \                                 In section .text, align 2, keep-with-next
   1202          void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
   1203          {
   \                     HAL_DMA_IRQHandler: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x0004             MOVS     R4,R0
   1204            uint32_t tmpisr_dma, tmpisr_bdma;
   1205            uint32_t ccr_reg;
   1206            __IO uint32_t count = 0U;
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0x9000             STR      R0,[SP, #+0]
   1207            uint32_t timeout = SystemCoreClock / 9600U;
   \        0xA   0x.... 0x....      LDR.W    R0,??DataTable7
   \        0xE   0x6800             LDR      R0,[R0, #+0]
   \       0x10   0xF44F 0x5116      MOV      R1,#+9600
   \       0x14   0xFBB0 0xF5F1      UDIV     R5,R0,R1
   1208          
   1209            /* calculate DMA base and stream number */
   1210            DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
   \       0x18   0x6DA6             LDR      R6,[R4, #+88]
   1211            BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
   \       0x1A   0x6DA1             LDR      R1,[R4, #+88]
   1212          
   1213            tmpisr_dma  = regs_dma->ISR;
   \       0x1C   0x6837             LDR      R7,[R6, #+0]
   1214            tmpisr_bdma = regs_bdma->ISR;
   \       0x1E   0x680A             LDR      R2,[R1, #+0]
   1215          
   1216            if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
   \       0x20   0x.... 0x....      LDR.W    R8,??DataTable7_1
   \       0x24   0x6820             LDR      R0,[R4, #+0]
   \       0x26   0x4540             CMP      R0,R8
   \       0x28   0xD04A             BEQ.N    ??HAL_DMA_IRQHandler_0
   \       0x2A   0x6820             LDR      R0,[R4, #+0]
   \       0x2C   0x.... 0x....      LDR.W    R3,??DataTable7_2
   \       0x30   0x4298             CMP      R0,R3
   \       0x32   0xD045             BEQ.N    ??HAL_DMA_IRQHandler_0
   \       0x34   0x6820             LDR      R0,[R4, #+0]
   \       0x36   0x.... 0x....      LDR.W    R3,??DataTable7_3
   \       0x3A   0x4298             CMP      R0,R3
   \       0x3C   0xD040             BEQ.N    ??HAL_DMA_IRQHandler_0
   \       0x3E   0x6820             LDR      R0,[R4, #+0]
   \       0x40   0x.... 0x....      LDR.W    R3,??DataTable7_4
   \       0x44   0x4298             CMP      R0,R3
   \       0x46   0xD03B             BEQ.N    ??HAL_DMA_IRQHandler_0
   \       0x48   0x6820             LDR      R0,[R4, #+0]
   \       0x4A   0x.... 0x....      LDR.W    R3,??DataTable7_5
   \       0x4E   0x4298             CMP      R0,R3
   \       0x50   0xD036             BEQ.N    ??HAL_DMA_IRQHandler_0
   \       0x52   0x6820             LDR      R0,[R4, #+0]
   \       0x54   0x.... 0x....      LDR.W    R3,??DataTable7_6
   \       0x58   0x4298             CMP      R0,R3
   \       0x5A   0xD031             BEQ.N    ??HAL_DMA_IRQHandler_0
   \       0x5C   0x6820             LDR      R0,[R4, #+0]
   \       0x5E   0x.... 0x....      LDR.W    R3,??DataTable7_7
   \       0x62   0x4298             CMP      R0,R3
   \       0x64   0xD02C             BEQ.N    ??HAL_DMA_IRQHandler_0
   \       0x66   0x6820             LDR      R0,[R4, #+0]
   \       0x68   0x.... 0x....      LDR.W    R3,??DataTable7_8
   \       0x6C   0x4298             CMP      R0,R3
   \       0x6E   0xD027             BEQ.N    ??HAL_DMA_IRQHandler_0
   \       0x70   0x6820             LDR      R0,[R4, #+0]
   \       0x72   0x.... 0x....      LDR.W    R3,??DataTable7_9
   \       0x76   0x4298             CMP      R0,R3
   \       0x78   0xD022             BEQ.N    ??HAL_DMA_IRQHandler_0
   \       0x7A   0x6820             LDR      R0,[R4, #+0]
   \       0x7C   0x.... 0x....      LDR.W    R3,??DataTable7_10
   \       0x80   0x4298             CMP      R0,R3
   \       0x82   0xD01D             BEQ.N    ??HAL_DMA_IRQHandler_0
   \       0x84   0x6820             LDR      R0,[R4, #+0]
   \       0x86   0x.... 0x....      LDR.W    R3,??DataTable7_11
   \       0x8A   0x4298             CMP      R0,R3
   \       0x8C   0xD018             BEQ.N    ??HAL_DMA_IRQHandler_0
   \       0x8E   0x6820             LDR      R0,[R4, #+0]
   \       0x90   0x.... 0x....      LDR.W    R3,??DataTable7_12
   \       0x94   0x4298             CMP      R0,R3
   \       0x96   0xD013             BEQ.N    ??HAL_DMA_IRQHandler_0
   \       0x98   0x6820             LDR      R0,[R4, #+0]
   \       0x9A   0x.... 0x....      LDR.W    R3,??DataTable7_13
   \       0x9E   0x4298             CMP      R0,R3
   \       0xA0   0xD00E             BEQ.N    ??HAL_DMA_IRQHandler_0
   \       0xA2   0x6820             LDR      R0,[R4, #+0]
   \       0xA4   0x.... 0x....      LDR.W    R3,??DataTable7_14
   \       0xA8   0x4298             CMP      R0,R3
   \       0xAA   0xD009             BEQ.N    ??HAL_DMA_IRQHandler_0
   \       0xAC   0x6820             LDR      R0,[R4, #+0]
   \       0xAE   0x.... 0x....      LDR.W    R3,??DataTable7_15
   \       0xB2   0x4298             CMP      R0,R3
   \       0xB4   0xD004             BEQ.N    ??HAL_DMA_IRQHandler_0
   \       0xB6   0x6820             LDR      R0,[R4, #+0]
   \       0xB8   0x.... 0x....      LDR.W    R3,??DataTable7_16
   \       0xBC   0x4298             CMP      R0,R3
   \       0xBE   0xD101             BNE.N    ??HAL_DMA_IRQHandler_1
   \                     ??HAL_DMA_IRQHandler_0: (+1)
   \       0xC0   0x2001             MOVS     R0,#+1
   \       0xC2   0xE000             B.N      ??HAL_DMA_IRQHandler_2
   \                     ??HAL_DMA_IRQHandler_1: (+1)
   \       0xC4   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_IRQHandler_2: (+1)
   \       0xC6   0xB2C0             UXTB     R0,R0
   \       0xC8   0x2800             CMP      R0,#+0
   \       0xCA   0xF000 0x8321      BEQ.W    ??HAL_DMA_IRQHandler_3
   1217            {
   1218              /* Transfer Error Interrupt management ***************************************/
   1219              if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
   \       0xCE   0x2108             MOVS     R1,#+8
   \       0xD0   0xF894 0x005C      LDRB     R0,[R4, #+92]
   \       0xD4   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \       0xD8   0xFA11 0xF000      LSLS     R0,R1,R0
   \       0xDC   0x4207             TST      R7,R0
   \       0xDE   0xD068             BEQ.N    ??HAL_DMA_IRQHandler_4
   1220              {
   1221                if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
   \       0xE0   0x6820             LDR      R0,[R4, #+0]
   \       0xE2   0x4540             CMP      R0,R8
   \       0xE4   0xD04A             BEQ.N    ??HAL_DMA_IRQHandler_5
   \       0xE6   0x6820             LDR      R0,[R4, #+0]
   \       0xE8   0x.... 0x....      LDR.W    R2,??DataTable7_2
   \       0xEC   0x4290             CMP      R0,R2
   \       0xEE   0xD045             BEQ.N    ??HAL_DMA_IRQHandler_5
   \       0xF0   0x6820             LDR      R0,[R4, #+0]
   \       0xF2   0x.... 0x....      LDR.W    R2,??DataTable7_3
   \       0xF6   0x4290             CMP      R0,R2
   \       0xF8   0xD040             BEQ.N    ??HAL_DMA_IRQHandler_5
   \       0xFA   0x6820             LDR      R0,[R4, #+0]
   \       0xFC   0x.... 0x....      LDR.W    R2,??DataTable7_4
   \      0x100   0x4290             CMP      R0,R2
   \      0x102   0xD03B             BEQ.N    ??HAL_DMA_IRQHandler_5
   \      0x104   0x6820             LDR      R0,[R4, #+0]
   \      0x106   0x.... 0x....      LDR.W    R2,??DataTable7_5
   \      0x10A   0x4290             CMP      R0,R2
   \      0x10C   0xD036             BEQ.N    ??HAL_DMA_IRQHandler_5
   \      0x10E   0x6820             LDR      R0,[R4, #+0]
   \      0x110   0x.... 0x....      LDR.W    R2,??DataTable7_6
   \      0x114   0x4290             CMP      R0,R2
   \      0x116   0xD031             BEQ.N    ??HAL_DMA_IRQHandler_5
   \      0x118   0x6820             LDR      R0,[R4, #+0]
   \      0x11A   0x.... 0x....      LDR.W    R2,??DataTable7_7
   \      0x11E   0x4290             CMP      R0,R2
   \      0x120   0xD02C             BEQ.N    ??HAL_DMA_IRQHandler_5
   \      0x122   0x6820             LDR      R0,[R4, #+0]
   \      0x124   0x.... 0x....      LDR.W    R2,??DataTable7_8
   \      0x128   0x4290             CMP      R0,R2
   \      0x12A   0xD027             BEQ.N    ??HAL_DMA_IRQHandler_5
   \      0x12C   0x6820             LDR      R0,[R4, #+0]
   \      0x12E   0x.... 0x....      LDR.W    R2,??DataTable7_9
   \      0x132   0x4290             CMP      R0,R2
   \      0x134   0xD022             BEQ.N    ??HAL_DMA_IRQHandler_5
   \      0x136   0x6820             LDR      R0,[R4, #+0]
   \      0x138   0x.... 0x....      LDR.W    R2,??DataTable7_10
   \      0x13C   0x4290             CMP      R0,R2
   \      0x13E   0xD01D             BEQ.N    ??HAL_DMA_IRQHandler_5
   \      0x140   0x6820             LDR      R0,[R4, #+0]
   \      0x142   0x.... 0x....      LDR.W    R2,??DataTable7_11
   \      0x146   0x4290             CMP      R0,R2
   \      0x148   0xD018             BEQ.N    ??HAL_DMA_IRQHandler_5
   \      0x14A   0x6820             LDR      R0,[R4, #+0]
   \      0x14C   0x.... 0x....      LDR.W    R2,??DataTable7_12
   \      0x150   0x4290             CMP      R0,R2
   \      0x152   0xD013             BEQ.N    ??HAL_DMA_IRQHandler_5
   \      0x154   0x6820             LDR      R0,[R4, #+0]
   \      0x156   0x.... 0x....      LDR.W    R2,??DataTable7_13
   \      0x15A   0x4290             CMP      R0,R2
   \      0x15C   0xD00E             BEQ.N    ??HAL_DMA_IRQHandler_5
   \      0x15E   0x6820             LDR      R0,[R4, #+0]
   \      0x160   0x.... 0x....      LDR.W    R2,??DataTable7_14
   \      0x164   0x4290             CMP      R0,R2
   \      0x166   0xD009             BEQ.N    ??HAL_DMA_IRQHandler_5
   \      0x168   0x6820             LDR      R0,[R4, #+0]
   \      0x16A   0x.... 0x....      LDR.W    R2,??DataTable7_15
   \      0x16E   0x4290             CMP      R0,R2
   \      0x170   0xD004             BEQ.N    ??HAL_DMA_IRQHandler_5
   \      0x172   0x6820             LDR      R0,[R4, #+0]
   \      0x174   0x.... 0x....      LDR.W    R2,??DataTable7_16
   \      0x178   0x4290             CMP      R0,R2
   \      0x17A   0xD104             BNE.N    ??HAL_DMA_IRQHandler_6
   \                     ??HAL_DMA_IRQHandler_5: (+1)
   \      0x17C   0x6820             LDR      R0,[R4, #+0]
   \      0x17E   0x6800             LDR      R0,[R0, #+0]
   \      0x180   0xF010 0x0004      ANDS     R0,R0,#0x4
   \      0x184   0xE003             B.N      ??HAL_DMA_IRQHandler_7
   \                     ??HAL_DMA_IRQHandler_6: (+1)
   \      0x186   0x6820             LDR      R0,[R4, #+0]
   \      0x188   0x6800             LDR      R0,[R0, #+0]
   \      0x18A   0xF010 0x0008      ANDS     R0,R0,#0x8
   \                     ??HAL_DMA_IRQHandler_7: (+1)
   \      0x18E   0x2800             CMP      R0,#+0
   \      0x190   0xD00F             BEQ.N    ??HAL_DMA_IRQHandler_4
   1222                {
   1223                  /* Disable the transfer error interrupt */
   1224                  ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
   \      0x192   0x6820             LDR      R0,[R4, #+0]
   \      0x194   0x6800             LDR      R0,[R0, #+0]
   \      0x196   0xF030 0x0004      BICS     R0,R0,#0x4
   \      0x19A   0x6822             LDR      R2,[R4, #+0]
   \      0x19C   0x6010             STR      R0,[R2, #+0]
   1225          
   1226                  /* Clear the transfer error flag */
   1227                  regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
   \      0x19E   0xF894 0x005C      LDRB     R0,[R4, #+92]
   \      0x1A2   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \      0x1A6   0x4081             LSLS     R1,R1,R0
   \      0x1A8   0x60B1             STR      R1,[R6, #+8]
   1228          
   1229                  /* Update error code */
   1230                  hdma->ErrorCode |= HAL_DMA_ERROR_TE;
   \      0x1AA   0x6D60             LDR      R0,[R4, #+84]
   \      0x1AC   0xF050 0x0001      ORRS     R0,R0,#0x1
   \      0x1B0   0x6560             STR      R0,[R4, #+84]
   1231                }
   1232              }
   1233              /* FIFO Error Interrupt management ******************************************/
   1234              if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
   \                     ??HAL_DMA_IRQHandler_4: (+1)
   \      0x1B2   0xF894 0x005C      LDRB     R0,[R4, #+92]
   \      0x1B6   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \      0x1BA   0x0039             MOVS     R1,R7
   \      0x1BC   0x40C1             LSRS     R1,R1,R0
   \      0x1BE   0x07C8             LSLS     R0,R1,#+31
   \      0x1C0   0xD562             BPL.N    ??HAL_DMA_IRQHandler_8
   1235              {
   1236                if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
   \      0x1C2   0x6820             LDR      R0,[R4, #+0]
   \      0x1C4   0x4540             CMP      R0,R8
   \      0x1C6   0xD04A             BEQ.N    ??HAL_DMA_IRQHandler_9
   \      0x1C8   0x6820             LDR      R0,[R4, #+0]
   \      0x1CA   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \      0x1CE   0x4288             CMP      R0,R1
   \      0x1D0   0xD045             BEQ.N    ??HAL_DMA_IRQHandler_9
   \      0x1D2   0x6820             LDR      R0,[R4, #+0]
   \      0x1D4   0x.... 0x....      LDR.W    R1,??DataTable7_3
   \      0x1D8   0x4288             CMP      R0,R1
   \      0x1DA   0xD040             BEQ.N    ??HAL_DMA_IRQHandler_9
   \      0x1DC   0x6820             LDR      R0,[R4, #+0]
   \      0x1DE   0x.... 0x....      LDR.W    R1,??DataTable7_4
   \      0x1E2   0x4288             CMP      R0,R1
   \      0x1E4   0xD03B             BEQ.N    ??HAL_DMA_IRQHandler_9
   \      0x1E6   0x6820             LDR      R0,[R4, #+0]
   \      0x1E8   0x.... 0x....      LDR.W    R1,??DataTable7_5
   \      0x1EC   0x4288             CMP      R0,R1
   \      0x1EE   0xD036             BEQ.N    ??HAL_DMA_IRQHandler_9
   \      0x1F0   0x6820             LDR      R0,[R4, #+0]
   \      0x1F2   0x.... 0x....      LDR.W    R1,??DataTable7_6
   \      0x1F6   0x4288             CMP      R0,R1
   \      0x1F8   0xD031             BEQ.N    ??HAL_DMA_IRQHandler_9
   \      0x1FA   0x6820             LDR      R0,[R4, #+0]
   \      0x1FC   0x.... 0x....      LDR.W    R1,??DataTable7_7
   \      0x200   0x4288             CMP      R0,R1
   \      0x202   0xD02C             BEQ.N    ??HAL_DMA_IRQHandler_9
   \      0x204   0x6820             LDR      R0,[R4, #+0]
   \      0x206   0x.... 0x....      LDR.W    R1,??DataTable7_8
   \      0x20A   0x4288             CMP      R0,R1
   \      0x20C   0xD027             BEQ.N    ??HAL_DMA_IRQHandler_9
   \      0x20E   0x6820             LDR      R0,[R4, #+0]
   \      0x210   0x.... 0x....      LDR.W    R1,??DataTable7_9
   \      0x214   0x4288             CMP      R0,R1
   \      0x216   0xD022             BEQ.N    ??HAL_DMA_IRQHandler_9
   \      0x218   0x6820             LDR      R0,[R4, #+0]
   \      0x21A   0x.... 0x....      LDR.W    R1,??DataTable7_10
   \      0x21E   0x4288             CMP      R0,R1
   \      0x220   0xD01D             BEQ.N    ??HAL_DMA_IRQHandler_9
   \      0x222   0x6820             LDR      R0,[R4, #+0]
   \      0x224   0x.... 0x....      LDR.W    R1,??DataTable7_11
   \      0x228   0x4288             CMP      R0,R1
   \      0x22A   0xD018             BEQ.N    ??HAL_DMA_IRQHandler_9
   \      0x22C   0x6820             LDR      R0,[R4, #+0]
   \      0x22E   0x.... 0x....      LDR.W    R1,??DataTable7_12
   \      0x232   0x4288             CMP      R0,R1
   \      0x234   0xD013             BEQ.N    ??HAL_DMA_IRQHandler_9
   \      0x236   0x6820             LDR      R0,[R4, #+0]
   \      0x238   0x.... 0x....      LDR.W    R1,??DataTable7_13
   \      0x23C   0x4288             CMP      R0,R1
   \      0x23E   0xD00E             BEQ.N    ??HAL_DMA_IRQHandler_9
   \      0x240   0x6820             LDR      R0,[R4, #+0]
   \      0x242   0x.... 0x....      LDR.W    R1,??DataTable7_14
   \      0x246   0x4288             CMP      R0,R1
   \      0x248   0xD009             BEQ.N    ??HAL_DMA_IRQHandler_9
   \      0x24A   0x6820             LDR      R0,[R4, #+0]
   \      0x24C   0x.... 0x....      LDR.W    R1,??DataTable7_15
   \      0x250   0x4288             CMP      R0,R1
   \      0x252   0xD004             BEQ.N    ??HAL_DMA_IRQHandler_9
   \      0x254   0x6820             LDR      R0,[R4, #+0]
   \      0x256   0x.... 0x....      LDR.W    R1,??DataTable7_16
   \      0x25A   0x4288             CMP      R0,R1
   \      0x25C   0xD104             BNE.N    ??HAL_DMA_IRQHandler_10
   \                     ??HAL_DMA_IRQHandler_9: (+1)
   \      0x25E   0x6820             LDR      R0,[R4, #+0]
   \      0x260   0x6940             LDR      R0,[R0, #+20]
   \      0x262   0xF010 0x0080      ANDS     R0,R0,#0x80
   \      0x266   0xE002             B.N      ??HAL_DMA_IRQHandler_11
   \                     ??HAL_DMA_IRQHandler_10: (+1)
   \      0x268   0x6820             LDR      R0,[R4, #+0]
   \      0x26A   0x6800             LDR      R0,[R0, #+0]
   \      0x26C   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_IRQHandler_11: (+1)
   \      0x26E   0x2800             CMP      R0,#+0
   \      0x270   0xD00A             BEQ.N    ??HAL_DMA_IRQHandler_8
   1237                {
   1238                  /* Clear the FIFO error flag */
   1239                  regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
   \      0x272   0x2001             MOVS     R0,#+1
   \      0x274   0xF894 0x105C      LDRB     R1,[R4, #+92]
   \      0x278   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \      0x27C   0x4088             LSLS     R0,R0,R1
   \      0x27E   0x60B0             STR      R0,[R6, #+8]
   1240          
   1241                  /* Update error code */
   1242                  hdma->ErrorCode |= HAL_DMA_ERROR_FE;
   \      0x280   0x6D60             LDR      R0,[R4, #+84]
   \      0x282   0xF050 0x0002      ORRS     R0,R0,#0x2
   \      0x286   0x6560             STR      R0,[R4, #+84]
   1243                }
   1244              }
   1245              /* Direct Mode Error Interrupt management ***********************************/
   1246              if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
   \                     ??HAL_DMA_IRQHandler_8: (+1)
   \      0x288   0x2104             MOVS     R1,#+4
   \      0x28A   0xF894 0x005C      LDRB     R0,[R4, #+92]
   \      0x28E   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \      0x292   0xFA11 0xF000      LSLS     R0,R1,R0
   \      0x296   0x4207             TST      R7,R0
   \      0x298   0xD061             BEQ.N    ??HAL_DMA_IRQHandler_12
   1247              {
   1248                if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
   \      0x29A   0x6820             LDR      R0,[R4, #+0]
   \      0x29C   0x4540             CMP      R0,R8
   \      0x29E   0xD04A             BEQ.N    ??HAL_DMA_IRQHandler_13
   \      0x2A0   0x6820             LDR      R0,[R4, #+0]
   \      0x2A2   0x.... 0x....      LDR.W    R2,??DataTable7_2
   \      0x2A6   0x4290             CMP      R0,R2
   \      0x2A8   0xD045             BEQ.N    ??HAL_DMA_IRQHandler_13
   \      0x2AA   0x6820             LDR      R0,[R4, #+0]
   \      0x2AC   0x.... 0x....      LDR.W    R2,??DataTable7_3
   \      0x2B0   0x4290             CMP      R0,R2
   \      0x2B2   0xD040             BEQ.N    ??HAL_DMA_IRQHandler_13
   \      0x2B4   0x6820             LDR      R0,[R4, #+0]
   \      0x2B6   0x.... 0x....      LDR.W    R2,??DataTable7_4
   \      0x2BA   0x4290             CMP      R0,R2
   \      0x2BC   0xD03B             BEQ.N    ??HAL_DMA_IRQHandler_13
   \      0x2BE   0x6820             LDR      R0,[R4, #+0]
   \      0x2C0   0x.... 0x....      LDR.W    R2,??DataTable7_5
   \      0x2C4   0x4290             CMP      R0,R2
   \      0x2C6   0xD036             BEQ.N    ??HAL_DMA_IRQHandler_13
   \      0x2C8   0x6820             LDR      R0,[R4, #+0]
   \      0x2CA   0x.... 0x....      LDR.W    R2,??DataTable7_6
   \      0x2CE   0x4290             CMP      R0,R2
   \      0x2D0   0xD031             BEQ.N    ??HAL_DMA_IRQHandler_13
   \      0x2D2   0x6820             LDR      R0,[R4, #+0]
   \      0x2D4   0x.... 0x....      LDR.W    R2,??DataTable7_7
   \      0x2D8   0x4290             CMP      R0,R2
   \      0x2DA   0xD02C             BEQ.N    ??HAL_DMA_IRQHandler_13
   \      0x2DC   0x6820             LDR      R0,[R4, #+0]
   \      0x2DE   0x.... 0x....      LDR.W    R2,??DataTable7_8
   \      0x2E2   0x4290             CMP      R0,R2
   \      0x2E4   0xD027             BEQ.N    ??HAL_DMA_IRQHandler_13
   \      0x2E6   0x6820             LDR      R0,[R4, #+0]
   \      0x2E8   0x.... 0x....      LDR.W    R2,??DataTable7_9
   \      0x2EC   0x4290             CMP      R0,R2
   \      0x2EE   0xD022             BEQ.N    ??HAL_DMA_IRQHandler_13
   \      0x2F0   0x6820             LDR      R0,[R4, #+0]
   \      0x2F2   0x.... 0x....      LDR.W    R2,??DataTable7_10
   \      0x2F6   0x4290             CMP      R0,R2
   \      0x2F8   0xD01D             BEQ.N    ??HAL_DMA_IRQHandler_13
   \      0x2FA   0x6820             LDR      R0,[R4, #+0]
   \      0x2FC   0x.... 0x....      LDR.W    R2,??DataTable7_11
   \      0x300   0x4290             CMP      R0,R2
   \      0x302   0xD018             BEQ.N    ??HAL_DMA_IRQHandler_13
   \      0x304   0x6820             LDR      R0,[R4, #+0]
   \      0x306   0x.... 0x....      LDR.W    R2,??DataTable7_12
   \      0x30A   0x4290             CMP      R0,R2
   \      0x30C   0xD013             BEQ.N    ??HAL_DMA_IRQHandler_13
   \      0x30E   0x6820             LDR      R0,[R4, #+0]
   \      0x310   0x.... 0x....      LDR.W    R2,??DataTable7_13
   \      0x314   0x4290             CMP      R0,R2
   \      0x316   0xD00E             BEQ.N    ??HAL_DMA_IRQHandler_13
   \      0x318   0x6820             LDR      R0,[R4, #+0]
   \      0x31A   0x.... 0x....      LDR.W    R2,??DataTable7_14
   \      0x31E   0x4290             CMP      R0,R2
   \      0x320   0xD009             BEQ.N    ??HAL_DMA_IRQHandler_13
   \      0x322   0x6820             LDR      R0,[R4, #+0]
   \      0x324   0x.... 0x....      LDR.W    R2,??DataTable7_15
   \      0x328   0x4290             CMP      R0,R2
   \      0x32A   0xD004             BEQ.N    ??HAL_DMA_IRQHandler_13
   \      0x32C   0x6820             LDR      R0,[R4, #+0]
   \      0x32E   0x.... 0x....      LDR.W    R2,??DataTable7_16
   \      0x332   0x4290             CMP      R0,R2
   \      0x334   0xD104             BNE.N    ??HAL_DMA_IRQHandler_14
   \                     ??HAL_DMA_IRQHandler_13: (+1)
   \      0x336   0x6820             LDR      R0,[R4, #+0]
   \      0x338   0x6800             LDR      R0,[R0, #+0]
   \      0x33A   0xF010 0x0002      ANDS     R0,R0,#0x2
   \      0x33E   0xE002             B.N      ??HAL_DMA_IRQHandler_15
   \                     ??HAL_DMA_IRQHandler_14: (+1)
   \      0x340   0x6820             LDR      R0,[R4, #+0]
   \      0x342   0x6800             LDR      R0,[R0, #+0]
   \      0x344   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_IRQHandler_15: (+1)
   \      0x346   0x2800             CMP      R0,#+0
   \      0x348   0xD009             BEQ.N    ??HAL_DMA_IRQHandler_12
   1249                {
   1250                  /* Clear the direct mode error flag */
   1251                  regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
   \      0x34A   0xF894 0x005C      LDRB     R0,[R4, #+92]
   \      0x34E   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \      0x352   0x4081             LSLS     R1,R1,R0
   \      0x354   0x60B1             STR      R1,[R6, #+8]
   1252          
   1253                  /* Update error code */
   1254                  hdma->ErrorCode |= HAL_DMA_ERROR_DME;
   \      0x356   0x6D60             LDR      R0,[R4, #+84]
   \      0x358   0xF050 0x0004      ORRS     R0,R0,#0x4
   \      0x35C   0x6560             STR      R0,[R4, #+84]
   1255                }
   1256              }
   1257              /* Half Transfer Complete Interrupt management ******************************/
   1258              if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
   \                     ??HAL_DMA_IRQHandler_12: (+1)
   \      0x35E   0x2110             MOVS     R1,#+16
   \      0x360   0xF894 0x005C      LDRB     R0,[R4, #+92]
   \      0x364   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \      0x368   0xFA11 0xF000      LSLS     R0,R1,R0
   \      0x36C   0x4207             TST      R7,R0
   \      0x36E   0xF000 0x8085      BEQ.W    ??HAL_DMA_IRQHandler_16
   1259              {
   1260                if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
   \      0x372   0x6820             LDR      R0,[R4, #+0]
   \      0x374   0x4540             CMP      R0,R8
   \      0x376   0xD04A             BEQ.N    ??HAL_DMA_IRQHandler_17
   \      0x378   0x6820             LDR      R0,[R4, #+0]
   \      0x37A   0x.... 0x....      LDR.W    R2,??DataTable7_2
   \      0x37E   0x4290             CMP      R0,R2
   \      0x380   0xD045             BEQ.N    ??HAL_DMA_IRQHandler_17
   \      0x382   0x6820             LDR      R0,[R4, #+0]
   \      0x384   0x.... 0x....      LDR.W    R2,??DataTable7_3
   \      0x388   0x4290             CMP      R0,R2
   \      0x38A   0xD040             BEQ.N    ??HAL_DMA_IRQHandler_17
   \      0x38C   0x6820             LDR      R0,[R4, #+0]
   \      0x38E   0x.... 0x....      LDR.W    R2,??DataTable7_4
   \      0x392   0x4290             CMP      R0,R2
   \      0x394   0xD03B             BEQ.N    ??HAL_DMA_IRQHandler_17
   \      0x396   0x6820             LDR      R0,[R4, #+0]
   \      0x398   0x.... 0x....      LDR.W    R2,??DataTable7_5
   \      0x39C   0x4290             CMP      R0,R2
   \      0x39E   0xD036             BEQ.N    ??HAL_DMA_IRQHandler_17
   \      0x3A0   0x6820             LDR      R0,[R4, #+0]
   \      0x3A2   0x.... 0x....      LDR.W    R2,??DataTable7_6
   \      0x3A6   0x4290             CMP      R0,R2
   \      0x3A8   0xD031             BEQ.N    ??HAL_DMA_IRQHandler_17
   \      0x3AA   0x6820             LDR      R0,[R4, #+0]
   \      0x3AC   0x.... 0x....      LDR.W    R2,??DataTable7_7
   \      0x3B0   0x4290             CMP      R0,R2
   \      0x3B2   0xD02C             BEQ.N    ??HAL_DMA_IRQHandler_17
   \      0x3B4   0x6820             LDR      R0,[R4, #+0]
   \      0x3B6   0x.... 0x....      LDR.W    R2,??DataTable7_8
   \      0x3BA   0x4290             CMP      R0,R2
   \      0x3BC   0xD027             BEQ.N    ??HAL_DMA_IRQHandler_17
   \      0x3BE   0x6820             LDR      R0,[R4, #+0]
   \      0x3C0   0x.... 0x....      LDR.W    R2,??DataTable7_9
   \      0x3C4   0x4290             CMP      R0,R2
   \      0x3C6   0xD022             BEQ.N    ??HAL_DMA_IRQHandler_17
   \      0x3C8   0x6820             LDR      R0,[R4, #+0]
   \      0x3CA   0x.... 0x....      LDR.W    R2,??DataTable7_10
   \      0x3CE   0x4290             CMP      R0,R2
   \      0x3D0   0xD01D             BEQ.N    ??HAL_DMA_IRQHandler_17
   \      0x3D2   0x6820             LDR      R0,[R4, #+0]
   \      0x3D4   0x.... 0x....      LDR.W    R2,??DataTable7_11
   \      0x3D8   0x4290             CMP      R0,R2
   \      0x3DA   0xD018             BEQ.N    ??HAL_DMA_IRQHandler_17
   \      0x3DC   0x6820             LDR      R0,[R4, #+0]
   \      0x3DE   0x.... 0x....      LDR.W    R2,??DataTable7_12
   \      0x3E2   0x4290             CMP      R0,R2
   \      0x3E4   0xD013             BEQ.N    ??HAL_DMA_IRQHandler_17
   \      0x3E6   0x6820             LDR      R0,[R4, #+0]
   \      0x3E8   0x.... 0x....      LDR.W    R2,??DataTable7_13
   \      0x3EC   0x4290             CMP      R0,R2
   \      0x3EE   0xD00E             BEQ.N    ??HAL_DMA_IRQHandler_17
   \      0x3F0   0x6820             LDR      R0,[R4, #+0]
   \      0x3F2   0x.... 0x....      LDR.W    R2,??DataTable7_14
   \      0x3F6   0x4290             CMP      R0,R2
   \      0x3F8   0xD009             BEQ.N    ??HAL_DMA_IRQHandler_17
   \      0x3FA   0x6820             LDR      R0,[R4, #+0]
   \      0x3FC   0x.... 0x....      LDR.W    R2,??DataTable7_15
   \      0x400   0x4290             CMP      R0,R2
   \      0x402   0xD004             BEQ.N    ??HAL_DMA_IRQHandler_17
   \      0x404   0x6820             LDR      R0,[R4, #+0]
   \      0x406   0x.... 0x....      LDR.W    R2,??DataTable7_16
   \      0x40A   0x4290             CMP      R0,R2
   \      0x40C   0xD104             BNE.N    ??HAL_DMA_IRQHandler_18
   \                     ??HAL_DMA_IRQHandler_17: (+1)
   \      0x40E   0x6820             LDR      R0,[R4, #+0]
   \      0x410   0x6800             LDR      R0,[R0, #+0]
   \      0x412   0xF010 0x0008      ANDS     R0,R0,#0x8
   \      0x416   0xE003             B.N      ??HAL_DMA_IRQHandler_19
   \                     ??HAL_DMA_IRQHandler_18: (+1)
   \      0x418   0x6820             LDR      R0,[R4, #+0]
   \      0x41A   0x6800             LDR      R0,[R0, #+0]
   \      0x41C   0xF010 0x0004      ANDS     R0,R0,#0x4
   \                     ??HAL_DMA_IRQHandler_19: (+1)
   \      0x420   0x2800             CMP      R0,#+0
   \      0x422   0xD02B             BEQ.N    ??HAL_DMA_IRQHandler_16
   1261                {
   1262                  /* Clear the half transfer complete flag */
   1263                  regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
   \      0x424   0xF894 0x005C      LDRB     R0,[R4, #+92]
   \      0x428   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \      0x42C   0x4081             LSLS     R1,R1,R0
   \      0x42E   0x60B1             STR      R1,[R6, #+8]
   1264          
   1265                  /* Multi_Buffering mode enabled */
   1266                  if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
   \      0x430   0x6820             LDR      R0,[R4, #+0]
   \      0x432   0x6800             LDR      R0,[R0, #+0]
   \      0x434   0x0340             LSLS     R0,R0,#+13
   \      0x436   0xD511             BPL.N    ??HAL_DMA_IRQHandler_20
   1267                  {
   1268                    /* Current memory buffer used is Memory 0 */
   1269                    if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
   \      0x438   0x6820             LDR      R0,[R4, #+0]
   \      0x43A   0x6800             LDR      R0,[R0, #+0]
   \      0x43C   0x0300             LSLS     R0,R0,#+12
   \      0x43E   0xD406             BMI.N    ??HAL_DMA_IRQHandler_21
   1270                    {
   1271                      if(hdma->XferHalfCpltCallback != NULL)
   \      0x440   0x6C20             LDR      R0,[R4, #+64]
   \      0x442   0x2800             CMP      R0,#+0
   \      0x444   0xD01A             BEQ.N    ??HAL_DMA_IRQHandler_16
   1272                      {
   1273                        /* Half transfer callback */
   1274                        hdma->XferHalfCpltCallback(hdma);
   \      0x446   0x0020             MOVS     R0,R4
   \      0x448   0x6C21             LDR      R1,[R4, #+64]
   \      0x44A   0x4788             BLX      R1
   \      0x44C   0xE016             B.N      ??HAL_DMA_IRQHandler_16
   1275                      }
   1276                    }
   1277                    /* Current memory buffer used is Memory 1 */
   1278                    else
   1279                    {
   1280                      if(hdma->XferM1HalfCpltCallback != NULL)
   \                     ??HAL_DMA_IRQHandler_21: (+1)
   \      0x44E   0x6CA0             LDR      R0,[R4, #+72]
   \      0x450   0x2800             CMP      R0,#+0
   \      0x452   0xD013             BEQ.N    ??HAL_DMA_IRQHandler_16
   1281                      {
   1282                        /* Half transfer callback */
   1283                        hdma->XferM1HalfCpltCallback(hdma);
   \      0x454   0x0020             MOVS     R0,R4
   \      0x456   0x6CA1             LDR      R1,[R4, #+72]
   \      0x458   0x4788             BLX      R1
   \      0x45A   0xE00F             B.N      ??HAL_DMA_IRQHandler_16
   1284                      }
   1285                    }
   1286                  }
   1287                  else
   1288                  {
   1289                    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
   1290                    if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
   \                     ??HAL_DMA_IRQHandler_20: (+1)
   \      0x45C   0x6820             LDR      R0,[R4, #+0]
   \      0x45E   0x6800             LDR      R0,[R0, #+0]
   \      0x460   0x05C0             LSLS     R0,R0,#+23
   \      0x462   0xD405             BMI.N    ??HAL_DMA_IRQHandler_22
   1291                    {
   1292                      /* Disable the half transfer interrupt */
   1293                      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
   \      0x464   0x6820             LDR      R0,[R4, #+0]
   \      0x466   0x6800             LDR      R0,[R0, #+0]
   \      0x468   0xF030 0x0008      BICS     R0,R0,#0x8
   \      0x46C   0x6821             LDR      R1,[R4, #+0]
   \      0x46E   0x6008             STR      R0,[R1, #+0]
   1294                    }
   1295          
   1296                    if(hdma->XferHalfCpltCallback != NULL)
   \                     ??HAL_DMA_IRQHandler_22: (+1)
   \      0x470   0x6C20             LDR      R0,[R4, #+64]
   \      0x472   0x2800             CMP      R0,#+0
   \      0x474   0xD002             BEQ.N    ??HAL_DMA_IRQHandler_16
   1297                    {
   1298                      /* Half transfer callback */
   1299                      hdma->XferHalfCpltCallback(hdma);
   \      0x476   0x0020             MOVS     R0,R4
   \      0x478   0x6C21             LDR      R1,[R4, #+64]
   \      0x47A   0x4788             BLX      R1
   1300                    }
   1301                  }
   1302                }
   1303              }
   1304              /* Transfer Complete Interrupt management ***********************************/
   1305              if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
   \                     ??HAL_DMA_IRQHandler_16: (+1)
   \      0x47C   0x2120             MOVS     R1,#+32
   \      0x47E   0xF894 0x005C      LDRB     R0,[R4, #+92]
   \      0x482   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \      0x486   0xFA11 0xF000      LSLS     R0,R1,R0
   \      0x48A   0x4207             TST      R7,R0
   \      0x48C   0xF000 0x80BB      BEQ.W    ??HAL_DMA_IRQHandler_23
   1306              {
   1307                if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
   \      0x490   0x6820             LDR      R0,[R4, #+0]
   \      0x492   0x4540             CMP      R0,R8
   \      0x494   0xD04A             BEQ.N    ??HAL_DMA_IRQHandler_24
   \      0x496   0x6820             LDR      R0,[R4, #+0]
   \      0x498   0x.... 0x....      LDR.W    R2,??DataTable7_2
   \      0x49C   0x4290             CMP      R0,R2
   \      0x49E   0xD045             BEQ.N    ??HAL_DMA_IRQHandler_24
   \      0x4A0   0x6820             LDR      R0,[R4, #+0]
   \      0x4A2   0x.... 0x....      LDR.W    R2,??DataTable7_3
   \      0x4A6   0x4290             CMP      R0,R2
   \      0x4A8   0xD040             BEQ.N    ??HAL_DMA_IRQHandler_24
   \      0x4AA   0x6820             LDR      R0,[R4, #+0]
   \      0x4AC   0x.... 0x....      LDR.W    R2,??DataTable7_4
   \      0x4B0   0x4290             CMP      R0,R2
   \      0x4B2   0xD03B             BEQ.N    ??HAL_DMA_IRQHandler_24
   \      0x4B4   0x6820             LDR      R0,[R4, #+0]
   \      0x4B6   0x.... 0x....      LDR.W    R2,??DataTable7_5
   \      0x4BA   0x4290             CMP      R0,R2
   \      0x4BC   0xD036             BEQ.N    ??HAL_DMA_IRQHandler_24
   \      0x4BE   0x6820             LDR      R0,[R4, #+0]
   \      0x4C0   0x.... 0x....      LDR.W    R2,??DataTable7_6
   \      0x4C4   0x4290             CMP      R0,R2
   \      0x4C6   0xD031             BEQ.N    ??HAL_DMA_IRQHandler_24
   \      0x4C8   0x6820             LDR      R0,[R4, #+0]
   \      0x4CA   0x.... 0x....      LDR.W    R2,??DataTable7_7
   \      0x4CE   0x4290             CMP      R0,R2
   \      0x4D0   0xD02C             BEQ.N    ??HAL_DMA_IRQHandler_24
   \      0x4D2   0x6820             LDR      R0,[R4, #+0]
   \      0x4D4   0x.... 0x....      LDR.W    R2,??DataTable7_8
   \      0x4D8   0x4290             CMP      R0,R2
   \      0x4DA   0xD027             BEQ.N    ??HAL_DMA_IRQHandler_24
   \      0x4DC   0x6820             LDR      R0,[R4, #+0]
   \      0x4DE   0x.... 0x....      LDR.W    R2,??DataTable7_9
   \      0x4E2   0x4290             CMP      R0,R2
   \      0x4E4   0xD022             BEQ.N    ??HAL_DMA_IRQHandler_24
   \      0x4E6   0x6820             LDR      R0,[R4, #+0]
   \      0x4E8   0x.... 0x....      LDR.W    R2,??DataTable7_10
   \      0x4EC   0x4290             CMP      R0,R2
   \      0x4EE   0xD01D             BEQ.N    ??HAL_DMA_IRQHandler_24
   \      0x4F0   0x6820             LDR      R0,[R4, #+0]
   \      0x4F2   0x.... 0x....      LDR.W    R2,??DataTable7_11
   \      0x4F6   0x4290             CMP      R0,R2
   \      0x4F8   0xD018             BEQ.N    ??HAL_DMA_IRQHandler_24
   \      0x4FA   0x6820             LDR      R0,[R4, #+0]
   \      0x4FC   0x.... 0x....      LDR.W    R2,??DataTable7_12
   \      0x500   0x4290             CMP      R0,R2
   \      0x502   0xD013             BEQ.N    ??HAL_DMA_IRQHandler_24
   \      0x504   0x6820             LDR      R0,[R4, #+0]
   \      0x506   0x.... 0x....      LDR.W    R2,??DataTable7_13
   \      0x50A   0x4290             CMP      R0,R2
   \      0x50C   0xD00E             BEQ.N    ??HAL_DMA_IRQHandler_24
   \      0x50E   0x6820             LDR      R0,[R4, #+0]
   \      0x510   0x.... 0x....      LDR.W    R2,??DataTable7_14
   \      0x514   0x4290             CMP      R0,R2
   \      0x516   0xD009             BEQ.N    ??HAL_DMA_IRQHandler_24
   \      0x518   0x6820             LDR      R0,[R4, #+0]
   \      0x51A   0x.... 0x....      LDR.W    R2,??DataTable7_15
   \      0x51E   0x4290             CMP      R0,R2
   \      0x520   0xD004             BEQ.N    ??HAL_DMA_IRQHandler_24
   \      0x522   0x6820             LDR      R0,[R4, #+0]
   \      0x524   0x.... 0x....      LDR.W    R2,??DataTable7_16
   \      0x528   0x4290             CMP      R0,R2
   \      0x52A   0xD104             BNE.N    ??HAL_DMA_IRQHandler_25
   \                     ??HAL_DMA_IRQHandler_24: (+1)
   \      0x52C   0x6820             LDR      R0,[R4, #+0]
   \      0x52E   0x6800             LDR      R0,[R0, #+0]
   \      0x530   0xF010 0x0010      ANDS     R0,R0,#0x10
   \      0x534   0xE003             B.N      ??HAL_DMA_IRQHandler_26
   \                     ??HAL_DMA_IRQHandler_25: (+1)
   \      0x536   0x6820             LDR      R0,[R4, #+0]
   \      0x538   0x6800             LDR      R0,[R0, #+0]
   \      0x53A   0xF010 0x0002      ANDS     R0,R0,#0x2
   \                     ??HAL_DMA_IRQHandler_26: (+1)
   \      0x53E   0x2800             CMP      R0,#+0
   \      0x540   0xD061             BEQ.N    ??HAL_DMA_IRQHandler_23
   1308                {
   1309                  /* Clear the transfer complete flag */
   1310                  regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
   \      0x542   0xF894 0x005C      LDRB     R0,[R4, #+92]
   \      0x546   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \      0x54A   0x4081             LSLS     R1,R1,R0
   \      0x54C   0x60B1             STR      R1,[R6, #+8]
   1311          
   1312                  if(HAL_DMA_STATE_ABORT == hdma->State)
   \      0x54E   0xF894 0x0035      LDRB     R0,[R4, #+53]
   \      0x552   0x2804             CMP      R0,#+4
   \      0x554   0xD12B             BNE.N    ??HAL_DMA_IRQHandler_27
   1313                  {
   1314                    /* Disable all the transfer interrupts */
   1315                    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
   \      0x556   0x6820             LDR      R0,[R4, #+0]
   \      0x558   0x6800             LDR      R0,[R0, #+0]
   \      0x55A   0xF030 0x0016      BICS     R0,R0,#0x16
   \      0x55E   0x6821             LDR      R1,[R4, #+0]
   \      0x560   0x6008             STR      R0,[R1, #+0]
   1316                    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
   \      0x562   0x6820             LDR      R0,[R4, #+0]
   \      0x564   0x6940             LDR      R0,[R0, #+20]
   \      0x566   0xF030 0x0080      BICS     R0,R0,#0x80
   \      0x56A   0x6821             LDR      R1,[R4, #+0]
   \      0x56C   0x6148             STR      R0,[R1, #+20]
   1317          
   1318                    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
   \      0x56E   0x6C20             LDR      R0,[R4, #+64]
   \      0x570   0x2800             CMP      R0,#+0
   \      0x572   0xD102             BNE.N    ??HAL_DMA_IRQHandler_28
   \      0x574   0x6CA0             LDR      R0,[R4, #+72]
   \      0x576   0x2800             CMP      R0,#+0
   \      0x578   0xD005             BEQ.N    ??HAL_DMA_IRQHandler_29
   1319                    {
   1320                      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
   \                     ??HAL_DMA_IRQHandler_28: (+1)
   \      0x57A   0x6820             LDR      R0,[R4, #+0]
   \      0x57C   0x6800             LDR      R0,[R0, #+0]
   \      0x57E   0xF030 0x0008      BICS     R0,R0,#0x8
   \      0x582   0x6821             LDR      R1,[R4, #+0]
   \      0x584   0x6008             STR      R0,[R1, #+0]
   1321                    }
   1322          
   1323                    /* Clear all interrupt flags at correct offset within the register */
   1324                    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
   \                     ??HAL_DMA_IRQHandler_29: (+1)
   \      0x586   0x203F             MOVS     R0,#+63
   \      0x588   0xF894 0x105C      LDRB     R1,[R4, #+92]
   \      0x58C   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \      0x590   0x4088             LSLS     R0,R0,R1
   \      0x592   0x60B0             STR      R0,[R6, #+8]
   1325          
   1326                    /* Change the DMA state */
   1327                    hdma->State = HAL_DMA_STATE_READY;
   \      0x594   0x2001             MOVS     R0,#+1
   \      0x596   0xF884 0x0035      STRB     R0,[R4, #+53]
   1328          
   1329                    /* Process Unlocked */
   1330                    __HAL_UNLOCK(hdma);
   \      0x59A   0x2000             MOVS     R0,#+0
   \      0x59C   0xF884 0x0034      STRB     R0,[R4, #+52]
   1331          
   1332                    if(hdma->XferAbortCallback != NULL)
   \      0x5A0   0x6D20             LDR      R0,[R4, #+80]
   \      0x5A2   0x2800             CMP      R0,#+0
   \      0x5A4   0xD002             BEQ.N    ??HAL_DMA_IRQHandler_30
   1333                    {
   1334                      hdma->XferAbortCallback(hdma);
   \      0x5A6   0x0020             MOVS     R0,R4
   \      0x5A8   0x6D21             LDR      R1,[R4, #+80]
   \      0x5AA   0x4788             BLX      R1
   1335                    }
   1336                    return;
   \                     ??HAL_DMA_IRQHandler_30: (+1)
   \      0x5AC   0xE26F             B.N      ??HAL_DMA_IRQHandler_31
   1337                  }
   1338          
   1339                  if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
   \                     ??HAL_DMA_IRQHandler_27: (+1)
   \      0x5AE   0x6820             LDR      R0,[R4, #+0]
   \      0x5B0   0x6800             LDR      R0,[R0, #+0]
   \      0x5B2   0x0340             LSLS     R0,R0,#+13
   \      0x5B4   0xD511             BPL.N    ??HAL_DMA_IRQHandler_32
   1340                  {
   1341                    /* Current memory buffer used is Memory 0 */
   1342                    if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
   \      0x5B6   0x6820             LDR      R0,[R4, #+0]
   \      0x5B8   0x6800             LDR      R0,[R0, #+0]
   \      0x5BA   0x0300             LSLS     R0,R0,#+12
   \      0x5BC   0xD406             BMI.N    ??HAL_DMA_IRQHandler_33
   1343                    {
   1344                      if(hdma->XferM1CpltCallback != NULL)
   \      0x5BE   0x6C60             LDR      R0,[R4, #+68]
   \      0x5C0   0x2800             CMP      R0,#+0
   \      0x5C2   0xD020             BEQ.N    ??HAL_DMA_IRQHandler_23
   1345                      {
   1346                        /* Transfer complete Callback for memory1 */
   1347                        hdma->XferM1CpltCallback(hdma);
   \      0x5C4   0x0020             MOVS     R0,R4
   \      0x5C6   0x6C61             LDR      R1,[R4, #+68]
   \      0x5C8   0x4788             BLX      R1
   \      0x5CA   0xE01C             B.N      ??HAL_DMA_IRQHandler_23
   1348                      }
   1349                    }
   1350                    /* Current memory buffer used is Memory 1 */
   1351                    else
   1352                    {
   1353                      if(hdma->XferCpltCallback != NULL)
   \                     ??HAL_DMA_IRQHandler_33: (+1)
   \      0x5CC   0x6BE0             LDR      R0,[R4, #+60]
   \      0x5CE   0x2800             CMP      R0,#+0
   \      0x5D0   0xD019             BEQ.N    ??HAL_DMA_IRQHandler_23
   1354                      {
   1355                        /* Transfer complete Callback for memory0 */
   1356                        hdma->XferCpltCallback(hdma);
   \      0x5D2   0x0020             MOVS     R0,R4
   \      0x5D4   0x6BE1             LDR      R1,[R4, #+60]
   \      0x5D6   0x4788             BLX      R1
   \      0x5D8   0xE015             B.N      ??HAL_DMA_IRQHandler_23
   1357                      }
   1358                    }
   1359                  }
   1360                  /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
   1361                  else
   1362                  {
   1363                    if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
   \                     ??HAL_DMA_IRQHandler_32: (+1)
   \      0x5DA   0x6820             LDR      R0,[R4, #+0]
   \      0x5DC   0x6800             LDR      R0,[R0, #+0]
   \      0x5DE   0x05C0             LSLS     R0,R0,#+23
   \      0x5E0   0xD40B             BMI.N    ??HAL_DMA_IRQHandler_34
   1364                    {
   1365                      /* Disable the transfer complete interrupt */
   1366                      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
   \      0x5E2   0x6820             LDR      R0,[R4, #+0]
   \      0x5E4   0x6800             LDR      R0,[R0, #+0]
   \      0x5E6   0xF030 0x0010      BICS     R0,R0,#0x10
   \      0x5EA   0x6821             LDR      R1,[R4, #+0]
   \      0x5EC   0x6008             STR      R0,[R1, #+0]
   1367          
   1368                      /* Change the DMA state */
   1369                      hdma->State = HAL_DMA_STATE_READY;
   \      0x5EE   0x2001             MOVS     R0,#+1
   \      0x5F0   0xF884 0x0035      STRB     R0,[R4, #+53]
   1370          
   1371                      /* Process Unlocked */
   1372                      __HAL_UNLOCK(hdma);
   \      0x5F4   0x2000             MOVS     R0,#+0
   \      0x5F6   0xF884 0x0034      STRB     R0,[R4, #+52]
   1373                    }
   1374          
   1375                    if(hdma->XferCpltCallback != NULL)
   \                     ??HAL_DMA_IRQHandler_34: (+1)
   \      0x5FA   0x6BE0             LDR      R0,[R4, #+60]
   \      0x5FC   0x2800             CMP      R0,#+0
   \      0x5FE   0xD002             BEQ.N    ??HAL_DMA_IRQHandler_23
   1376                    {
   1377                      /* Transfer complete callback */
   1378                      hdma->XferCpltCallback(hdma);
   \      0x600   0x0020             MOVS     R0,R4
   \      0x602   0x6BE1             LDR      R1,[R4, #+60]
   \      0x604   0x4788             BLX      R1
   1379                    }
   1380                  }
   1381                }
   1382              }
   1383          
   1384              /* manage error case */
   1385              if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
   \                     ??HAL_DMA_IRQHandler_23: (+1)
   \      0x606   0x6D60             LDR      R0,[R4, #+84]
   \      0x608   0x2800             CMP      R0,#+0
   \      0x60A   0xF000 0x8240      BEQ.W    ??HAL_DMA_IRQHandler_35
   1386              {
   1387                if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
   \      0x60E   0x6D60             LDR      R0,[R4, #+84]
   \      0x610   0x07C0             LSLS     R0,R0,#+31
   \      0x612   0xD575             BPL.N    ??HAL_DMA_IRQHandler_36
   1388                {
   1389                  hdma->State = HAL_DMA_STATE_ABORT;
   \      0x614   0x2004             MOVS     R0,#+4
   \      0x616   0xF884 0x0035      STRB     R0,[R4, #+53]
   1390          
   1391                  /* Disable the stream */
   1392                  __HAL_DMA_DISABLE(hdma);
   \      0x61A   0x6820             LDR      R0,[R4, #+0]
   \      0x61C   0x4540             CMP      R0,R8
   \      0x61E   0xD04A             BEQ.N    ??HAL_DMA_IRQHandler_37
   \      0x620   0x6820             LDR      R0,[R4, #+0]
   \      0x622   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \      0x626   0x4288             CMP      R0,R1
   \      0x628   0xD045             BEQ.N    ??HAL_DMA_IRQHandler_37
   \      0x62A   0x6820             LDR      R0,[R4, #+0]
   \      0x62C   0x.... 0x....      LDR.W    R1,??DataTable7_3
   \      0x630   0x4288             CMP      R0,R1
   \      0x632   0xD040             BEQ.N    ??HAL_DMA_IRQHandler_37
   \      0x634   0x6820             LDR      R0,[R4, #+0]
   \      0x636   0x.... 0x....      LDR.W    R1,??DataTable7_4
   \      0x63A   0x4288             CMP      R0,R1
   \      0x63C   0xD03B             BEQ.N    ??HAL_DMA_IRQHandler_37
   \      0x63E   0x6820             LDR      R0,[R4, #+0]
   \      0x640   0x.... 0x....      LDR.W    R1,??DataTable7_5
   \      0x644   0x4288             CMP      R0,R1
   \      0x646   0xD036             BEQ.N    ??HAL_DMA_IRQHandler_37
   \      0x648   0x6820             LDR      R0,[R4, #+0]
   \      0x64A   0x.... 0x....      LDR.W    R1,??DataTable7_6
   \      0x64E   0x4288             CMP      R0,R1
   \      0x650   0xD031             BEQ.N    ??HAL_DMA_IRQHandler_37
   \      0x652   0x6820             LDR      R0,[R4, #+0]
   \      0x654   0x.... 0x....      LDR.W    R1,??DataTable7_7
   \      0x658   0x4288             CMP      R0,R1
   \      0x65A   0xD02C             BEQ.N    ??HAL_DMA_IRQHandler_37
   \      0x65C   0x6820             LDR      R0,[R4, #+0]
   \      0x65E   0x.... 0x....      LDR.W    R1,??DataTable7_8
   \      0x662   0x4288             CMP      R0,R1
   \      0x664   0xD027             BEQ.N    ??HAL_DMA_IRQHandler_37
   \      0x666   0x6820             LDR      R0,[R4, #+0]
   \      0x668   0x.... 0x....      LDR.W    R1,??DataTable7_9
   \      0x66C   0x4288             CMP      R0,R1
   \      0x66E   0xD022             BEQ.N    ??HAL_DMA_IRQHandler_37
   \      0x670   0x6820             LDR      R0,[R4, #+0]
   \      0x672   0x.... 0x....      LDR.W    R1,??DataTable7_10
   \      0x676   0x4288             CMP      R0,R1
   \      0x678   0xD01D             BEQ.N    ??HAL_DMA_IRQHandler_37
   \      0x67A   0x6820             LDR      R0,[R4, #+0]
   \      0x67C   0x.... 0x....      LDR.W    R1,??DataTable7_11
   \      0x680   0x4288             CMP      R0,R1
   \      0x682   0xD018             BEQ.N    ??HAL_DMA_IRQHandler_37
   \      0x684   0x6820             LDR      R0,[R4, #+0]
   \      0x686   0x.... 0x....      LDR.W    R1,??DataTable7_12
   \      0x68A   0x4288             CMP      R0,R1
   \      0x68C   0xD013             BEQ.N    ??HAL_DMA_IRQHandler_37
   \      0x68E   0x6820             LDR      R0,[R4, #+0]
   \      0x690   0x.... 0x....      LDR.W    R1,??DataTable7_13
   \      0x694   0x4288             CMP      R0,R1
   \      0x696   0xD00E             BEQ.N    ??HAL_DMA_IRQHandler_37
   \      0x698   0x6820             LDR      R0,[R4, #+0]
   \      0x69A   0x.... 0x....      LDR.W    R1,??DataTable7_14
   \      0x69E   0x4288             CMP      R0,R1
   \      0x6A0   0xD009             BEQ.N    ??HAL_DMA_IRQHandler_37
   \      0x6A2   0x6820             LDR      R0,[R4, #+0]
   \      0x6A4   0x.... 0x....      LDR.W    R1,??DataTable7_15
   \      0x6A8   0x4288             CMP      R0,R1
   \      0x6AA   0xD004             BEQ.N    ??HAL_DMA_IRQHandler_37
   \      0x6AC   0x6820             LDR      R0,[R4, #+0]
   \      0x6AE   0x.... 0x....      LDR.W    R1,??DataTable7_16
   \      0x6B2   0x4288             CMP      R0,R1
   \      0x6B4   0xD106             BNE.N    ??HAL_DMA_IRQHandler_38
   \                     ??HAL_DMA_IRQHandler_37: (+1)
   \      0x6B6   0x6820             LDR      R0,[R4, #+0]
   \      0x6B8   0x6800             LDR      R0,[R0, #+0]
   \      0x6BA   0x0840             LSRS     R0,R0,#+1
   \      0x6BC   0x0040             LSLS     R0,R0,#+1
   \      0x6BE   0x6821             LDR      R1,[R4, #+0]
   \      0x6C0   0x6008             STR      R0,[R1, #+0]
   \      0x6C2   0xE005             B.N      ??HAL_DMA_IRQHandler_39
   \                     ??HAL_DMA_IRQHandler_38: (+1)
   \      0x6C4   0x6820             LDR      R0,[R4, #+0]
   \      0x6C6   0x6800             LDR      R0,[R0, #+0]
   \      0x6C8   0x0840             LSRS     R0,R0,#+1
   \      0x6CA   0x0040             LSLS     R0,R0,#+1
   \      0x6CC   0x6821             LDR      R1,[R4, #+0]
   \      0x6CE   0x6008             STR      R0,[R1, #+0]
   1393          
   1394                  do
   1395                  {
   1396                    if (++count > timeout)
   \                     ??HAL_DMA_IRQHandler_39: (+1)
   \      0x6D0   0x9800             LDR      R0,[SP, #+0]
   \      0x6D2   0x1C40             ADDS     R0,R0,#+1
   \      0x6D4   0x9000             STR      R0,[SP, #+0]
   \      0x6D6   0x4285             CMP      R5,R0
   \      0x6D8   0xD304             BCC.N    ??HAL_DMA_IRQHandler_40
   1397                    {
   1398                      break;
   1399                    }
   1400                  }
   1401                  while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
   \                     ??HAL_DMA_IRQHandler_41: (+1)
   \      0x6DA   0x6820             LDR      R0,[R4, #+0]
   \      0x6DC   0x6800             LDR      R0,[R0, #+0]
   \      0x6DE   0x07C0             LSLS     R0,R0,#+31
   \      0x6E0   0xD4F6             BMI.N    ??HAL_DMA_IRQHandler_39
   \      0x6E2   0xE7FF             B.N      ??HAL_DMA_IRQHandler_42
   1402          
   1403                  if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
   \                     ??HAL_DMA_IRQHandler_40: (+1)
   \                     ??HAL_DMA_IRQHandler_42: (+1)
   \      0x6E4   0x6820             LDR      R0,[R4, #+0]
   \      0x6E6   0x6800             LDR      R0,[R0, #+0]
   \      0x6E8   0x07C0             LSLS     R0,R0,#+31
   \      0x6EA   0xD503             BPL.N    ??HAL_DMA_IRQHandler_43
   1404                  {
   1405                    /* Change the DMA state to error if DMA disable fails */
   1406                    hdma->State = HAL_DMA_STATE_ERROR;
   \      0x6EC   0x2003             MOVS     R0,#+3
   \      0x6EE   0xF884 0x0035      STRB     R0,[R4, #+53]
   \      0x6F2   0xE002             B.N      ??HAL_DMA_IRQHandler_44
   1407                  }
   1408                  else
   1409                  {
   1410                    /* Change the DMA state to Ready if DMA disable success */
   1411                    hdma->State = HAL_DMA_STATE_READY;
   \                     ??HAL_DMA_IRQHandler_43: (+1)
   \      0x6F4   0x2001             MOVS     R0,#+1
   \      0x6F6   0xF884 0x0035      STRB     R0,[R4, #+53]
   1412                  }
   1413          
   1414                  /* Process Unlocked */
   1415                  __HAL_UNLOCK(hdma);
   \                     ??HAL_DMA_IRQHandler_44: (+1)
   \      0x6FA   0x2000             MOVS     R0,#+0
   \      0x6FC   0xF884 0x0034      STRB     R0,[R4, #+52]
   1416                }
   1417          
   1418                if(hdma->XferErrorCallback != NULL)
   \                     ??HAL_DMA_IRQHandler_36: (+1)
   \      0x700   0x6CE0             LDR      R0,[R4, #+76]
   \      0x702   0x2800             CMP      R0,#+0
   \      0x704   0xF000 0x81C3      BEQ.W    ??HAL_DMA_IRQHandler_35
   1419                {
   1420                  /* Transfer error callback */
   1421                  hdma->XferErrorCallback(hdma);
   \      0x708   0x0020             MOVS     R0,R4
   \      0x70A   0x6CE1             LDR      R1,[R4, #+76]
   \      0x70C   0x4788             BLX      R1
   \      0x70E   0xE1BE             B.N      ??HAL_DMA_IRQHandler_35
   1422                }
   1423              }
   1424            }
   1425            else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
   \                     ??HAL_DMA_IRQHandler_3: (+1)
   \      0x710   0x6820             LDR      R0,[R4, #+0]
   \      0x712   0x.... 0x....      LDR.W    R3,??DataTable9
   \      0x716   0x4298             CMP      R0,R3
   \      0x718   0xD04A             BEQ.N    ??HAL_DMA_IRQHandler_45
   \      0x71A   0x6820             LDR      R0,[R4, #+0]
   \      0x71C   0x.... 0x....      LDR.W    R3,??DataTable9_1
   \      0x720   0x4298             CMP      R0,R3
   \      0x722   0xD045             BEQ.N    ??HAL_DMA_IRQHandler_45
   \      0x724   0x6820             LDR      R0,[R4, #+0]
   \      0x726   0x.... 0x....      LDR.W    R3,??DataTable9_2
   \      0x72A   0x4298             CMP      R0,R3
   \      0x72C   0xD040             BEQ.N    ??HAL_DMA_IRQHandler_45
   \      0x72E   0x6820             LDR      R0,[R4, #+0]
   \      0x730   0x.... 0x....      LDR.W    R3,??DataTable9_3
   \      0x734   0x4298             CMP      R0,R3
   \      0x736   0xD03B             BEQ.N    ??HAL_DMA_IRQHandler_45
   \      0x738   0x6820             LDR      R0,[R4, #+0]
   \      0x73A   0x.... 0x....      LDR.W    R3,??DataTable9_4
   \      0x73E   0x4298             CMP      R0,R3
   \      0x740   0xD036             BEQ.N    ??HAL_DMA_IRQHandler_45
   \      0x742   0x6820             LDR      R0,[R4, #+0]
   \      0x744   0x.... 0x....      LDR.W    R3,??DataTable9_5
   \      0x748   0x4298             CMP      R0,R3
   \      0x74A   0xD031             BEQ.N    ??HAL_DMA_IRQHandler_45
   \      0x74C   0x6820             LDR      R0,[R4, #+0]
   \      0x74E   0x.... 0x....      LDR.W    R3,??DataTable9_6
   \      0x752   0x4298             CMP      R0,R3
   \      0x754   0xD02C             BEQ.N    ??HAL_DMA_IRQHandler_45
   \      0x756   0x6820             LDR      R0,[R4, #+0]
   \      0x758   0x.... 0x....      LDR.W    R3,??DataTable9_7
   \      0x75C   0x4298             CMP      R0,R3
   \      0x75E   0xD027             BEQ.N    ??HAL_DMA_IRQHandler_45
   \      0x760   0x6820             LDR      R0,[R4, #+0]
   \      0x762   0x.... 0x....      LDR.W    R3,??DataTable9_8
   \      0x766   0x4298             CMP      R0,R3
   \      0x768   0xD022             BEQ.N    ??HAL_DMA_IRQHandler_45
   \      0x76A   0x6820             LDR      R0,[R4, #+0]
   \      0x76C   0x.... 0x....      LDR.W    R3,??DataTable9_9
   \      0x770   0x4298             CMP      R0,R3
   \      0x772   0xD01D             BEQ.N    ??HAL_DMA_IRQHandler_45
   \      0x774   0x6820             LDR      R0,[R4, #+0]
   \      0x776   0x.... 0x....      LDR.W    R3,??DataTable9_10
   \      0x77A   0x4298             CMP      R0,R3
   \      0x77C   0xD018             BEQ.N    ??HAL_DMA_IRQHandler_45
   \      0x77E   0x6820             LDR      R0,[R4, #+0]
   \      0x780   0x.... 0x....      LDR.W    R3,??DataTable9_11
   \      0x784   0x4298             CMP      R0,R3
   \      0x786   0xD013             BEQ.N    ??HAL_DMA_IRQHandler_45
   \      0x788   0x6820             LDR      R0,[R4, #+0]
   \      0x78A   0x.... 0x....      LDR.W    R3,??DataTable9_12
   \      0x78E   0x4298             CMP      R0,R3
   \      0x790   0xD00E             BEQ.N    ??HAL_DMA_IRQHandler_45
   \      0x792   0x6820             LDR      R0,[R4, #+0]
   \      0x794   0x.... 0x....      LDR.W    R3,??DataTable9_13
   \      0x798   0x4298             CMP      R0,R3
   \      0x79A   0xD009             BEQ.N    ??HAL_DMA_IRQHandler_45
   \      0x79C   0x6820             LDR      R0,[R4, #+0]
   \      0x79E   0x.... 0x....      LDR.W    R3,??DataTable9_14
   \      0x7A2   0x4298             CMP      R0,R3
   \      0x7A4   0xD004             BEQ.N    ??HAL_DMA_IRQHandler_45
   \      0x7A6   0x6820             LDR      R0,[R4, #+0]
   \      0x7A8   0x.... 0x....      LDR.W    R3,??DataTable9_15
   \      0x7AC   0x4298             CMP      R0,R3
   \      0x7AE   0xD101             BNE.N    ??HAL_DMA_IRQHandler_46
   \                     ??HAL_DMA_IRQHandler_45: (+1)
   \      0x7B0   0x2001             MOVS     R0,#+1
   \      0x7B2   0xE000             B.N      ??HAL_DMA_IRQHandler_47
   \                     ??HAL_DMA_IRQHandler_46: (+1)
   \      0x7B4   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_IRQHandler_47: (+1)
   \      0x7B6   0xB2C0             UXTB     R0,R0
   \      0x7B8   0x2800             CMP      R0,#+0
   \      0x7BA   0xF000 0x8168      BEQ.W    ??HAL_DMA_IRQHandler_35
   1426            {
   1427              ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
   \      0x7BE   0x6820             LDR      R0,[R4, #+0]
   \      0x7C0   0x6800             LDR      R0,[R0, #+0]
   1428          
   1429              /* Half Transfer Complete Interrupt management ******************************/
   1430              if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
   \      0x7C2   0x2304             MOVS     R3,#+4
   \      0x7C4   0xF894 0x505C      LDRB     R5,[R4, #+92]
   \      0x7C8   0xF015 0x051F      ANDS     R5,R5,#0x1F
   \      0x7CC   0xFA13 0xF505      LSLS     R5,R3,R5
   \      0x7D0   0x422A             TST      R2,R5
   \      0x7D2   0xD071             BEQ.N    ??HAL_DMA_IRQHandler_48
   \      0x7D4   0x0745             LSLS     R5,R0,#+29
   \      0x7D6   0xD56F             BPL.N    ??HAL_DMA_IRQHandler_48
   1431              {
   1432                /* Clear the half transfer complete flag */
   1433                regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
   \      0x7D8   0xF894 0x205C      LDRB     R2,[R4, #+92]
   \      0x7DC   0xF012 0x021F      ANDS     R2,R2,#0x1F
   \      0x7E0   0x4093             LSLS     R3,R3,R2
   \      0x7E2   0x604B             STR      R3,[R1, #+4]
   1434          
   1435                /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
   1436                if((ccr_reg & BDMA_CCR_DBM) != 0U)
   \      0x7E4   0x0401             LSLS     R1,R0,#+16
   \      0x7E6   0xD511             BPL.N    ??HAL_DMA_IRQHandler_49
   1437                {
   1438                  /* Current memory buffer used is Memory 0 */
   1439                  if((ccr_reg & BDMA_CCR_CT) == 0U)
   \      0x7E8   0x03C0             LSLS     R0,R0,#+15
   \      0x7EA   0xD407             BMI.N    ??HAL_DMA_IRQHandler_50
   1440                  {
   1441                    if(hdma->XferM1HalfCpltCallback != NULL)
   \      0x7EC   0x6CA0             LDR      R0,[R4, #+72]
   \      0x7EE   0x2800             CMP      R0,#+0
   \      0x7F0   0xF000 0x814D      BEQ.W    ??HAL_DMA_IRQHandler_35
   1442                    {
   1443                      /* Half transfer Callback for Memory 1 */
   1444                      hdma->XferM1HalfCpltCallback(hdma);
   \      0x7F4   0x0020             MOVS     R0,R4
   \      0x7F6   0x6CA1             LDR      R1,[R4, #+72]
   \      0x7F8   0x4788             BLX      R1
   \      0x7FA   0xE148             B.N      ??HAL_DMA_IRQHandler_35
   1445                    }
   1446                  }
   1447                  /* Current memory buffer used is Memory 1 */
   1448                  else
   1449                  {
   1450                    if(hdma->XferHalfCpltCallback != NULL)
   \                     ??HAL_DMA_IRQHandler_50: (+1)
   \      0x7FC   0x6C20             LDR      R0,[R4, #+64]
   \      0x7FE   0x2800             CMP      R0,#+0
   \      0x800   0xF000 0x8145      BEQ.W    ??HAL_DMA_IRQHandler_35
   1451                    {
   1452                      /* Half transfer Callback for Memory 0 */
   1453                      hdma->XferHalfCpltCallback(hdma);
   \      0x804   0x0020             MOVS     R0,R4
   \      0x806   0x6C21             LDR      R1,[R4, #+64]
   \      0x808   0x4788             BLX      R1
   \      0x80A   0xE140             B.N      ??HAL_DMA_IRQHandler_35
   1454                    }
   1455                  }
   1456                }
   1457                else
   1458                {
   1459                  if((ccr_reg & BDMA_CCR_CIRC) == 0U)
   \                     ??HAL_DMA_IRQHandler_49: (+1)
   \      0x80C   0x0680             LSLS     R0,R0,#+26
   \      0x80E   0xD44B             BMI.N    ??HAL_DMA_IRQHandler_51
   1460                  {
   1461                    /* Disable the half transfer interrupt */
   1462                    __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
   \      0x810   0x6820             LDR      R0,[R4, #+0]
   \      0x812   0x4540             CMP      R0,R8
   \      0x814   0xD03B             BEQ.N    ??HAL_DMA_IRQHandler_52
   \      0x816   0x6820             LDR      R0,[R4, #+0]
   \      0x818   0x....             LDR.N    R1,??DataTable7_2
   \      0x81A   0x4288             CMP      R0,R1
   \      0x81C   0xD037             BEQ.N    ??HAL_DMA_IRQHandler_52
   \      0x81E   0x6820             LDR      R0,[R4, #+0]
   \      0x820   0x....             LDR.N    R1,??DataTable7_3
   \      0x822   0x4288             CMP      R0,R1
   \      0x824   0xD033             BEQ.N    ??HAL_DMA_IRQHandler_52
   \      0x826   0x6820             LDR      R0,[R4, #+0]
   \      0x828   0x....             LDR.N    R1,??DataTable7_4
   \      0x82A   0x4288             CMP      R0,R1
   \      0x82C   0xD02F             BEQ.N    ??HAL_DMA_IRQHandler_52
   \      0x82E   0x6820             LDR      R0,[R4, #+0]
   \      0x830   0x....             LDR.N    R1,??DataTable7_5
   \      0x832   0x4288             CMP      R0,R1
   \      0x834   0xD02B             BEQ.N    ??HAL_DMA_IRQHandler_52
   \      0x836   0x6820             LDR      R0,[R4, #+0]
   \      0x838   0x....             LDR.N    R1,??DataTable7_6
   \      0x83A   0x4288             CMP      R0,R1
   \      0x83C   0xD027             BEQ.N    ??HAL_DMA_IRQHandler_52
   \      0x83E   0x6820             LDR      R0,[R4, #+0]
   \      0x840   0x....             LDR.N    R1,??DataTable7_7
   \      0x842   0x4288             CMP      R0,R1
   \      0x844   0xD023             BEQ.N    ??HAL_DMA_IRQHandler_52
   \      0x846   0x6820             LDR      R0,[R4, #+0]
   \      0x848   0x....             LDR.N    R1,??DataTable7_8
   \      0x84A   0x4288             CMP      R0,R1
   \      0x84C   0xD01F             BEQ.N    ??HAL_DMA_IRQHandler_52
   \      0x84E   0x6820             LDR      R0,[R4, #+0]
   \      0x850   0x....             LDR.N    R1,??DataTable7_9
   \      0x852   0x4288             CMP      R0,R1
   \      0x854   0xD01B             BEQ.N    ??HAL_DMA_IRQHandler_52
   \      0x856   0x6820             LDR      R0,[R4, #+0]
   \      0x858   0x....             LDR.N    R1,??DataTable7_10
   \      0x85A   0x4288             CMP      R0,R1
   \      0x85C   0xD017             BEQ.N    ??HAL_DMA_IRQHandler_52
   \      0x85E   0x6820             LDR      R0,[R4, #+0]
   \      0x860   0x....             LDR.N    R1,??DataTable7_11
   \      0x862   0x4288             CMP      R0,R1
   \      0x864   0xD013             BEQ.N    ??HAL_DMA_IRQHandler_52
   \      0x866   0x6820             LDR      R0,[R4, #+0]
   \      0x868   0x....             LDR.N    R1,??DataTable7_12
   \      0x86A   0x4288             CMP      R0,R1
   \      0x86C   0xD00F             BEQ.N    ??HAL_DMA_IRQHandler_52
   \      0x86E   0x6820             LDR      R0,[R4, #+0]
   \      0x870   0x....             LDR.N    R1,??DataTable7_13
   \      0x872   0x4288             CMP      R0,R1
   \      0x874   0xD00B             BEQ.N    ??HAL_DMA_IRQHandler_52
   \      0x876   0x6820             LDR      R0,[R4, #+0]
   \      0x878   0x....             LDR.N    R1,??DataTable7_14
   \      0x87A   0x4288             CMP      R0,R1
   \      0x87C   0xD007             BEQ.N    ??HAL_DMA_IRQHandler_52
   \      0x87E   0x6820             LDR      R0,[R4, #+0]
   \      0x880   0x....             LDR.N    R1,??DataTable7_15
   \      0x882   0x4288             CMP      R0,R1
   \      0x884   0xD003             BEQ.N    ??HAL_DMA_IRQHandler_52
   \      0x886   0x6820             LDR      R0,[R4, #+0]
   \      0x888   0x....             LDR.N    R1,??DataTable7_16
   \      0x88A   0x4288             CMP      R0,R1
   \      0x88C   0xD106             BNE.N    ??HAL_DMA_IRQHandler_53
   \                     ??HAL_DMA_IRQHandler_52: (+1)
   \      0x88E   0x6820             LDR      R0,[R4, #+0]
   \      0x890   0x6800             LDR      R0,[R0, #+0]
   \      0x892   0xF030 0x0008      BICS     R0,R0,#0x8
   \      0x896   0x6821             LDR      R1,[R4, #+0]
   \      0x898   0x6008             STR      R0,[R1, #+0]
   \      0x89A   0xE005             B.N      ??HAL_DMA_IRQHandler_51
   \                     ??HAL_DMA_IRQHandler_53: (+1)
   \      0x89C   0x6820             LDR      R0,[R4, #+0]
   \      0x89E   0x6800             LDR      R0,[R0, #+0]
   \      0x8A0   0xF030 0x0004      BICS     R0,R0,#0x4
   \      0x8A4   0x6821             LDR      R1,[R4, #+0]
   \      0x8A6   0x6008             STR      R0,[R1, #+0]
   1463                  }
   1464          
   1465                  /* DMA peripheral state is not updated in Half Transfer */
   1466                  /* but in Transfer Complete case */
   1467          
   1468                 if(hdma->XferHalfCpltCallback != NULL)
   \                     ??HAL_DMA_IRQHandler_51: (+1)
   \      0x8A8   0x6C20             LDR      R0,[R4, #+64]
   \      0x8AA   0x2800             CMP      R0,#+0
   \      0x8AC   0xF000 0x80EF      BEQ.W    ??HAL_DMA_IRQHandler_35
   1469                  {
   1470                    /* Half transfer callback */
   1471                    hdma->XferHalfCpltCallback(hdma);
   \      0x8B0   0x0020             MOVS     R0,R4
   \      0x8B2   0x6C21             LDR      R1,[R4, #+64]
   \      0x8B4   0x4788             BLX      R1
   \      0x8B6   0xE0EA             B.N      ??HAL_DMA_IRQHandler_35
   1472                  }
   1473                }
   1474              }
   1475          
   1476              /* Transfer Complete Interrupt management ***********************************/
   1477              else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
   \                     ??HAL_DMA_IRQHandler_48: (+1)
   \      0x8B8   0x2302             MOVS     R3,#+2
   \      0x8BA   0xF894 0x505C      LDRB     R5,[R4, #+92]
   \      0x8BE   0xF015 0x051F      ANDS     R5,R5,#0x1F
   \      0x8C2   0xFA13 0xF505      LSLS     R5,R3,R5
   \      0x8C6   0x422A             TST      R2,R5
   \      0x8C8   0xD076             BEQ.N    ??HAL_DMA_IRQHandler_54
   \      0x8CA   0x0785             LSLS     R5,R0,#+30
   \      0x8CC   0xD574             BPL.N    ??HAL_DMA_IRQHandler_54
   1478              {
   1479                /* Clear the transfer complete flag */
   1480                regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
   \      0x8CE   0xF894 0x205C      LDRB     R2,[R4, #+92]
   \      0x8D2   0xF012 0x021F      ANDS     R2,R2,#0x1F
   \      0x8D6   0x4093             LSLS     R3,R3,R2
   \      0x8D8   0x604B             STR      R3,[R1, #+4]
   1481          
   1482                /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
   1483                if((ccr_reg & BDMA_CCR_DBM) != 0U)
   \      0x8DA   0x0401             LSLS     R1,R0,#+16
   \      0x8DC   0xD511             BPL.N    ??HAL_DMA_IRQHandler_55
   1484                {
   1485                  /* Current memory buffer used is Memory 0 */
   1486                  if((ccr_reg & BDMA_CCR_CT) == 0U)
   \      0x8DE   0x03C0             LSLS     R0,R0,#+15
   \      0x8E0   0xD407             BMI.N    ??HAL_DMA_IRQHandler_56
   1487                  {
   1488                    if(hdma->XferM1CpltCallback != NULL)
   \      0x8E2   0x6C60             LDR      R0,[R4, #+68]
   \      0x8E4   0x2800             CMP      R0,#+0
   \      0x8E6   0xF000 0x80D2      BEQ.W    ??HAL_DMA_IRQHandler_35
   1489                    {
   1490                      /* Transfer complete Callback for Memory 1 */
   1491                      hdma->XferM1CpltCallback(hdma);
   \      0x8EA   0x0020             MOVS     R0,R4
   \      0x8EC   0x6C61             LDR      R1,[R4, #+68]
   \      0x8EE   0x4788             BLX      R1
   \      0x8F0   0xE0CD             B.N      ??HAL_DMA_IRQHandler_35
   1492                    }
   1493                  }
   1494                  /* Current memory buffer used is Memory 1 */
   1495                  else
   1496                  {
   1497                    if(hdma->XferCpltCallback != NULL)
   \                     ??HAL_DMA_IRQHandler_56: (+1)
   \      0x8F2   0x6BE0             LDR      R0,[R4, #+60]
   \      0x8F4   0x2800             CMP      R0,#+0
   \      0x8F6   0xF000 0x80CA      BEQ.W    ??HAL_DMA_IRQHandler_35
   1498                    {
   1499                      /* Transfer complete Callback for Memory 0 */
   1500                      hdma->XferCpltCallback(hdma);
   \      0x8FA   0x0020             MOVS     R0,R4
   \      0x8FC   0x6BE1             LDR      R1,[R4, #+60]
   \      0x8FE   0x4788             BLX      R1
   \      0x900   0xE0C5             B.N      ??HAL_DMA_IRQHandler_35
   1501                    }
   1502                  }
   1503                }
   1504                else
   1505                {
   1506                  if((ccr_reg & BDMA_CCR_CIRC) == 0U)
   \                     ??HAL_DMA_IRQHandler_55: (+1)
   \      0x902   0x0680             LSLS     R0,R0,#+26
   \      0x904   0xD451             BMI.N    ??HAL_DMA_IRQHandler_57
   1507                  {
   1508                    /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
   1509                    __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
   \      0x906   0x6820             LDR      R0,[R4, #+0]
   \      0x908   0x4540             CMP      R0,R8
   \      0x90A   0xD03B             BEQ.N    ??HAL_DMA_IRQHandler_58
   \      0x90C   0x6820             LDR      R0,[R4, #+0]
   \      0x90E   0x....             LDR.N    R1,??DataTable7_2
   \      0x910   0x4288             CMP      R0,R1
   \      0x912   0xD037             BEQ.N    ??HAL_DMA_IRQHandler_58
   \      0x914   0x6820             LDR      R0,[R4, #+0]
   \      0x916   0x....             LDR.N    R1,??DataTable7_3
   \      0x918   0x4288             CMP      R0,R1
   \      0x91A   0xD033             BEQ.N    ??HAL_DMA_IRQHandler_58
   \      0x91C   0x6820             LDR      R0,[R4, #+0]
   \      0x91E   0x....             LDR.N    R1,??DataTable7_4
   \      0x920   0x4288             CMP      R0,R1
   \      0x922   0xD02F             BEQ.N    ??HAL_DMA_IRQHandler_58
   \      0x924   0x6820             LDR      R0,[R4, #+0]
   \      0x926   0x....             LDR.N    R1,??DataTable7_5
   \      0x928   0x4288             CMP      R0,R1
   \      0x92A   0xD02B             BEQ.N    ??HAL_DMA_IRQHandler_58
   \      0x92C   0x6820             LDR      R0,[R4, #+0]
   \      0x92E   0x....             LDR.N    R1,??DataTable7_6
   \      0x930   0x4288             CMP      R0,R1
   \      0x932   0xD027             BEQ.N    ??HAL_DMA_IRQHandler_58
   \      0x934   0x6820             LDR      R0,[R4, #+0]
   \      0x936   0x....             LDR.N    R1,??DataTable7_7
   \      0x938   0x4288             CMP      R0,R1
   \      0x93A   0xD023             BEQ.N    ??HAL_DMA_IRQHandler_58
   \      0x93C   0x6820             LDR      R0,[R4, #+0]
   \      0x93E   0x....             LDR.N    R1,??DataTable7_8
   \      0x940   0x4288             CMP      R0,R1
   \      0x942   0xD01F             BEQ.N    ??HAL_DMA_IRQHandler_58
   \      0x944   0x6820             LDR      R0,[R4, #+0]
   \      0x946   0x....             LDR.N    R1,??DataTable7_9
   \      0x948   0x4288             CMP      R0,R1
   \      0x94A   0xD01B             BEQ.N    ??HAL_DMA_IRQHandler_58
   \      0x94C   0x6820             LDR      R0,[R4, #+0]
   \      0x94E   0x....             LDR.N    R1,??DataTable7_10
   \      0x950   0x4288             CMP      R0,R1
   \      0x952   0xD017             BEQ.N    ??HAL_DMA_IRQHandler_58
   \      0x954   0x6820             LDR      R0,[R4, #+0]
   \      0x956   0x....             LDR.N    R1,??DataTable7_11
   \      0x958   0x4288             CMP      R0,R1
   \      0x95A   0xD013             BEQ.N    ??HAL_DMA_IRQHandler_58
   \      0x95C   0x6820             LDR      R0,[R4, #+0]
   \      0x95E   0x....             LDR.N    R1,??DataTable7_12
   \      0x960   0x4288             CMP      R0,R1
   \      0x962   0xD00F             BEQ.N    ??HAL_DMA_IRQHandler_58
   \      0x964   0x6820             LDR      R0,[R4, #+0]
   \      0x966   0x....             LDR.N    R1,??DataTable7_13
   \      0x968   0x4288             CMP      R0,R1
   \      0x96A   0xD00B             BEQ.N    ??HAL_DMA_IRQHandler_58
   \      0x96C   0x6820             LDR      R0,[R4, #+0]
   \      0x96E   0x....             LDR.N    R1,??DataTable7_14
   \      0x970   0x4288             CMP      R0,R1
   \      0x972   0xD007             BEQ.N    ??HAL_DMA_IRQHandler_58
   \      0x974   0x6820             LDR      R0,[R4, #+0]
   \      0x976   0x....             LDR.N    R1,??DataTable7_15
   \      0x978   0x4288             CMP      R0,R1
   \      0x97A   0xD003             BEQ.N    ??HAL_DMA_IRQHandler_58
   \      0x97C   0x6820             LDR      R0,[R4, #+0]
   \      0x97E   0x....             LDR.N    R1,??DataTable7_16
   \      0x980   0x4288             CMP      R0,R1
   \      0x982   0xD106             BNE.N    ??HAL_DMA_IRQHandler_59
   \                     ??HAL_DMA_IRQHandler_58: (+1)
   \      0x984   0x6820             LDR      R0,[R4, #+0]
   \      0x986   0x6800             LDR      R0,[R0, #+0]
   \      0x988   0xF030 0x0014      BICS     R0,R0,#0x14
   \      0x98C   0x6821             LDR      R1,[R4, #+0]
   \      0x98E   0x6008             STR      R0,[R1, #+0]
   \      0x990   0xE005             B.N      ??HAL_DMA_IRQHandler_60
   \                     ??HAL_DMA_IRQHandler_59: (+1)
   \      0x992   0x6820             LDR      R0,[R4, #+0]
   \      0x994   0x6800             LDR      R0,[R0, #+0]
   \      0x996   0xF030 0x000A      BICS     R0,R0,#0xA
   \      0x99A   0x6821             LDR      R1,[R4, #+0]
   \      0x99C   0x6008             STR      R0,[R1, #+0]
   1510          
   1511                    /* Change the DMA state */
   1512                    hdma->State = HAL_DMA_STATE_READY;
   \                     ??HAL_DMA_IRQHandler_60: (+1)
   \      0x99E   0x2001             MOVS     R0,#+1
   \      0x9A0   0xF884 0x0035      STRB     R0,[R4, #+53]
   1513          
   1514                    /* Process Unlocked */
   1515                    __HAL_UNLOCK(hdma);
   \      0x9A4   0x2000             MOVS     R0,#+0
   \      0x9A6   0xF884 0x0034      STRB     R0,[R4, #+52]
   1516                  }
   1517          
   1518                  if(hdma->XferCpltCallback != NULL)
   \                     ??HAL_DMA_IRQHandler_57: (+1)
   \      0x9AA   0x6BE0             LDR      R0,[R4, #+60]
   \      0x9AC   0x2800             CMP      R0,#+0
   \      0x9AE   0xD06E             BEQ.N    ??HAL_DMA_IRQHandler_35
   1519                  {
   1520                    /* Transfer complete callback */
   1521                    hdma->XferCpltCallback(hdma);
   \      0x9B0   0x0020             MOVS     R0,R4
   \      0x9B2   0x6BE1             LDR      R1,[R4, #+60]
   \      0x9B4   0x4788             BLX      R1
   \      0x9B6   0xE06A             B.N      ??HAL_DMA_IRQHandler_35
   1522                  }
   1523                }
   1524              }
   1525              /* Transfer Error Interrupt management **************************************/
   1526              else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
   \                     ??HAL_DMA_IRQHandler_54: (+1)
   \      0x9B8   0x2308             MOVS     R3,#+8
   \      0x9BA   0xF894 0x505C      LDRB     R5,[R4, #+92]
   \      0x9BE   0xF015 0x051F      ANDS     R5,R5,#0x1F
   \      0x9C2   0x40AB             LSLS     R3,R3,R5
   \      0x9C4   0x421A             TST      R2,R3
   \      0x9C6   0xD062             BEQ.N    ??HAL_DMA_IRQHandler_35
   \      0x9C8   0x0700             LSLS     R0,R0,#+28
   \      0x9CA   0xD560             BPL.N    ??HAL_DMA_IRQHandler_35
   1527              {
   1528                /* When a DMA transfer error occurs */
   1529                /* A hardware clear of its EN bits is performed */
   1530                /* Disable ALL DMA IT */
   1531                __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
   \      0x9CC   0x6820             LDR      R0,[R4, #+0]
   \      0x9CE   0x4540             CMP      R0,R8
   \      0x9D0   0xD03B             BEQ.N    ??HAL_DMA_IRQHandler_61
   \      0x9D2   0x6820             LDR      R0,[R4, #+0]
   \      0x9D4   0x....             LDR.N    R2,??DataTable7_2
   \      0x9D6   0x4290             CMP      R0,R2
   \      0x9D8   0xD037             BEQ.N    ??HAL_DMA_IRQHandler_61
   \      0x9DA   0x6820             LDR      R0,[R4, #+0]
   \      0x9DC   0x....             LDR.N    R2,??DataTable7_3
   \      0x9DE   0x4290             CMP      R0,R2
   \      0x9E0   0xD033             BEQ.N    ??HAL_DMA_IRQHandler_61
   \      0x9E2   0x6820             LDR      R0,[R4, #+0]
   \      0x9E4   0x....             LDR.N    R2,??DataTable7_4
   \      0x9E6   0x4290             CMP      R0,R2
   \      0x9E8   0xD02F             BEQ.N    ??HAL_DMA_IRQHandler_61
   \      0x9EA   0x6820             LDR      R0,[R4, #+0]
   \      0x9EC   0x....             LDR.N    R2,??DataTable7_5
   \      0x9EE   0x4290             CMP      R0,R2
   \      0x9F0   0xD02B             BEQ.N    ??HAL_DMA_IRQHandler_61
   \      0x9F2   0x6820             LDR      R0,[R4, #+0]
   \      0x9F4   0x....             LDR.N    R2,??DataTable7_6
   \      0x9F6   0x4290             CMP      R0,R2
   \      0x9F8   0xD027             BEQ.N    ??HAL_DMA_IRQHandler_61
   \      0x9FA   0x6820             LDR      R0,[R4, #+0]
   \      0x9FC   0x....             LDR.N    R2,??DataTable7_7
   \      0x9FE   0x4290             CMP      R0,R2
   \      0xA00   0xD023             BEQ.N    ??HAL_DMA_IRQHandler_61
   \      0xA02   0x6820             LDR      R0,[R4, #+0]
   \      0xA04   0x....             LDR.N    R2,??DataTable7_8
   \      0xA06   0x4290             CMP      R0,R2
   \      0xA08   0xD01F             BEQ.N    ??HAL_DMA_IRQHandler_61
   \      0xA0A   0x6820             LDR      R0,[R4, #+0]
   \      0xA0C   0x....             LDR.N    R2,??DataTable7_9
   \      0xA0E   0x4290             CMP      R0,R2
   \      0xA10   0xD01B             BEQ.N    ??HAL_DMA_IRQHandler_61
   \      0xA12   0x6820             LDR      R0,[R4, #+0]
   \      0xA14   0x....             LDR.N    R2,??DataTable7_10
   \      0xA16   0x4290             CMP      R0,R2
   \      0xA18   0xD017             BEQ.N    ??HAL_DMA_IRQHandler_61
   \      0xA1A   0x6820             LDR      R0,[R4, #+0]
   \      0xA1C   0x....             LDR.N    R2,??DataTable7_11
   \      0xA1E   0x4290             CMP      R0,R2
   \      0xA20   0xD013             BEQ.N    ??HAL_DMA_IRQHandler_61
   \      0xA22   0x6820             LDR      R0,[R4, #+0]
   \      0xA24   0x....             LDR.N    R2,??DataTable7_12
   \      0xA26   0x4290             CMP      R0,R2
   \      0xA28   0xD00F             BEQ.N    ??HAL_DMA_IRQHandler_61
   \      0xA2A   0x6820             LDR      R0,[R4, #+0]
   \      0xA2C   0x....             LDR.N    R2,??DataTable7_13
   \      0xA2E   0x4290             CMP      R0,R2
   \      0xA30   0xD00B             BEQ.N    ??HAL_DMA_IRQHandler_61
   \      0xA32   0x6820             LDR      R0,[R4, #+0]
   \      0xA34   0x....             LDR.N    R2,??DataTable7_14
   \      0xA36   0x4290             CMP      R0,R2
   \      0xA38   0xD007             BEQ.N    ??HAL_DMA_IRQHandler_61
   \      0xA3A   0x6820             LDR      R0,[R4, #+0]
   \      0xA3C   0x....             LDR.N    R2,??DataTable7_15
   \      0xA3E   0x4290             CMP      R0,R2
   \      0xA40   0xD003             BEQ.N    ??HAL_DMA_IRQHandler_61
   \      0xA42   0x6820             LDR      R0,[R4, #+0]
   \      0xA44   0x....             LDR.N    R2,??DataTable7_16
   \      0xA46   0x4290             CMP      R0,R2
   \      0xA48   0xD106             BNE.N    ??HAL_DMA_IRQHandler_62
   \                     ??HAL_DMA_IRQHandler_61: (+1)
   \      0xA4A   0x6820             LDR      R0,[R4, #+0]
   \      0xA4C   0x6800             LDR      R0,[R0, #+0]
   \      0xA4E   0xF030 0x001C      BICS     R0,R0,#0x1C
   \      0xA52   0x6822             LDR      R2,[R4, #+0]
   \      0xA54   0x6010             STR      R0,[R2, #+0]
   \      0xA56   0xE005             B.N      ??HAL_DMA_IRQHandler_63
   \                     ??HAL_DMA_IRQHandler_62: (+1)
   \      0xA58   0x6820             LDR      R0,[R4, #+0]
   \      0xA5A   0x6800             LDR      R0,[R0, #+0]
   \      0xA5C   0xF030 0x000E      BICS     R0,R0,#0xE
   \      0xA60   0x6822             LDR      R2,[R4, #+0]
   \      0xA62   0x6010             STR      R0,[R2, #+0]
   1532          
   1533                /* Clear all flags */
   1534                regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
   \                     ??HAL_DMA_IRQHandler_63: (+1)
   \      0xA64   0x2001             MOVS     R0,#+1
   \      0xA66   0xF894 0x205C      LDRB     R2,[R4, #+92]
   \      0xA6A   0xF012 0x021F      ANDS     R2,R2,#0x1F
   \      0xA6E   0x4090             LSLS     R0,R0,R2
   \      0xA70   0x6048             STR      R0,[R1, #+4]
   1535          
   1536                /* Update error code */
   1537                hdma->ErrorCode = HAL_DMA_ERROR_TE;
   \      0xA72   0x2001             MOVS     R0,#+1
   \      0xA74   0x6560             STR      R0,[R4, #+84]
   1538          
   1539                /* Change the DMA state */
   1540                hdma->State = HAL_DMA_STATE_READY;
   \      0xA76   0x2001             MOVS     R0,#+1
   \      0xA78   0xF884 0x0035      STRB     R0,[R4, #+53]
   1541          
   1542                /* Process Unlocked */
   1543                __HAL_UNLOCK(hdma);
   \      0xA7C   0x2000             MOVS     R0,#+0
   \      0xA7E   0xF884 0x0034      STRB     R0,[R4, #+52]
   1544          
   1545                if (hdma->XferErrorCallback != NULL)
   \      0xA82   0x6CE0             LDR      R0,[R4, #+76]
   \      0xA84   0x2800             CMP      R0,#+0
   \      0xA86   0xD002             BEQ.N    ??HAL_DMA_IRQHandler_35
   1546                {
   1547                  /* Transfer error callback */
   1548                  hdma->XferErrorCallback(hdma);
   \      0xA88   0x0020             MOVS     R0,R4
   \      0xA8A   0x6CE1             LDR      R1,[R4, #+76]
   \      0xA8C   0x4788             BLX      R1
   1549                }
   1550              }
   1551              else
   1552              {
   1553                /* Nothing To Do */
   1554              }
   1555            }
   1556            else
   1557            {
   1558              /* Nothing To Do */
   1559            }
   1560          }
   \                     ??HAL_DMA_IRQHandler_35: (+1)
   \                     ??HAL_DMA_IRQHandler_31: (+1)
   \      0xA8E   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}
   1561          
   1562          /**
   1563            * @brief  Register callbacks
   1564            * @param  hdma:                 pointer to a DMA_HandleTypeDef structure that contains
   1565            *                               the configuration information for the specified DMA Stream.
   1566            * @param  CallbackID:           User Callback identifier
   1567            *                               a DMA_HandleTypeDef structure as parameter.
   1568            * @param  pCallback:            pointer to private callback function which has pointer to
   1569            *                               a DMA_HandleTypeDef structure as parameter.
   1570            * @retval HAL status
   1571            */

   \                                 In section .text, align 2, keep-with-next
   1572          HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
   1573          {
   \                     HAL_DMA_RegisterCallback: (+1)
   \        0x0   0xB410             PUSH     {R4}
   \        0x2   0x0003             MOVS     R3,R0
   1574          
   1575            HAL_StatusTypeDef status = HAL_OK;
   \        0x4   0x2000             MOVS     R0,#+0
   1576          
   1577            /* Check the DMA peripheral handle */
   1578            if(hdma == NULL)
   \        0x6   0x2B00             CMP      R3,#+0
   \        0x8   0xD101             BNE.N    ??HAL_DMA_RegisterCallback_0
   1579            {
   1580              return HAL_ERROR;
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0xE02B             B.N      ??HAL_DMA_RegisterCallback_1
   1581            }
   1582          
   1583            /* Process locked */
   1584            __HAL_LOCK(hdma);
   \                     ??HAL_DMA_RegisterCallback_0: (+1)
   \        0xE   0xF893 0x4034      LDRB     R4,[R3, #+52]
   \       0x12   0x2C01             CMP      R4,#+1
   \       0x14   0xD101             BNE.N    ??HAL_DMA_RegisterCallback_2
   \       0x16   0x2002             MOVS     R0,#+2
   \       0x18   0xE025             B.N      ??HAL_DMA_RegisterCallback_1
   \                     ??HAL_DMA_RegisterCallback_2: (+1)
   \       0x1A   0x2401             MOVS     R4,#+1
   \       0x1C   0xF883 0x4034      STRB     R4,[R3, #+52]
   1585          
   1586            if(HAL_DMA_STATE_READY == hdma->State)
   \       0x20   0xF893 0x4035      LDRB     R4,[R3, #+53]
   \       0x24   0x2C01             CMP      R4,#+1
   \       0x26   0xD119             BNE.N    ??HAL_DMA_RegisterCallback_3
   1587            {
   1588              switch (CallbackID)
   \       0x28   0xB2C9             UXTB     R1,R1
   \       0x2A   0x2900             CMP      R1,#+0
   \       0x2C   0xD008             BEQ.N    ??HAL_DMA_RegisterCallback_4
   \       0x2E   0x2902             CMP      R1,#+2
   \       0x30   0xD00A             BEQ.N    ??HAL_DMA_RegisterCallback_5
   \       0x32   0xD307             BCC.N    ??HAL_DMA_RegisterCallback_6
   \       0x34   0x2904             CMP      R1,#+4
   \       0x36   0xD00B             BEQ.N    ??HAL_DMA_RegisterCallback_7
   \       0x38   0xD308             BCC.N    ??HAL_DMA_RegisterCallback_8
   \       0x3A   0x2905             CMP      R1,#+5
   \       0x3C   0xD00A             BEQ.N    ??HAL_DMA_RegisterCallback_9
   \       0x3E   0xE00B             B.N      ??HAL_DMA_RegisterCallback_10
   1589              {
   1590              case  HAL_DMA_XFER_CPLT_CB_ID:
   1591                hdma->XferCpltCallback = pCallback;
   \                     ??HAL_DMA_RegisterCallback_4: (+1)
   \       0x40   0x63DA             STR      R2,[R3, #+60]
   1592                break;
   \       0x42   0xE00C             B.N      ??HAL_DMA_RegisterCallback_11
   1593          
   1594              case  HAL_DMA_XFER_HALFCPLT_CB_ID:
   1595                hdma->XferHalfCpltCallback = pCallback;
   \                     ??HAL_DMA_RegisterCallback_6: (+1)
   \       0x44   0x641A             STR      R2,[R3, #+64]
   1596                break;
   \       0x46   0xE00A             B.N      ??HAL_DMA_RegisterCallback_11
   1597          
   1598              case  HAL_DMA_XFER_M1CPLT_CB_ID:
   1599                hdma->XferM1CpltCallback = pCallback;
   \                     ??HAL_DMA_RegisterCallback_5: (+1)
   \       0x48   0x645A             STR      R2,[R3, #+68]
   1600                break;
   \       0x4A   0xE008             B.N      ??HAL_DMA_RegisterCallback_11
   1601          
   1602              case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
   1603                hdma->XferM1HalfCpltCallback = pCallback;
   \                     ??HAL_DMA_RegisterCallback_8: (+1)
   \       0x4C   0x649A             STR      R2,[R3, #+72]
   1604                break;
   \       0x4E   0xE006             B.N      ??HAL_DMA_RegisterCallback_11
   1605          
   1606              case  HAL_DMA_XFER_ERROR_CB_ID:
   1607                hdma->XferErrorCallback = pCallback;
   \                     ??HAL_DMA_RegisterCallback_7: (+1)
   \       0x50   0x64DA             STR      R2,[R3, #+76]
   1608                break;
   \       0x52   0xE004             B.N      ??HAL_DMA_RegisterCallback_11
   1609          
   1610              case  HAL_DMA_XFER_ABORT_CB_ID:
   1611                hdma->XferAbortCallback = pCallback;
   \                     ??HAL_DMA_RegisterCallback_9: (+1)
   \       0x54   0x651A             STR      R2,[R3, #+80]
   1612                break;
   \       0x56   0xE002             B.N      ??HAL_DMA_RegisterCallback_11
   1613          
   1614              default:
   1615                status =  HAL_ERROR;
   \                     ??HAL_DMA_RegisterCallback_10: (+1)
   \       0x58   0x2001             MOVS     R0,#+1
   1616                break;
   \       0x5A   0xE000             B.N      ??HAL_DMA_RegisterCallback_11
   1617              }
   1618            }
   1619            else
   1620            {
   1621              /* Return error status */
   1622              status =  HAL_ERROR;
   \                     ??HAL_DMA_RegisterCallback_3: (+1)
   \       0x5C   0x2001             MOVS     R0,#+1
   1623            }
   1624          
   1625            /* Release Lock */
   1626            __HAL_UNLOCK(hdma);
   \                     ??HAL_DMA_RegisterCallback_11: (+1)
   \       0x5E   0x2100             MOVS     R1,#+0
   \       0x60   0xF883 0x1034      STRB     R1,[R3, #+52]
   1627          
   1628            return status;
   \       0x64   0xB2C0             UXTB     R0,R0
   \                     ??HAL_DMA_RegisterCallback_1: (+1)
   \       0x66   0xBC10             POP      {R4}
   \       0x68   0x4770             BX       LR
   1629          }
   1630          
   1631          /**
   1632            * @brief  UnRegister callbacks
   1633            * @param  hdma:                 pointer to a DMA_HandleTypeDef structure that contains
   1634            *                               the configuration information for the specified DMA Stream.
   1635            * @param  CallbackID:           User Callback identifier
   1636            *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
   1637            * @retval HAL status
   1638            */

   \                                 In section .text, align 2, keep-with-next
   1639          HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
   1640          {
   1641            HAL_StatusTypeDef status = HAL_OK;
   \                     HAL_DMA_UnRegisterCallback: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
   1642          
   1643            /* Check the DMA peripheral handle */
   1644            if(hdma == NULL)
   \        0x2   0x2800             CMP      R0,#+0
   \        0x4   0xD101             BNE.N    ??HAL_DMA_UnRegisterCallback_0
   1645            {
   1646              return HAL_ERROR;
   \        0x6   0x2001             MOVS     R0,#+1
   \        0x8   0xE040             B.N      ??HAL_DMA_UnRegisterCallback_1
   1647            }
   1648          
   1649            /* Process locked */
   1650            __HAL_LOCK(hdma);
   \                     ??HAL_DMA_UnRegisterCallback_0: (+1)
   \        0xA   0xF890 0x3034      LDRB     R3,[R0, #+52]
   \        0xE   0x2B01             CMP      R3,#+1
   \       0x10   0xD101             BNE.N    ??HAL_DMA_UnRegisterCallback_2
   \       0x12   0x2002             MOVS     R0,#+2
   \       0x14   0xE03A             B.N      ??HAL_DMA_UnRegisterCallback_1
   \                     ??HAL_DMA_UnRegisterCallback_2: (+1)
   \       0x16   0x2301             MOVS     R3,#+1
   \       0x18   0xF880 0x3034      STRB     R3,[R0, #+52]
   1651          
   1652            if(HAL_DMA_STATE_READY == hdma->State)
   \       0x1C   0xF890 0x3035      LDRB     R3,[R0, #+53]
   \       0x20   0x2B01             CMP      R3,#+1
   \       0x22   0xD12D             BNE.N    ??HAL_DMA_UnRegisterCallback_3
   1653            {
   1654              switch (CallbackID)
   \       0x24   0xB2C9             UXTB     R1,R1
   \       0x26   0x2900             CMP      R1,#+0
   \       0x28   0xD009             BEQ.N    ??HAL_DMA_UnRegisterCallback_4
   \       0x2A   0x2902             CMP      R1,#+2
   \       0x2C   0xD00D             BEQ.N    ??HAL_DMA_UnRegisterCallback_5
   \       0x2E   0xD309             BCC.N    ??HAL_DMA_UnRegisterCallback_6
   \       0x30   0x2904             CMP      R1,#+4
   \       0x32   0xD010             BEQ.N    ??HAL_DMA_UnRegisterCallback_7
   \       0x34   0xD30C             BCC.N    ??HAL_DMA_UnRegisterCallback_8
   \       0x36   0x2906             CMP      R1,#+6
   \       0x38   0xD013             BEQ.N    ??HAL_DMA_UnRegisterCallback_9
   \       0x3A   0xD30F             BCC.N    ??HAL_DMA_UnRegisterCallback_10
   \       0x3C   0xE01E             B.N      ??HAL_DMA_UnRegisterCallback_11
   1655              {
   1656              case  HAL_DMA_XFER_CPLT_CB_ID:
   1657                hdma->XferCpltCallback = NULL;
   \                     ??HAL_DMA_UnRegisterCallback_4: (+1)
   \       0x3E   0x2100             MOVS     R1,#+0
   \       0x40   0x63C1             STR      R1,[R0, #+60]
   1658                break;
   \       0x42   0xE01E             B.N      ??HAL_DMA_UnRegisterCallback_12
   1659          
   1660              case  HAL_DMA_XFER_HALFCPLT_CB_ID:
   1661                hdma->XferHalfCpltCallback = NULL;
   \                     ??HAL_DMA_UnRegisterCallback_6: (+1)
   \       0x44   0x2100             MOVS     R1,#+0
   \       0x46   0x6401             STR      R1,[R0, #+64]
   1662                break;
   \       0x48   0xE01B             B.N      ??HAL_DMA_UnRegisterCallback_12
   1663          
   1664              case  HAL_DMA_XFER_M1CPLT_CB_ID:
   1665                hdma->XferM1CpltCallback = NULL;
   \                     ??HAL_DMA_UnRegisterCallback_5: (+1)
   \       0x4A   0x2100             MOVS     R1,#+0
   \       0x4C   0x6441             STR      R1,[R0, #+68]
   1666                break;
   \       0x4E   0xE018             B.N      ??HAL_DMA_UnRegisterCallback_12
   1667          
   1668              case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
   1669                hdma->XferM1HalfCpltCallback = NULL;
   \                     ??HAL_DMA_UnRegisterCallback_8: (+1)
   \       0x50   0x2100             MOVS     R1,#+0
   \       0x52   0x6481             STR      R1,[R0, #+72]
   1670                break;
   \       0x54   0xE015             B.N      ??HAL_DMA_UnRegisterCallback_12
   1671          
   1672              case  HAL_DMA_XFER_ERROR_CB_ID:
   1673                hdma->XferErrorCallback = NULL;
   \                     ??HAL_DMA_UnRegisterCallback_7: (+1)
   \       0x56   0x2100             MOVS     R1,#+0
   \       0x58   0x64C1             STR      R1,[R0, #+76]
   1674                break;
   \       0x5A   0xE012             B.N      ??HAL_DMA_UnRegisterCallback_12
   1675          
   1676              case  HAL_DMA_XFER_ABORT_CB_ID:
   1677                hdma->XferAbortCallback = NULL;
   \                     ??HAL_DMA_UnRegisterCallback_10: (+1)
   \       0x5C   0x2100             MOVS     R1,#+0
   \       0x5E   0x6501             STR      R1,[R0, #+80]
   1678                break;
   \       0x60   0xE00F             B.N      ??HAL_DMA_UnRegisterCallback_12
   1679          
   1680              case   HAL_DMA_XFER_ALL_CB_ID:
   1681                hdma->XferCpltCallback = NULL;
   \                     ??HAL_DMA_UnRegisterCallback_9: (+1)
   \       0x62   0x2100             MOVS     R1,#+0
   \       0x64   0x63C1             STR      R1,[R0, #+60]
   1682                hdma->XferHalfCpltCallback = NULL;
   \       0x66   0x2100             MOVS     R1,#+0
   \       0x68   0x6401             STR      R1,[R0, #+64]
   1683                hdma->XferM1CpltCallback = NULL;
   \       0x6A   0x2100             MOVS     R1,#+0
   \       0x6C   0x6441             STR      R1,[R0, #+68]
   1684                hdma->XferM1HalfCpltCallback = NULL;
   \       0x6E   0x2100             MOVS     R1,#+0
   \       0x70   0x6481             STR      R1,[R0, #+72]
   1685                hdma->XferErrorCallback = NULL;
   \       0x72   0x2100             MOVS     R1,#+0
   \       0x74   0x64C1             STR      R1,[R0, #+76]
   1686                hdma->XferAbortCallback = NULL;
   \       0x76   0x2100             MOVS     R1,#+0
   \       0x78   0x6501             STR      R1,[R0, #+80]
   1687                break;
   \       0x7A   0xE002             B.N      ??HAL_DMA_UnRegisterCallback_12
   1688          
   1689              default:
   1690                status = HAL_ERROR;
   \                     ??HAL_DMA_UnRegisterCallback_11: (+1)
   \       0x7C   0x2201             MOVS     R2,#+1
   1691                break;
   \       0x7E   0xE000             B.N      ??HAL_DMA_UnRegisterCallback_12
   1692              }
   1693            }
   1694            else
   1695            {
   1696              status = HAL_ERROR;
   \                     ??HAL_DMA_UnRegisterCallback_3: (+1)
   \       0x80   0x2201             MOVS     R2,#+1
   1697            }
   1698          
   1699            /* Release Lock */
   1700            __HAL_UNLOCK(hdma);
   \                     ??HAL_DMA_UnRegisterCallback_12: (+1)
   \       0x82   0x2100             MOVS     R1,#+0
   \       0x84   0xF880 0x1034      STRB     R1,[R0, #+52]
   1701          
   1702            return status;
   \       0x88   0x0010             MOVS     R0,R2
   \       0x8A   0xB2C0             UXTB     R0,R0
   \                     ??HAL_DMA_UnRegisterCallback_1: (+1)
   \       0x8C   0x4770             BX       LR
   1703          }
   1704          
   1705          /**
   1706            * @}
   1707            */
   1708          
   1709          /** @addtogroup DMA_Exported_Functions_Group3
   1710            *
   1711          @verbatim
   1712           ===============================================================================
   1713                              ##### State and Errors functions #####
   1714           ===============================================================================
   1715              [..]
   1716              This subsection provides functions allowing to
   1717                (+) Check the DMA state
   1718                (+) Get error code
   1719          
   1720          @endverbatim
   1721            * @{
   1722            */
   1723          
   1724          /**
   1725            * @brief  Returns the DMA state.
   1726            * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
   1727            *               the configuration information for the specified DMA Stream.
   1728            * @retval HAL state
   1729            */

   \                                 In section .text, align 2, keep-with-next
   1730          HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
   1731          {
   1732            return hdma->State;
   \                     HAL_DMA_GetState: (+1)
   \        0x0   0xF890 0x0035      LDRB     R0,[R0, #+53]
   \        0x4   0x4770             BX       LR
   1733          }
   1734          
   1735          /**
   1736            * @brief  Return the DMA error code
   1737            * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
   1738            *              the configuration information for the specified DMA Stream.
   1739            * @retval DMA Error Code
   1740            */

   \                                 In section .text, align 2, keep-with-next
   1741          uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
   1742          {
   1743            return hdma->ErrorCode;
   \                     HAL_DMA_GetError: (+1)
   \        0x0   0x6D40             LDR      R0,[R0, #+84]
   \        0x2   0x4770             BX       LR
   1744          }
   1745          
   1746          /**
   1747            * @}
   1748            */
   1749          
   1750          /**
   1751            * @}
   1752            */
   1753          
   1754          /** @addtogroup DMA_Private_Functions
   1755            * @{
   1756            */
   1757          
   1758          /**
   1759            * @brief  Sets the DMA Transfer parameter.
   1760            * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
   1761            *                     the configuration information for the specified DMA Stream.
   1762            * @param  SrcAddress: The source memory Buffer address
   1763            * @param  DstAddress: The destination memory Buffer address
   1764            * @param  DataLength: The length of data to be transferred from source to destination
   1765            * @retval None
   1766            */

   \                                 In section .text, align 2, keep-with-next
   1767          static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
   1768          {
   \                     DMA_SetConfig: (+1)
   \        0x0   0xB4F0             PUSH     {R4-R7}
   1769            /* calculate DMA base and stream number */
   1770            DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
   \        0x2   0x6D86             LDR      R6,[R0, #+88]
   1771            BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
   \        0x4   0x6D85             LDR      R5,[R0, #+88]
   1772          
   1773            if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
   \        0x6   0x.... 0x....      LDR.W    R7,??DataTable11
   \        0xA   0x6804             LDR      R4,[R0, #+0]
   \        0xC   0x42BC             CMP      R4,R7
   \        0xE   0xD072             BEQ.N    ??DMA_SetConfig_0
   \       0x10   0x6804             LDR      R4,[R0, #+0]
   \       0x12   0x.... 0x....      LDR.W    R12,??DataTable11_1
   \       0x16   0x4564             CMP      R4,R12
   \       0x18   0xD06D             BEQ.N    ??DMA_SetConfig_0
   \       0x1A   0x6804             LDR      R4,[R0, #+0]
   \       0x1C   0x.... 0x....      LDR.W    R12,??DataTable11_2
   \       0x20   0x4564             CMP      R4,R12
   \       0x22   0xD068             BEQ.N    ??DMA_SetConfig_0
   \       0x24   0x6804             LDR      R4,[R0, #+0]
   \       0x26   0x.... 0x....      LDR.W    R12,??DataTable11_3
   \       0x2A   0x4564             CMP      R4,R12
   \       0x2C   0xD063             BEQ.N    ??DMA_SetConfig_0
   \       0x2E   0x6804             LDR      R4,[R0, #+0]
   \       0x30   0x.... 0x....      LDR.W    R12,??DataTable11_4
   \       0x34   0x4564             CMP      R4,R12
   \       0x36   0xD05E             BEQ.N    ??DMA_SetConfig_0
   \       0x38   0x6804             LDR      R4,[R0, #+0]
   \       0x3A   0x.... 0x....      LDR.W    R12,??DataTable11_5
   \       0x3E   0x4564             CMP      R4,R12
   \       0x40   0xD059             BEQ.N    ??DMA_SetConfig_0
   \       0x42   0x6804             LDR      R4,[R0, #+0]
   \       0x44   0x.... 0x....      LDR.W    R12,??DataTable11_6
   \       0x48   0x4564             CMP      R4,R12
   \       0x4A   0xD054             BEQ.N    ??DMA_SetConfig_0
   \       0x4C   0x6804             LDR      R4,[R0, #+0]
   \       0x4E   0x.... 0x....      LDR.W    R12,??DataTable11_7
   \       0x52   0x4564             CMP      R4,R12
   \       0x54   0xD04F             BEQ.N    ??DMA_SetConfig_0
   \       0x56   0x6804             LDR      R4,[R0, #+0]
   \       0x58   0x.... 0x....      LDR.W    R12,??DataTable11_8
   \       0x5C   0x4564             CMP      R4,R12
   \       0x5E   0xD04A             BEQ.N    ??DMA_SetConfig_0
   \       0x60   0x6804             LDR      R4,[R0, #+0]
   \       0x62   0x.... 0x....      LDR.W    R12,??DataTable11_9
   \       0x66   0x4564             CMP      R4,R12
   \       0x68   0xD045             BEQ.N    ??DMA_SetConfig_0
   \       0x6A   0x6804             LDR      R4,[R0, #+0]
   \       0x6C   0x.... 0x....      LDR.W    R12,??DataTable11_10
   \       0x70   0x4564             CMP      R4,R12
   \       0x72   0xD040             BEQ.N    ??DMA_SetConfig_0
   \       0x74   0x6804             LDR      R4,[R0, #+0]
   \       0x76   0x.... 0x....      LDR.W    R12,??DataTable11_11
   \       0x7A   0x4564             CMP      R4,R12
   \       0x7C   0xD03B             BEQ.N    ??DMA_SetConfig_0
   \       0x7E   0x6804             LDR      R4,[R0, #+0]
   \       0x80   0x.... 0x....      LDR.W    R12,??DataTable11_12
   \       0x84   0x4564             CMP      R4,R12
   \       0x86   0xD036             BEQ.N    ??DMA_SetConfig_0
   \       0x88   0x6804             LDR      R4,[R0, #+0]
   \       0x8A   0x.... 0x....      LDR.W    R12,??DataTable11_13
   \       0x8E   0x4564             CMP      R4,R12
   \       0x90   0xD031             BEQ.N    ??DMA_SetConfig_0
   \       0x92   0x6804             LDR      R4,[R0, #+0]
   \       0x94   0x.... 0x....      LDR.W    R12,??DataTable11_14
   \       0x98   0x4564             CMP      R4,R12
   \       0x9A   0xD02C             BEQ.N    ??DMA_SetConfig_0
   \       0x9C   0x6804             LDR      R4,[R0, #+0]
   \       0x9E   0x.... 0x....      LDR.W    R12,??DataTable11_15
   \       0xA2   0x4564             CMP      R4,R12
   \       0xA4   0xD027             BEQ.N    ??DMA_SetConfig_0
   \       0xA6   0x6804             LDR      R4,[R0, #+0]
   \       0xA8   0x.... 0x....      LDR.W    R12,??DataTable9_8
   \       0xAC   0x4564             CMP      R4,R12
   \       0xAE   0xD022             BEQ.N    ??DMA_SetConfig_0
   \       0xB0   0x6804             LDR      R4,[R0, #+0]
   \       0xB2   0x.... 0x....      LDR.W    R12,??DataTable9_9
   \       0xB6   0x4564             CMP      R4,R12
   \       0xB8   0xD01D             BEQ.N    ??DMA_SetConfig_0
   \       0xBA   0x6804             LDR      R4,[R0, #+0]
   \       0xBC   0x.... 0x....      LDR.W    R12,??DataTable9_10
   \       0xC0   0x4564             CMP      R4,R12
   \       0xC2   0xD018             BEQ.N    ??DMA_SetConfig_0
   \       0xC4   0x6804             LDR      R4,[R0, #+0]
   \       0xC6   0x.... 0x....      LDR.W    R12,??DataTable9_11
   \       0xCA   0x4564             CMP      R4,R12
   \       0xCC   0xD013             BEQ.N    ??DMA_SetConfig_0
   \       0xCE   0x6804             LDR      R4,[R0, #+0]
   \       0xD0   0x.... 0x....      LDR.W    R12,??DataTable9_12
   \       0xD4   0x4564             CMP      R4,R12
   \       0xD6   0xD00E             BEQ.N    ??DMA_SetConfig_0
   \       0xD8   0x6804             LDR      R4,[R0, #+0]
   \       0xDA   0x.... 0x....      LDR.W    R12,??DataTable9_13
   \       0xDE   0x4564             CMP      R4,R12
   \       0xE0   0xD009             BEQ.N    ??DMA_SetConfig_0
   \       0xE2   0x6804             LDR      R4,[R0, #+0]
   \       0xE4   0x.... 0x....      LDR.W    R12,??DataTable9_14
   \       0xE8   0x4564             CMP      R4,R12
   \       0xEA   0xD004             BEQ.N    ??DMA_SetConfig_0
   \       0xEC   0x6804             LDR      R4,[R0, #+0]
   \       0xEE   0x.... 0x....      LDR.W    R12,??DataTable11_16
   \       0xF2   0x4564             CMP      R4,R12
   \       0xF4   0xD101             BNE.N    ??DMA_SetConfig_1
   \                     ??DMA_SetConfig_0: (+1)
   \       0xF6   0x2401             MOVS     R4,#+1
   \       0xF8   0xE000             B.N      ??DMA_SetConfig_2
   \                     ??DMA_SetConfig_1: (+1)
   \       0xFA   0x2400             MOVS     R4,#+0
   \                     ??DMA_SetConfig_2: (+1)
   \       0xFC   0xB2E4             UXTB     R4,R4
   \       0xFE   0x2C00             CMP      R4,#+0
   \      0x100   0xD00C             BEQ.N    ??DMA_SetConfig_3
   1774            {
   1775              /* Clear the DMAMUX synchro overrun flag */
   1776              hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
   \      0x102   0x6E84             LDR      R4,[R0, #+104]
   \      0x104   0xF8D0 0xC064      LDR      R12,[R0, #+100]
   \      0x108   0xF8CC 0x4004      STR      R4,[R12, #+4]
   1777          
   1778              if(hdma->DMAmuxRequestGen != 0U)
   \      0x10C   0x6EC4             LDR      R4,[R0, #+108]
   \      0x10E   0x2C00             CMP      R4,#+0
   \      0x110   0xD004             BEQ.N    ??DMA_SetConfig_3
   1779              {
   1780                /* Clear the DMAMUX request generator overrun flag */
   1781                hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
   \      0x112   0x6F44             LDR      R4,[R0, #+116]
   \      0x114   0xF8D0 0xC070      LDR      R12,[R0, #+112]
   \      0x118   0xF8CC 0x4004      STR      R4,[R12, #+4]
   1782              }
   1783            }
   1784          
   1785            if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
   \                     ??DMA_SetConfig_3: (+1)
   \      0x11C   0x6804             LDR      R4,[R0, #+0]
   \      0x11E   0x42BC             CMP      R4,R7
   \      0x120   0xD04A             BEQ.N    ??DMA_SetConfig_4
   \      0x122   0x6804             LDR      R4,[R0, #+0]
   \      0x124   0x.... 0x....      LDR.W    R7,??DataTable11_1
   \      0x128   0x42BC             CMP      R4,R7
   \      0x12A   0xD045             BEQ.N    ??DMA_SetConfig_4
   \      0x12C   0x6804             LDR      R4,[R0, #+0]
   \      0x12E   0x.... 0x....      LDR.W    R7,??DataTable11_2
   \      0x132   0x42BC             CMP      R4,R7
   \      0x134   0xD040             BEQ.N    ??DMA_SetConfig_4
   \      0x136   0x6804             LDR      R4,[R0, #+0]
   \      0x138   0x.... 0x....      LDR.W    R7,??DataTable11_3
   \      0x13C   0x42BC             CMP      R4,R7
   \      0x13E   0xD03B             BEQ.N    ??DMA_SetConfig_4
   \      0x140   0x6804             LDR      R4,[R0, #+0]
   \      0x142   0x.... 0x....      LDR.W    R7,??DataTable11_4
   \      0x146   0x42BC             CMP      R4,R7
   \      0x148   0xD036             BEQ.N    ??DMA_SetConfig_4
   \      0x14A   0x6804             LDR      R4,[R0, #+0]
   \      0x14C   0x.... 0x....      LDR.W    R7,??DataTable11_5
   \      0x150   0x42BC             CMP      R4,R7
   \      0x152   0xD031             BEQ.N    ??DMA_SetConfig_4
   \      0x154   0x6804             LDR      R4,[R0, #+0]
   \      0x156   0x.... 0x....      LDR.W    R7,??DataTable11_6
   \      0x15A   0x42BC             CMP      R4,R7
   \      0x15C   0xD02C             BEQ.N    ??DMA_SetConfig_4
   \      0x15E   0x6804             LDR      R4,[R0, #+0]
   \      0x160   0x.... 0x....      LDR.W    R7,??DataTable11_7
   \      0x164   0x42BC             CMP      R4,R7
   \      0x166   0xD027             BEQ.N    ??DMA_SetConfig_4
   \      0x168   0x6804             LDR      R4,[R0, #+0]
   \      0x16A   0x.... 0x....      LDR.W    R7,??DataTable11_8
   \      0x16E   0x42BC             CMP      R4,R7
   \      0x170   0xD022             BEQ.N    ??DMA_SetConfig_4
   \      0x172   0x6804             LDR      R4,[R0, #+0]
   \      0x174   0x.... 0x....      LDR.W    R7,??DataTable11_9
   \      0x178   0x42BC             CMP      R4,R7
   \      0x17A   0xD01D             BEQ.N    ??DMA_SetConfig_4
   \      0x17C   0x6804             LDR      R4,[R0, #+0]
   \      0x17E   0x.... 0x....      LDR.W    R7,??DataTable11_10
   \      0x182   0x42BC             CMP      R4,R7
   \      0x184   0xD018             BEQ.N    ??DMA_SetConfig_4
   \      0x186   0x6804             LDR      R4,[R0, #+0]
   \      0x188   0x.... 0x....      LDR.W    R7,??DataTable11_11
   \      0x18C   0x42BC             CMP      R4,R7
   \      0x18E   0xD013             BEQ.N    ??DMA_SetConfig_4
   \      0x190   0x6804             LDR      R4,[R0, #+0]
   \      0x192   0x.... 0x....      LDR.W    R7,??DataTable11_12
   \      0x196   0x42BC             CMP      R4,R7
   \      0x198   0xD00E             BEQ.N    ??DMA_SetConfig_4
   \      0x19A   0x6804             LDR      R4,[R0, #+0]
   \      0x19C   0x.... 0x....      LDR.W    R7,??DataTable11_13
   \      0x1A0   0x42BC             CMP      R4,R7
   \      0x1A2   0xD009             BEQ.N    ??DMA_SetConfig_4
   \      0x1A4   0x6804             LDR      R4,[R0, #+0]
   \      0x1A6   0x.... 0x....      LDR.W    R7,??DataTable11_14
   \      0x1AA   0x42BC             CMP      R4,R7
   \      0x1AC   0xD004             BEQ.N    ??DMA_SetConfig_4
   \      0x1AE   0x6804             LDR      R4,[R0, #+0]
   \      0x1B0   0x.... 0x....      LDR.W    R7,??DataTable11_15
   \      0x1B4   0x42BC             CMP      R4,R7
   \      0x1B6   0xD101             BNE.N    ??DMA_SetConfig_5
   \                     ??DMA_SetConfig_4: (+1)
   \      0x1B8   0x2401             MOVS     R4,#+1
   \      0x1BA   0xE000             B.N      ??DMA_SetConfig_6
   \                     ??DMA_SetConfig_5: (+1)
   \      0x1BC   0x2400             MOVS     R4,#+0
   \                     ??DMA_SetConfig_6: (+1)
   \      0x1BE   0xB2E4             UXTB     R4,R4
   \      0x1C0   0x2C00             CMP      R4,#+0
   \      0x1C2   0xD01B             BEQ.N    ??DMA_SetConfig_7
   1786            {
   1787              /* Clear all interrupt flags at correct offset within the register */
   1788              regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
   \      0x1C4   0x243F             MOVS     R4,#+63
   \      0x1C6   0xF890 0x505C      LDRB     R5,[R0, #+92]
   \      0x1CA   0xF015 0x051F      ANDS     R5,R5,#0x1F
   \      0x1CE   0x40AC             LSLS     R4,R4,R5
   \      0x1D0   0x60B4             STR      R4,[R6, #+8]
   1789          
   1790              /* Clear DBM bit */
   1791              ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
   \      0x1D2   0x6804             LDR      R4,[R0, #+0]
   \      0x1D4   0x6824             LDR      R4,[R4, #+0]
   \      0x1D6   0xF434 0x2480      BICS     R4,R4,#0x40000
   \      0x1DA   0x6805             LDR      R5,[R0, #+0]
   \      0x1DC   0x602C             STR      R4,[R5, #+0]
   1792          
   1793              /* Configure DMA Stream data length */
   1794              ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
   \      0x1DE   0x6804             LDR      R4,[R0, #+0]
   \      0x1E0   0x6063             STR      R3,[R4, #+4]
   1795          
   1796              /* Peripheral to Memory */
   1797              if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
   \      0x1E2   0x6883             LDR      R3,[R0, #+8]
   \      0x1E4   0x2B40             CMP      R3,#+64
   \      0x1E6   0xD104             BNE.N    ??DMA_SetConfig_8
   1798              {
   1799                /* Configure DMA Stream destination address */
   1800                ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
   \      0x1E8   0x6803             LDR      R3,[R0, #+0]
   \      0x1EA   0x609A             STR      R2,[R3, #+8]
   1801          
   1802                /* Configure DMA Stream source address */
   1803                ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
   \      0x1EC   0x6800             LDR      R0,[R0, #+0]
   \      0x1EE   0x60C1             STR      R1,[R0, #+12]
   \      0x1F0   0xE060             B.N      ??DMA_SetConfig_9
   1804              }
   1805              /* Memory to Peripheral */
   1806              else
   1807              {
   1808                /* Configure DMA Stream source address */
   1809                ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
   \                     ??DMA_SetConfig_8: (+1)
   \      0x1F2   0x6803             LDR      R3,[R0, #+0]
   \      0x1F4   0x6099             STR      R1,[R3, #+8]
   1810          
   1811                /* Configure DMA Stream destination address */
   1812                ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
   \      0x1F6   0x6800             LDR      R0,[R0, #+0]
   \      0x1F8   0x60C2             STR      R2,[R0, #+12]
   \      0x1FA   0xE05B             B.N      ??DMA_SetConfig_9
   1813              }
   1814            }
   1815            else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
   \                     ??DMA_SetConfig_7: (+1)
   \      0x1FC   0x6804             LDR      R4,[R0, #+0]
   \      0x1FE   0x....             LDR.N    R6,??DataTable9
   \      0x200   0x42B4             CMP      R4,R6
   \      0x202   0xD03C             BEQ.N    ??DMA_SetConfig_10
   \      0x204   0x6804             LDR      R4,[R0, #+0]
   \      0x206   0x....             LDR.N    R6,??DataTable9_1
   \      0x208   0x42B4             CMP      R4,R6
   \      0x20A   0xD038             BEQ.N    ??DMA_SetConfig_10
   \      0x20C   0x6804             LDR      R4,[R0, #+0]
   \      0x20E   0x....             LDR.N    R6,??DataTable9_2
   \      0x210   0x42B4             CMP      R4,R6
   \      0x212   0xD034             BEQ.N    ??DMA_SetConfig_10
   \      0x214   0x6804             LDR      R4,[R0, #+0]
   \      0x216   0x....             LDR.N    R6,??DataTable9_3
   \      0x218   0x42B4             CMP      R4,R6
   \      0x21A   0xD030             BEQ.N    ??DMA_SetConfig_10
   \      0x21C   0x6804             LDR      R4,[R0, #+0]
   \      0x21E   0x....             LDR.N    R6,??DataTable9_4
   \      0x220   0x42B4             CMP      R4,R6
   \      0x222   0xD02C             BEQ.N    ??DMA_SetConfig_10
   \      0x224   0x6804             LDR      R4,[R0, #+0]
   \      0x226   0x....             LDR.N    R6,??DataTable9_5
   \      0x228   0x42B4             CMP      R4,R6
   \      0x22A   0xD028             BEQ.N    ??DMA_SetConfig_10
   \      0x22C   0x6804             LDR      R4,[R0, #+0]
   \      0x22E   0x....             LDR.N    R6,??DataTable9_6
   \      0x230   0x42B4             CMP      R4,R6
   \      0x232   0xD024             BEQ.N    ??DMA_SetConfig_10
   \      0x234   0x6804             LDR      R4,[R0, #+0]
   \      0x236   0x....             LDR.N    R6,??DataTable9_7
   \      0x238   0x42B4             CMP      R4,R6
   \      0x23A   0xD020             BEQ.N    ??DMA_SetConfig_10
   \      0x23C   0x6804             LDR      R4,[R0, #+0]
   \      0x23E   0x....             LDR.N    R6,??DataTable9_8
   \      0x240   0x42B4             CMP      R4,R6
   \      0x242   0xD01C             BEQ.N    ??DMA_SetConfig_10
   \      0x244   0x6804             LDR      R4,[R0, #+0]
   \      0x246   0x....             LDR.N    R6,??DataTable9_9
   \      0x248   0x42B4             CMP      R4,R6
   \      0x24A   0xD018             BEQ.N    ??DMA_SetConfig_10
   \      0x24C   0x6804             LDR      R4,[R0, #+0]
   \      0x24E   0x....             LDR.N    R6,??DataTable9_10
   \      0x250   0x42B4             CMP      R4,R6
   \      0x252   0xD014             BEQ.N    ??DMA_SetConfig_10
   \      0x254   0x6804             LDR      R4,[R0, #+0]
   \      0x256   0x....             LDR.N    R6,??DataTable9_11
   \      0x258   0x42B4             CMP      R4,R6
   \      0x25A   0xD010             BEQ.N    ??DMA_SetConfig_10
   \      0x25C   0x6804             LDR      R4,[R0, #+0]
   \      0x25E   0x....             LDR.N    R6,??DataTable9_12
   \      0x260   0x42B4             CMP      R4,R6
   \      0x262   0xD00C             BEQ.N    ??DMA_SetConfig_10
   \      0x264   0x6804             LDR      R4,[R0, #+0]
   \      0x266   0x....             LDR.N    R6,??DataTable9_13
   \      0x268   0x42B4             CMP      R4,R6
   \      0x26A   0xD008             BEQ.N    ??DMA_SetConfig_10
   \      0x26C   0x6804             LDR      R4,[R0, #+0]
   \      0x26E   0x....             LDR.N    R6,??DataTable9_14
   \      0x270   0x42B4             CMP      R4,R6
   \      0x272   0xD004             BEQ.N    ??DMA_SetConfig_10
   \      0x274   0x6804             LDR      R4,[R0, #+0]
   \      0x276   0x.... 0x....      LDR.W    R6,??DataTable11_16
   \      0x27A   0x42B4             CMP      R4,R6
   \      0x27C   0xD101             BNE.N    ??DMA_SetConfig_11
   \                     ??DMA_SetConfig_10: (+1)
   \      0x27E   0x2401             MOVS     R4,#+1
   \      0x280   0xE000             B.N      ??DMA_SetConfig_12
   \                     ??DMA_SetConfig_11: (+1)
   \      0x282   0x2400             MOVS     R4,#+0
   \                     ??DMA_SetConfig_12: (+1)
   \      0x284   0xB2E4             UXTB     R4,R4
   \      0x286   0x2C00             CMP      R4,#+0
   \      0x288   0xD014             BEQ.N    ??DMA_SetConfig_9
   1816            {
   1817              /* Clear all flags */
   1818              regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
   \      0x28A   0x2401             MOVS     R4,#+1
   \      0x28C   0xF890 0x605C      LDRB     R6,[R0, #+92]
   \      0x290   0xF016 0x061F      ANDS     R6,R6,#0x1F
   \      0x294   0x40B4             LSLS     R4,R4,R6
   \      0x296   0x606C             STR      R4,[R5, #+4]
   1819          
   1820              /* Configure DMA Channel data length */
   1821              ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
   \      0x298   0x6804             LDR      R4,[R0, #+0]
   \      0x29A   0x6063             STR      R3,[R4, #+4]
   1822          
   1823              /* Peripheral to Memory */
   1824              if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
   \      0x29C   0x6883             LDR      R3,[R0, #+8]
   \      0x29E   0x2B40             CMP      R3,#+64
   \      0x2A0   0xD104             BNE.N    ??DMA_SetConfig_13
   1825              {
   1826                /* Configure DMA Channel destination address */
   1827                ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
   \      0x2A2   0x6803             LDR      R3,[R0, #+0]
   \      0x2A4   0x609A             STR      R2,[R3, #+8]
   1828          
   1829                /* Configure DMA Channel source address */
   1830                ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
   \      0x2A6   0x6800             LDR      R0,[R0, #+0]
   \      0x2A8   0x60C1             STR      R1,[R0, #+12]
   \      0x2AA   0xE003             B.N      ??DMA_SetConfig_9
   1831              }
   1832              /* Memory to Peripheral */
   1833              else
   1834              {
   1835                /* Configure DMA Channel source address */
   1836                ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
   \                     ??DMA_SetConfig_13: (+1)
   \      0x2AC   0x6803             LDR      R3,[R0, #+0]
   \      0x2AE   0x6099             STR      R1,[R3, #+8]
   1837          
   1838                /* Configure DMA Channel destination address */
   1839                ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
   \      0x2B0   0x6800             LDR      R0,[R0, #+0]
   \      0x2B2   0x60C2             STR      R2,[R0, #+12]
   1840              }
   1841            }
   1842            else
   1843            {
   1844              /* Nothing To Do */
   1845            }
   1846          }
   \                     ??DMA_SetConfig_9: (+1)
   \      0x2B4   0xBCF0             POP      {R4-R7}
   \      0x2B6   0x4770             BX       LR
   1847          
   1848          /**
   1849            * @brief  Returns the DMA Stream base address depending on stream number
   1850            * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
   1851            *                     the configuration information for the specified DMA Stream.
   1852            * @retval Stream base address
   1853            */

   \                                 In section .text, align 2, keep-with-next
   1854          static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
   1855          {
   1856            if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
   \                     DMA_CalcBaseAndBitshift: (+1)
   \        0x0   0x6801             LDR      R1,[R0, #+0]
   \        0x2   0x.... 0x....      LDR.W    R2,??DataTable11
   \        0x6   0x4291             CMP      R1,R2
   \        0x8   0xD03F             BEQ.N    ??DMA_CalcBaseAndBitshift_0
   \        0xA   0x6801             LDR      R1,[R0, #+0]
   \        0xC   0x.... 0x....      LDR.W    R2,??DataTable11_1
   \       0x10   0x4291             CMP      R1,R2
   \       0x12   0xD03A             BEQ.N    ??DMA_CalcBaseAndBitshift_0
   \       0x14   0x6801             LDR      R1,[R0, #+0]
   \       0x16   0x.... 0x....      LDR.W    R2,??DataTable11_2
   \       0x1A   0x4291             CMP      R1,R2
   \       0x1C   0xD035             BEQ.N    ??DMA_CalcBaseAndBitshift_0
   \       0x1E   0x6801             LDR      R1,[R0, #+0]
   \       0x20   0x.... 0x....      LDR.W    R2,??DataTable11_3
   \       0x24   0x4291             CMP      R1,R2
   \       0x26   0xD030             BEQ.N    ??DMA_CalcBaseAndBitshift_0
   \       0x28   0x6801             LDR      R1,[R0, #+0]
   \       0x2A   0x.... 0x....      LDR.W    R2,??DataTable11_4
   \       0x2E   0x4291             CMP      R1,R2
   \       0x30   0xD02B             BEQ.N    ??DMA_CalcBaseAndBitshift_0
   \       0x32   0x6801             LDR      R1,[R0, #+0]
   \       0x34   0x....             LDR.N    R2,??DataTable11_5
   \       0x36   0x4291             CMP      R1,R2
   \       0x38   0xD027             BEQ.N    ??DMA_CalcBaseAndBitshift_0
   \       0x3A   0x6801             LDR      R1,[R0, #+0]
   \       0x3C   0x....             LDR.N    R2,??DataTable11_6
   \       0x3E   0x4291             CMP      R1,R2
   \       0x40   0xD023             BEQ.N    ??DMA_CalcBaseAndBitshift_0
   \       0x42   0x6801             LDR      R1,[R0, #+0]
   \       0x44   0x....             LDR.N    R2,??DataTable11_7
   \       0x46   0x4291             CMP      R1,R2
   \       0x48   0xD01F             BEQ.N    ??DMA_CalcBaseAndBitshift_0
   \       0x4A   0x6801             LDR      R1,[R0, #+0]
   \       0x4C   0x....             LDR.N    R2,??DataTable11_8
   \       0x4E   0x4291             CMP      R1,R2
   \       0x50   0xD01B             BEQ.N    ??DMA_CalcBaseAndBitshift_0
   \       0x52   0x6801             LDR      R1,[R0, #+0]
   \       0x54   0x....             LDR.N    R2,??DataTable11_9
   \       0x56   0x4291             CMP      R1,R2
   \       0x58   0xD017             BEQ.N    ??DMA_CalcBaseAndBitshift_0
   \       0x5A   0x6801             LDR      R1,[R0, #+0]
   \       0x5C   0x....             LDR.N    R2,??DataTable11_10
   \       0x5E   0x4291             CMP      R1,R2
   \       0x60   0xD013             BEQ.N    ??DMA_CalcBaseAndBitshift_0
   \       0x62   0x6801             LDR      R1,[R0, #+0]
   \       0x64   0x....             LDR.N    R2,??DataTable11_11
   \       0x66   0x4291             CMP      R1,R2
   \       0x68   0xD00F             BEQ.N    ??DMA_CalcBaseAndBitshift_0
   \       0x6A   0x6801             LDR      R1,[R0, #+0]
   \       0x6C   0x....             LDR.N    R2,??DataTable11_12
   \       0x6E   0x4291             CMP      R1,R2
   \       0x70   0xD00B             BEQ.N    ??DMA_CalcBaseAndBitshift_0
   \       0x72   0x6801             LDR      R1,[R0, #+0]
   \       0x74   0x....             LDR.N    R2,??DataTable11_13
   \       0x76   0x4291             CMP      R1,R2
   \       0x78   0xD007             BEQ.N    ??DMA_CalcBaseAndBitshift_0
   \       0x7A   0x6801             LDR      R1,[R0, #+0]
   \       0x7C   0x....             LDR.N    R2,??DataTable11_14
   \       0x7E   0x4291             CMP      R1,R2
   \       0x80   0xD003             BEQ.N    ??DMA_CalcBaseAndBitshift_0
   \       0x82   0x6801             LDR      R1,[R0, #+0]
   \       0x84   0x....             LDR.N    R2,??DataTable11_15
   \       0x86   0x4291             CMP      R1,R2
   \       0x88   0xD101             BNE.N    ??DMA_CalcBaseAndBitshift_1
   \                     ??DMA_CalcBaseAndBitshift_0: (+1)
   \       0x8A   0x2101             MOVS     R1,#+1
   \       0x8C   0xE000             B.N      ??DMA_CalcBaseAndBitshift_2
   \                     ??DMA_CalcBaseAndBitshift_1: (+1)
   \       0x8E   0x2100             MOVS     R1,#+0
   \                     ??DMA_CalcBaseAndBitshift_2: (+1)
   \       0x90   0xB2C9             UXTB     R1,R1
   \       0x92   0x2900             CMP      R1,#+0
   \       0x94   0xD018             BEQ.N    ??DMA_CalcBaseAndBitshift_3
   1857            {
   1858              uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
   \       0x96   0x7801             LDRB     R1,[R0, #+0]
   \       0x98   0xF001 0x01FF      AND      R1,R1,#0xFF
   \       0x9C   0x3910             SUBS     R1,R1,#+16
   \       0x9E   0x2218             MOVS     R2,#+24
   \       0xA0   0xFBB1 0xF1F2      UDIV     R1,R1,R2
   1859          
   1860              /* lookup table for necessary bitshift of flags within status registers */
   1861              static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
   1862              hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
   \       0xA4   0x....             LDR.N    R2,??DataTable11_17
   \       0xA6   0xF011 0x0307      ANDS     R3,R1,#0x7
   \       0xAA   0x5CD2             LDRB     R2,[R2, R3]
   \       0xAC   0x65C2             STR      R2,[R0, #+92]
   1863          
   1864              if (stream_number > 3U)
   \       0xAE   0x2904             CMP      R1,#+4
   \       0xB0   0xD305             BCC.N    ??DMA_CalcBaseAndBitshift_4
   1865              {
   1866                /* return pointer to HISR and HIFCR */
   1867                hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
   \       0xB2   0x6801             LDR      R1,[R0, #+0]
   \       0xB4   0x0A89             LSRS     R1,R1,#+10
   \       0xB6   0x0289             LSLS     R1,R1,#+10
   \       0xB8   0x1D09             ADDS     R1,R1,#+4
   \       0xBA   0x6581             STR      R1,[R0, #+88]
   \       0xBC   0xE008             B.N      ??DMA_CalcBaseAndBitshift_5
   1868              }
   1869              else
   1870              {
   1871                /* return pointer to LISR and LIFCR */
   1872                hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
   \                     ??DMA_CalcBaseAndBitshift_4: (+1)
   \       0xBE   0x6801             LDR      R1,[R0, #+0]
   \       0xC0   0x0A89             LSRS     R1,R1,#+10
   \       0xC2   0x0289             LSLS     R1,R1,#+10
   \       0xC4   0x6581             STR      R1,[R0, #+88]
   \       0xC6   0xE003             B.N      ??DMA_CalcBaseAndBitshift_5
   1873              }
   1874            }
   1875            else /* BDMA instance(s) */
   1876            {
   1877              /* return pointer to ISR and IFCR */
   1878              hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
   \                     ??DMA_CalcBaseAndBitshift_3: (+1)
   \       0xC8   0x6801             LDR      R1,[R0, #+0]
   \       0xCA   0x0A09             LSRS     R1,R1,#+8
   \       0xCC   0x0209             LSLS     R1,R1,#+8
   \       0xCE   0x6581             STR      R1,[R0, #+88]
   1879            }
   1880          
   1881            return hdma->StreamBaseAddress;
   \                     ??DMA_CalcBaseAndBitshift_5: (+1)
   \       0xD0   0x6D80             LDR      R0,[R0, #+88]
   \       0xD2   0x4770             BX       LR
   1882          }

   \                                 In section .rodata, align 4
   \                     `DMA_CalcBaseAndBitshift{1}{2}::flagBitshiftOffset`:
   \        0x0   0x00 0x06          DC8 0, 6, 16, 22, 0, 6, 16, 22

   \              0x10 0x16    

   \              0x00 0x06    

   \              0x10 0x16
   1883          
   1884          /**
   1885            * @brief  Check compatibility between FIFO threshold level and size of the memory burst
   1886            * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
   1887            *                     the configuration information for the specified DMA Stream.
   1888            * @retval HAL status
   1889            */

   \                                 In section .text, align 2, keep-with-next
   1890          static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
   1891          {
   \                     DMA_CheckFifoParam: (+1)
   \        0x0   0x0002             MOVS     R2,R0
   1892            HAL_StatusTypeDef status = HAL_OK;
   \        0x2   0x2000             MOVS     R0,#+0
   1893          
   1894            /* Memory Data size equal to Byte */
   1895            if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
   \        0x4   0x6991             LDR      R1,[R2, #+24]
   \        0x6   0x2900             CMP      R1,#+0
   \        0x8   0xD115             BNE.N    ??DMA_CheckFifoParam_0
   1896            {
   1897              switch (hdma->Init.FIFOThreshold)
   \        0xA   0x6A91             LDR      R1,[R2, #+40]
   \        0xC   0x2900             CMP      R1,#+0
   \        0xE   0xD005             BEQ.N    ??DMA_CheckFifoParam_1
   \       0x10   0x2902             CMP      R1,#+2
   \       0x12   0xD003             BEQ.N    ??DMA_CheckFifoParam_1
   \       0x14   0xD307             BCC.N    ??DMA_CheckFifoParam_2
   \       0x16   0x2903             CMP      R1,#+3
   \       0x18   0xD00B             BEQ.N    ??DMA_CheckFifoParam_3
   \       0x1A   0xE00B             B.N      ??DMA_CheckFifoParam_4
   1898              {
   1899                case DMA_FIFO_THRESHOLD_1QUARTERFULL:
   1900                case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
   1901          
   1902                  if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
   \                     ??DMA_CheckFifoParam_1: (+1)
   \       0x1C   0x6AD1             LDR      R1,[R2, #+44]
   \       0x1E   0x01C9             LSLS     R1,R1,#+7
   \       0x20   0xD500             BPL.N    ??DMA_CheckFifoParam_5
   1903                  {
   1904                    status = HAL_ERROR;
   \       0x22   0x2001             MOVS     R0,#+1
   1905                  }
   1906                  break;
   \                     ??DMA_CheckFifoParam_5: (+1)
   \       0x24   0xE030             B.N      ??DMA_CheckFifoParam_6
   1907          
   1908                case DMA_FIFO_THRESHOLD_HALFFULL:
   1909                  if (hdma->Init.MemBurst == DMA_MBURST_INC16)
   \                     ??DMA_CheckFifoParam_2: (+1)
   \       0x26   0x6AD1             LDR      R1,[R2, #+44]
   \       0x28   0xF1B1 0x7FC0      CMP      R1,#+25165824
   \       0x2C   0xD100             BNE.N    ??DMA_CheckFifoParam_7
   1910                  {
   1911                    status = HAL_ERROR;
   \       0x2E   0x2001             MOVS     R0,#+1
   1912                  }
   1913                  break;
   \                     ??DMA_CheckFifoParam_7: (+1)
   \       0x30   0xE02A             B.N      ??DMA_CheckFifoParam_6
   1914          
   1915                case DMA_FIFO_THRESHOLD_FULL:
   1916                  break;
   \                     ??DMA_CheckFifoParam_3: (+1)
   \       0x32   0xE029             B.N      ??DMA_CheckFifoParam_6
   1917          
   1918                default:
   1919                  break;
   \                     ??DMA_CheckFifoParam_4: (+1)
   \       0x34   0xE028             B.N      ??DMA_CheckFifoParam_6
   1920              }
   1921            }
   1922          
   1923            /* Memory Data size equal to Half-Word */
   1924            else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
   \                     ??DMA_CheckFifoParam_0: (+1)
   \       0x36   0x6991             LDR      R1,[R2, #+24]
   \       0x38   0xF5B1 0x5F00      CMP      R1,#+8192
   \       0x3C   0xD116             BNE.N    ??DMA_CheckFifoParam_8
   1925            {
   1926              switch (hdma->Init.FIFOThreshold)
   \       0x3E   0x6A91             LDR      R1,[R2, #+40]
   \       0x40   0x2900             CMP      R1,#+0
   \       0x42   0xD005             BEQ.N    ??DMA_CheckFifoParam_9
   \       0x44   0x2902             CMP      R1,#+2
   \       0x46   0xD003             BEQ.N    ??DMA_CheckFifoParam_9
   \       0x48   0xD304             BCC.N    ??DMA_CheckFifoParam_10
   \       0x4A   0x2903             CMP      R1,#+3
   \       0x4C   0xD007             BEQ.N    ??DMA_CheckFifoParam_11
   \       0x4E   0xE00C             B.N      ??DMA_CheckFifoParam_12
   1927              {
   1928                case DMA_FIFO_THRESHOLD_1QUARTERFULL:
   1929                case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
   1930                  status = HAL_ERROR;
   \                     ??DMA_CheckFifoParam_9: (+1)
   \       0x50   0x2001             MOVS     R0,#+1
   1931                  break;
   \       0x52   0xE019             B.N      ??DMA_CheckFifoParam_6
   1932          
   1933                case DMA_FIFO_THRESHOLD_HALFFULL:
   1934                  if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
   \                     ??DMA_CheckFifoParam_10: (+1)
   \       0x54   0x6AD1             LDR      R1,[R2, #+44]
   \       0x56   0x01C9             LSLS     R1,R1,#+7
   \       0x58   0xD500             BPL.N    ??DMA_CheckFifoParam_13
   1935                  {
   1936                    status = HAL_ERROR;
   \       0x5A   0x2001             MOVS     R0,#+1
   1937                  }
   1938                  break;
   \                     ??DMA_CheckFifoParam_13: (+1)
   \       0x5C   0xE014             B.N      ??DMA_CheckFifoParam_6
   1939          
   1940                case DMA_FIFO_THRESHOLD_FULL:
   1941                  if (hdma->Init.MemBurst == DMA_MBURST_INC16)
   \                     ??DMA_CheckFifoParam_11: (+1)
   \       0x5E   0x6AD1             LDR      R1,[R2, #+44]
   \       0x60   0xF1B1 0x7FC0      CMP      R1,#+25165824
   \       0x64   0xD100             BNE.N    ??DMA_CheckFifoParam_14
   1942                  {
   1943                    status = HAL_ERROR;
   \       0x66   0x2001             MOVS     R0,#+1
   1944                  }
   1945                  break;
   \                     ??DMA_CheckFifoParam_14: (+1)
   \       0x68   0xE00E             B.N      ??DMA_CheckFifoParam_6
   1946          
   1947                default:
   1948                  break;
   \                     ??DMA_CheckFifoParam_12: (+1)
   \       0x6A   0xE00D             B.N      ??DMA_CheckFifoParam_6
   1949              }
   1950            }
   1951          
   1952            /* Memory Data size equal to Word */
   1953            else
   1954            {
   1955              switch (hdma->Init.FIFOThreshold)
   \                     ??DMA_CheckFifoParam_8: (+1)
   \       0x6C   0x6A91             LDR      R1,[R2, #+40]
   \       0x6E   0x2900             CMP      R1,#+0
   \       0x70   0x2902             CMP      R1,#+2
   \       0x72   0xD902             BLS.N    ??DMA_CheckFifoParam_15
   \       0x74   0x1EC9             SUBS     R1,R1,#+3
   \       0x76   0xD002             BEQ.N    ??DMA_CheckFifoParam_16
   \       0x78   0xE006             B.N      ??DMA_CheckFifoParam_17
   1956              {
   1957                case DMA_FIFO_THRESHOLD_1QUARTERFULL:
   1958                case DMA_FIFO_THRESHOLD_HALFFULL:
   1959                case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
   1960                  status = HAL_ERROR;
   \                     ??DMA_CheckFifoParam_15: (+1)
   \       0x7A   0x2001             MOVS     R0,#+1
   1961                  break;
   \       0x7C   0xE004             B.N      ??DMA_CheckFifoParam_6
   1962          
   1963                case DMA_FIFO_THRESHOLD_FULL:
   1964                  if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
   \                     ??DMA_CheckFifoParam_16: (+1)
   \       0x7E   0x6AD1             LDR      R1,[R2, #+44]
   \       0x80   0x01C9             LSLS     R1,R1,#+7
   \       0x82   0xD500             BPL.N    ??DMA_CheckFifoParam_18
   1965                  {
   1966                    status = HAL_ERROR;
   \       0x84   0x2001             MOVS     R0,#+1
   1967                  }
   1968              break;
   \                     ??DMA_CheckFifoParam_18: (+1)
   \       0x86   0xE7FF             B.N      ??DMA_CheckFifoParam_6
   1969          
   1970                default:
   1971                  break;
   1972              }
   1973            }
   1974          
   1975            return status;
   \                     ??DMA_CheckFifoParam_17: (+1)
   \                     ??DMA_CheckFifoParam_6: (+1)
   \       0x88   0xB2C0             UXTB     R0,R0
   \       0x8A   0x4770             BX       LR
   1976          }
   1977          
   1978          /**
   1979            * @brief  Updates the DMA handle with the DMAMUX  channel and status mask depending on stream number
   1980            * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
   1981            *                     the configuration information for the specified DMA Stream.
   1982            * @retval HAL status
   1983            */

   \                                 In section .text, align 2, keep-with-next
   1984          static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
   1985          {
   1986            uint32_t stream_number;
   1987            uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
   \                     DMA_CalcDMAMUXChannelBaseAndMask: (+1)
   \        0x0   0x6802             LDR      R2,[R0, #+0]
   1988          
   1989            if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
   \        0x2   0x6801             LDR      R1,[R0, #+0]
   \        0x4   0x....             LDR.N    R3,??DataTable11_18
   \        0x6   0x4299             CMP      R1,R3
   \        0x8   0xD01B             BEQ.N    ??DMA_CalcDMAMUXChannelBaseAndMask_0
   \        0xA   0x6801             LDR      R1,[R0, #+0]
   \        0xC   0x....             LDR.N    R3,??DataTable11_19
   \        0xE   0x4299             CMP      R1,R3
   \       0x10   0xD017             BEQ.N    ??DMA_CalcDMAMUXChannelBaseAndMask_0
   \       0x12   0x6801             LDR      R1,[R0, #+0]
   \       0x14   0x....             LDR.N    R3,??DataTable11_20
   \       0x16   0x4299             CMP      R1,R3
   \       0x18   0xD013             BEQ.N    ??DMA_CalcDMAMUXChannelBaseAndMask_0
   \       0x1A   0x6801             LDR      R1,[R0, #+0]
   \       0x1C   0x....             LDR.N    R3,??DataTable11_21
   \       0x1E   0x4299             CMP      R1,R3
   \       0x20   0xD00F             BEQ.N    ??DMA_CalcDMAMUXChannelBaseAndMask_0
   \       0x22   0x6801             LDR      R1,[R0, #+0]
   \       0x24   0x....             LDR.N    R3,??DataTable11_22
   \       0x26   0x4299             CMP      R1,R3
   \       0x28   0xD00B             BEQ.N    ??DMA_CalcDMAMUXChannelBaseAndMask_0
   \       0x2A   0x6801             LDR      R1,[R0, #+0]
   \       0x2C   0x....             LDR.N    R3,??DataTable11_23
   \       0x2E   0x4299             CMP      R1,R3
   \       0x30   0xD007             BEQ.N    ??DMA_CalcDMAMUXChannelBaseAndMask_0
   \       0x32   0x6801             LDR      R1,[R0, #+0]
   \       0x34   0x....             LDR.N    R3,??DataTable11_24
   \       0x36   0x4299             CMP      R1,R3
   \       0x38   0xD003             BEQ.N    ??DMA_CalcDMAMUXChannelBaseAndMask_0
   \       0x3A   0x6801             LDR      R1,[R0, #+0]
   \       0x3C   0x....             LDR.N    R3,??DataTable11_16
   \       0x3E   0x4299             CMP      R1,R3
   \       0x40   0xD101             BNE.N    ??DMA_CalcDMAMUXChannelBaseAndMask_1
   \                     ??DMA_CalcDMAMUXChannelBaseAndMask_0: (+1)
   \       0x42   0x2101             MOVS     R1,#+1
   \       0x44   0xE000             B.N      ??DMA_CalcDMAMUXChannelBaseAndMask_2
   \                     ??DMA_CalcDMAMUXChannelBaseAndMask_1: (+1)
   \       0x46   0x2100             MOVS     R1,#+0
   \                     ??DMA_CalcDMAMUXChannelBaseAndMask_2: (+1)
   \       0x48   0xB2C9             UXTB     R1,R1
   \       0x4A   0x2900             CMP      R1,#+0
   \       0x4C   0xD013             BEQ.N    ??DMA_CalcDMAMUXChannelBaseAndMask_3
   1990            {
   1991              /* BDMA Channels are connected to DMAMUX2 channels */
   1992              stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
   \       0x4E   0x7801             LDRB     R1,[R0, #+0]
   \       0x50   0xF001 0x01FF      AND      R1,R1,#0xFF
   \       0x54   0x3908             SUBS     R1,R1,#+8
   \       0x56   0x2214             MOVS     R2,#+20
   \       0x58   0xFBB1 0xF1F2      UDIV     R1,R1,R2
   1993              hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
   \       0x5C   0x....             LDR.N    R2,??DataTable11_25
   \       0x5E   0xEB12 0x0281      ADDS     R2,R2,R1, LSL #+2
   \       0x62   0x6602             STR      R2,[R0, #+96]
   1994              hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
   \       0x64   0x....             LDR.N    R2,??DataTable11_26
   \       0x66   0x6642             STR      R2,[R0, #+100]
   1995              hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
   \       0x68   0x2201             MOVS     R2,#+1
   \       0x6A   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \       0x6E   0xFA12 0xF101      LSLS     R1,R2,R1
   \       0x72   0x6681             STR      R1,[R0, #+104]
   \       0x74   0xE017             B.N      ??DMA_CalcDMAMUXChannelBaseAndMask_4
   1996            }
   1997            else
   1998            {
   1999              /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
   2000              stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
   \                     ??DMA_CalcDMAMUXChannelBaseAndMask_3: (+1)
   \       0x76   0x7801             LDRB     R1,[R0, #+0]
   \       0x78   0xF001 0x01FF      AND      R1,R1,#0xFF
   \       0x7C   0x3910             SUBS     R1,R1,#+16
   \       0x7E   0x2318             MOVS     R3,#+24
   \       0x80   0xFBB1 0xF3F3      UDIV     R3,R1,R3
   2001          
   2002              if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
   2003                 (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
   \       0x84   0x....             LDR.N    R1,??DataTable11_8
   \       0x86   0x1A52             SUBS     R2,R2,R1
   \       0x88   0x2AA9             CMP      R2,#+169
   \       0x8A   0xD200             BCS.N    ??DMA_CalcDMAMUXChannelBaseAndMask_5
   2004              {
   2005                stream_number += 8U;
   \       0x8C   0x3308             ADDS     R3,R3,#+8
   2006              }
   2007              hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
   \                     ??DMA_CalcDMAMUXChannelBaseAndMask_5: (+1)
   \       0x8E   0x....             LDR.N    R1,??DataTable11_27
   \       0x90   0xEB11 0x0183      ADDS     R1,R1,R3, LSL #+2
   \       0x94   0x6601             STR      R1,[R0, #+96]
   2008              hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
   \       0x96   0x....             LDR.N    R1,??DataTable11_28
   \       0x98   0x6641             STR      R1,[R0, #+100]
   2009              hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
   \       0x9A   0x2101             MOVS     R1,#+1
   \       0x9C   0xF013 0x031F      ANDS     R3,R3,#0x1F
   \       0xA0   0xFA11 0xF303      LSLS     R3,R1,R3
   \       0xA4   0x6683             STR      R3,[R0, #+104]
   2010            }
   2011          }
   \                     ??DMA_CalcDMAMUXChannelBaseAndMask_4: (+1)
   \       0xA6   0x4770             BX       LR
   2012          
   2013          /**
   2014            * @brief  Updates the DMA handle with the DMAMUX  request generator params
   2015            * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
   2016            *                     the configuration information for the specified DMA Stream.
   2017            * @retval HAL status
   2018            */

   \                                 In section .text, align 2, keep-with-next
   2019          static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
   2020          {
   2021            uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
   \                     DMA_CalcDMAMUXRequestGenBaseAndMask: (+1)
   \        0x0   0x7901             LDRB     R1,[R0, #+4]
   \        0x2   0xF001 0x01FF      AND      R1,R1,#0xFF
   2022          
   2023            if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
   \        0x6   0x2900             CMP      R1,#+0
   \        0x8   0xD038             BEQ.N    ??DMA_CalcDMAMUXRequestGenBaseAndMask_0
   \        0xA   0x2909             CMP      R1,#+9
   \        0xC   0xD236             BCS.N    ??DMA_CalcDMAMUXRequestGenBaseAndMask_0
   2024            {
   2025              if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
   \        0xE   0x6802             LDR      R2,[R0, #+0]
   \       0x10   0x....             LDR.N    R3,??DataTable11_18
   \       0x12   0x429A             CMP      R2,R3
   \       0x14   0xD01B             BEQ.N    ??DMA_CalcDMAMUXRequestGenBaseAndMask_1
   \       0x16   0x6802             LDR      R2,[R0, #+0]
   \       0x18   0x....             LDR.N    R3,??DataTable11_19
   \       0x1A   0x429A             CMP      R2,R3
   \       0x1C   0xD017             BEQ.N    ??DMA_CalcDMAMUXRequestGenBaseAndMask_1
   \       0x1E   0x6802             LDR      R2,[R0, #+0]
   \       0x20   0x....             LDR.N    R3,??DataTable11_20
   \       0x22   0x429A             CMP      R2,R3
   \       0x24   0xD013             BEQ.N    ??DMA_CalcDMAMUXRequestGenBaseAndMask_1
   \       0x26   0x6802             LDR      R2,[R0, #+0]
   \       0x28   0x....             LDR.N    R3,??DataTable11_21
   \       0x2A   0x429A             CMP      R2,R3
   \       0x2C   0xD00F             BEQ.N    ??DMA_CalcDMAMUXRequestGenBaseAndMask_1
   \       0x2E   0x6802             LDR      R2,[R0, #+0]
   \       0x30   0x....             LDR.N    R3,??DataTable11_22
   \       0x32   0x429A             CMP      R2,R3
   \       0x34   0xD00B             BEQ.N    ??DMA_CalcDMAMUXRequestGenBaseAndMask_1
   \       0x36   0x6802             LDR      R2,[R0, #+0]
   \       0x38   0x....             LDR.N    R3,??DataTable11_23
   \       0x3A   0x429A             CMP      R2,R3
   \       0x3C   0xD007             BEQ.N    ??DMA_CalcDMAMUXRequestGenBaseAndMask_1
   \       0x3E   0x6802             LDR      R2,[R0, #+0]
   \       0x40   0x....             LDR.N    R3,??DataTable11_24
   \       0x42   0x429A             CMP      R2,R3
   \       0x44   0xD003             BEQ.N    ??DMA_CalcDMAMUXRequestGenBaseAndMask_1
   \       0x46   0x6802             LDR      R2,[R0, #+0]
   \       0x48   0x....             LDR.N    R3,??DataTable11_16
   \       0x4A   0x429A             CMP      R2,R3
   \       0x4C   0xD101             BNE.N    ??DMA_CalcDMAMUXRequestGenBaseAndMask_2
   \                     ??DMA_CalcDMAMUXRequestGenBaseAndMask_1: (+1)
   \       0x4E   0x2201             MOVS     R2,#+1
   \       0x50   0xE000             B.N      ??DMA_CalcDMAMUXRequestGenBaseAndMask_3
   \                     ??DMA_CalcDMAMUXRequestGenBaseAndMask_2: (+1)
   \       0x52   0x2200             MOVS     R2,#+0
   \                     ??DMA_CalcDMAMUXRequestGenBaseAndMask_3: (+1)
   \       0x54   0xB2D2             UXTB     R2,R2
   \       0x56   0x2A00             CMP      R2,#+0
   \       0x58   0xD006             BEQ.N    ??DMA_CalcDMAMUXRequestGenBaseAndMask_4
   2026              {
   2027                /* BDMA Channels are connected to DMAMUX2 request generator blocks */
   2028                hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
   \       0x5A   0x....             LDR.N    R2,??DataTable11_29
   \       0x5C   0xEB12 0x0281      ADDS     R2,R2,R1, LSL #+2
   \       0x60   0x66C2             STR      R2,[R0, #+108]
   2029          
   2030                hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
   \       0x62   0x....             LDR.N    R2,??DataTable11_30
   \       0x64   0x6702             STR      R2,[R0, #+112]
   \       0x66   0xE005             B.N      ??DMA_CalcDMAMUXRequestGenBaseAndMask_5
   2031              }
   2032              else
   2033              {
   2034                /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
   2035                hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
   \                     ??DMA_CalcDMAMUXRequestGenBaseAndMask_4: (+1)
   \       0x68   0x....             LDR.N    R2,??DataTable11_31
   \       0x6A   0xEB12 0x0281      ADDS     R2,R2,R1, LSL #+2
   \       0x6E   0x66C2             STR      R2,[R0, #+108]
   2036          
   2037                hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
   \       0x70   0x....             LDR.N    R2,??DataTable11_32
   \       0x72   0x6702             STR      R2,[R0, #+112]
   2038              }
   2039          
   2040              hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
   \                     ??DMA_CalcDMAMUXRequestGenBaseAndMask_5: (+1)
   \       0x74   0x2201             MOVS     R2,#+1
   \       0x76   0x1E49             SUBS     R1,R1,#+1
   \       0x78   0x408A             LSLS     R2,R2,R1
   \       0x7A   0x6742             STR      R2,[R0, #+116]
   2041            }
   2042          }
   \                     ??DMA_CalcDMAMUXRequestGenBaseAndMask_0: (+1)
   \       0x7C   0x4770             BX       LR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x4002'0010        DC32     0x40020010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \        0x0   0x4002'0028        DC32     0x40020028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \        0x0   0x4002'0040        DC32     0x40020040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \        0x0   0x4002'0058        DC32     0x40020058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \        0x0   0x4002'0070        DC32     0x40020070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \        0x0   0x4002'0088        DC32     0x40020088

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \        0x0   0x4002'00A0        DC32     0x400200a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \        0x0   0x4002'00B8        DC32     0x400200b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \        0x0   0x4002'0410        DC32     0x40020410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \        0x0   0x4002'0428        DC32     0x40020428

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \        0x0   0x4002'0440        DC32     0x40020440

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \        0x0   0x4002'0458        DC32     0x40020458

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_12:
   \        0x0   0x4002'0470        DC32     0x40020470

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_13:
   \        0x0   0x4002'0488        DC32     0x40020488

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_14:
   \        0x0   0x4002'04A0        DC32     0x400204a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_15:
   \        0x0   0x4002'04B8        DC32     0x400204b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0xFE10'803F        DC32     0xfe10803f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0x5802'5408        DC32     0x58025408

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \        0x0   0x5802'541C        DC32     0x5802541c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \        0x0   0x5802'5430        DC32     0x58025430

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \        0x0   0x5802'5444        DC32     0x58025444

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \        0x0   0x5802'5458        DC32     0x58025458

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \        0x0   0x5802'546C        DC32     0x5802546c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \        0x0   0x5802'5480        DC32     0x58025480

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \        0x0   0x5802'5494        DC32     0x58025494

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \        0x0   0x4802'2C08        DC32     0x48022c08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \        0x0   0x4802'2C1C        DC32     0x48022c1c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \        0x0   0x4802'2C30        DC32     0x48022c30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \        0x0   0x4802'2C44        DC32     0x48022c44

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \        0x0   0x4802'2C58        DC32     0x48022c58

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \        0x0   0x4802'2C6C        DC32     0x48022c6c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_15:
   \        0x0   0x4802'2C80        DC32     0x48022c80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_16:
   \        0x0   0x4802'2C94        DC32     0x48022c94

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0xA7FD'ABF8        DC32     0xa7fdabf8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \        0x0   0x4002'0010        DC32     0x40020010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \        0x0   0x4002'0028        DC32     0x40020028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \        0x0   0x4002'0040        DC32     0x40020040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \        0x0   0x4002'0058        DC32     0x40020058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \        0x0   0x4002'0070        DC32     0x40020070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \        0x0   0x4002'0088        DC32     0x40020088

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \        0x0   0x4002'00A0        DC32     0x400200a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \        0x0   0x4002'00B8        DC32     0x400200b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \        0x0   0x4002'0410        DC32     0x40020410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \        0x0   0x4002'0428        DC32     0x40020428

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \        0x0   0x4002'0440        DC32     0x40020440

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \        0x0   0x4002'0458        DC32     0x40020458

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \        0x0   0x4002'0470        DC32     0x40020470

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \        0x0   0x4002'0488        DC32     0x40020488

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \        0x0   0x4002'04A0        DC32     0x400204a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \        0x0   0x4002'04B8        DC32     0x400204b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \        0x0   0x5802'5408        DC32     0x58025408

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \        0x0   0x5802'541C        DC32     0x5802541c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \        0x0   0x5802'5430        DC32     0x58025430

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \        0x0   0x5802'5444        DC32     0x58025444

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \        0x0   0x5802'5458        DC32     0x58025458

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \        0x0   0x5802'546C        DC32     0x5802546c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \        0x0   0x5802'5480        DC32     0x58025480

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \        0x0   0x5802'5494        DC32     0x58025494

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \        0x0   0x4002'0010        DC32     0x40020010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \        0x0   0x4002'0028        DC32     0x40020028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \        0x0   0x4002'0040        DC32     0x40020040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \        0x0   0x4002'0058        DC32     0x40020058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \        0x0   0x4002'0070        DC32     0x40020070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \        0x0   0x4002'0088        DC32     0x40020088

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \        0x0   0x4002'00A0        DC32     0x400200a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \        0x0   0x4002'00B8        DC32     0x400200b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \        0x0   0x4002'0410        DC32     0x40020410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \        0x0   0x4002'0428        DC32     0x40020428

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \        0x0   0x4002'0440        DC32     0x40020440

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \        0x0   0x4002'04B8        DC32     0x400204b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \        0x0   0x4002'0458        DC32     0x40020458

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \        0x0   0x4002'0470        DC32     0x40020470

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \        0x0   0x4002'0488        DC32     0x40020488

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \        0x0   0x4002'04A0        DC32     0x400204a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \        0x0   0x5802'5408        DC32     0x58025408

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \        0x0   0x5802'541C        DC32     0x5802541c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \        0x0   0x5802'5430        DC32     0x58025430

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \        0x0   0x5802'5444        DC32     0x58025444

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \        0x0   0x5802'5458        DC32     0x58025458

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \        0x0   0x5802'546C        DC32     0x5802546c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \        0x0   0x5802'5480        DC32     0x58025480

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \        0x0   0x5802'5494        DC32     0x58025494

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_12:
   \        0x0   0x4002'0010        DC32     0x40020010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_13:
   \        0x0   0x4002'0028        DC32     0x40020028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_14:
   \        0x0   0x4002'0040        DC32     0x40020040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_15:
   \        0x0   0x4002'0058        DC32     0x40020058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_16:
   \        0x0   0x4002'0070        DC32     0x40020070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_17:
   \        0x0   0x4002'0088        DC32     0x40020088

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_18:
   \        0x0   0x4002'00A0        DC32     0x400200a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_19:
   \        0x0   0x4002'00B8        DC32     0x400200b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_20:
   \        0x0   0x4002'0410        DC32     0x40020410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_21:
   \        0x0   0x4002'0428        DC32     0x40020428

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_22:
   \        0x0   0x4002'0440        DC32     0x40020440

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_23:
   \        0x0   0x4002'04B8        DC32     0x400204b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \        0x0   0x....'....        DC32     SystemCoreClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \        0x0   0x4002'0010        DC32     0x40020010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \        0x0   0x4002'0028        DC32     0x40020028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \        0x0   0x4002'0040        DC32     0x40020040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \        0x0   0x4002'0058        DC32     0x40020058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \        0x0   0x4002'0070        DC32     0x40020070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \        0x0   0x4002'0088        DC32     0x40020088

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \        0x0   0x4002'00A0        DC32     0x400200a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \        0x0   0x4002'00B8        DC32     0x400200b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \        0x0   0x4002'0410        DC32     0x40020410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \        0x0   0x4002'0428        DC32     0x40020428

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \        0x0   0x4002'0440        DC32     0x40020440

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \        0x0   0x4002'0458        DC32     0x40020458

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \        0x0   0x4002'0470        DC32     0x40020470

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_14:
   \        0x0   0x4002'0488        DC32     0x40020488

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_15:
   \        0x0   0x4002'04A0        DC32     0x400204a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_16:
   \        0x0   0x4002'04B8        DC32     0x400204b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \        0x0   0x4802'2C08        DC32     0x48022c08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \        0x0   0x4802'2C1C        DC32     0x48022c1c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \        0x0   0x4802'2C30        DC32     0x48022c30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \        0x0   0x4802'2C44        DC32     0x48022c44

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \        0x0   0x4802'2C58        DC32     0x48022c58

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \        0x0   0x4802'2C6C        DC32     0x48022c6c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \        0x0   0x4802'2C80        DC32     0x48022c80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \        0x0   0x4802'2C94        DC32     0x48022c94

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \        0x0   0x5802'5408        DC32     0x58025408

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_9:
   \        0x0   0x5802'541C        DC32     0x5802541c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_10:
   \        0x0   0x5802'5430        DC32     0x58025430

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_11:
   \        0x0   0x5802'5444        DC32     0x58025444

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_12:
   \        0x0   0x5802'5458        DC32     0x58025458

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_13:
   \        0x0   0x5802'546C        DC32     0x5802546c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_14:
   \        0x0   0x5802'5480        DC32     0x58025480

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_15:
   \        0x0   0x5802'5494        DC32     0x58025494

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \        0x0   0x4002'0010        DC32     0x40020010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \        0x0   0x4002'0028        DC32     0x40020028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \        0x0   0x4002'0040        DC32     0x40020040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \        0x0   0x4002'0058        DC32     0x40020058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \        0x0   0x4002'0070        DC32     0x40020070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \        0x0   0x4002'0088        DC32     0x40020088

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \        0x0   0x4002'00A0        DC32     0x400200a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_7:
   \        0x0   0x4002'00B8        DC32     0x400200b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_8:
   \        0x0   0x4002'0410        DC32     0x40020410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_9:
   \        0x0   0x4002'0428        DC32     0x40020428

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_10:
   \        0x0   0x4002'0440        DC32     0x40020440

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_11:
   \        0x0   0x4002'0458        DC32     0x40020458

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_12:
   \        0x0   0x4002'0470        DC32     0x40020470

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_13:
   \        0x0   0x4002'0488        DC32     0x40020488

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_14:
   \        0x0   0x4002'04A0        DC32     0x400204a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_15:
   \        0x0   0x4002'04B8        DC32     0x400204b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_16:
   \        0x0   0x5802'5494        DC32     0x58025494

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_17:
   \        0x0   0x....'....        DC32     `DMA_CalcBaseAndBitshift{1}{2}::flagBitshiftOffset`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_18:
   \        0x0   0x5802'5408        DC32     0x58025408

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_19:
   \        0x0   0x5802'541C        DC32     0x5802541c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_20:
   \        0x0   0x5802'5430        DC32     0x58025430

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_21:
   \        0x0   0x5802'5444        DC32     0x58025444

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_22:
   \        0x0   0x5802'5458        DC32     0x58025458

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_23:
   \        0x0   0x5802'546C        DC32     0x5802546c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_24:
   \        0x0   0x5802'5480        DC32     0x58025480

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_25:
   \        0x0   0x5802'5800        DC32     0x58025800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_26:
   \        0x0   0x5802'5880        DC32     0x58025880

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_27:
   \        0x0   0x4002'0800        DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_28:
   \        0x0   0x4002'0880        DC32     0x40020880

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_29:
   \        0x0   0x5802'58FC        DC32     0x580258fc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_30:
   \        0x0   0x5802'5940        DC32     0x58025940

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_31:
   \        0x0   0x4002'08FC        DC32     0x400208fc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_32:
   \        0x0   0x4002'0940        DC32     0x40020940
   2043          
   2044          /**
   2045            * @}
   2046            */
   2047          
   2048          #endif /* HAL_DMA_MODULE_ENABLED */
   2049          /**
   2050            * @}
   2051            */
   2052          
   2053          /**
   2054            * @}
   2055            */
   2056          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   DMA_CalcBaseAndBitshift
       0   DMA_CalcDMAMUXChannelBaseAndMask
       0   DMA_CalcDMAMUXRequestGenBaseAndMask
       0   DMA_CheckFifoParam
      16   DMA_SetConfig
      24   HAL_DMA_Abort
        24   -> HAL_GetTick
       8   HAL_DMA_Abort_IT
         8   -- Indirect call
      16   HAL_DMA_DeInit
        16   -> DMA_CalcBaseAndBitshift
        16   -> DMA_CalcDMAMUXChannelBaseAndMask
        16   -> DMA_CalcDMAMUXRequestGenBaseAndMask
       0   HAL_DMA_GetError
       0   HAL_DMA_GetState
      32   HAL_DMA_IRQHandler
        32   -- Indirect call
      16   HAL_DMA_Init
        16   -> DMA_CalcBaseAndBitshift
        16   -> DMA_CalcDMAMUXChannelBaseAndMask
        16   -> DMA_CalcDMAMUXRequestGenBaseAndMask
        16   -> DMA_CheckFifoParam
        16   -> HAL_GetTick
      40   HAL_DMA_PollForTransfer
        40   -> HAL_DMA_Abort
        40   -> HAL_GetTick
       4   HAL_DMA_RegisterCallback
      24   HAL_DMA_Start
        24   -> DMA_SetConfig
      24   HAL_DMA_Start_IT
        24   -> DMA_SetConfig
       0   HAL_DMA_UnRegisterCallback


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_10
       4  ??DataTable11_11
       4  ??DataTable11_12
       4  ??DataTable11_13
       4  ??DataTable11_14
       4  ??DataTable11_15
       4  ??DataTable11_16
       4  ??DataTable11_17
       4  ??DataTable11_18
       4  ??DataTable11_19
       4  ??DataTable11_2
       4  ??DataTable11_20
       4  ??DataTable11_21
       4  ??DataTable11_22
       4  ??DataTable11_23
       4  ??DataTable11_24
       4  ??DataTable11_25
       4  ??DataTable11_26
       4  ??DataTable11_27
       4  ??DataTable11_28
       4  ??DataTable11_29
       4  ??DataTable11_3
       4  ??DataTable11_30
       4  ??DataTable11_31
       4  ??DataTable11_32
       4  ??DataTable11_4
       4  ??DataTable11_5
       4  ??DataTable11_6
       4  ??DataTable11_7
       4  ??DataTable11_8
       4  ??DataTable11_9
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_12
       4  ??DataTable1_13
       4  ??DataTable1_14
       4  ??DataTable1_15
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_15
       4  ??DataTable2_16
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_13
       4  ??DataTable6_14
       4  ??DataTable6_15
       4  ??DataTable6_16
       4  ??DataTable6_17
       4  ??DataTable6_18
       4  ??DataTable6_19
       4  ??DataTable6_2
       4  ??DataTable6_20
       4  ??DataTable6_21
       4  ??DataTable6_22
       4  ??DataTable6_23
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_14
       4  ??DataTable7_15
       4  ??DataTable7_16
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_10
       4  ??DataTable9_11
       4  ??DataTable9_12
       4  ??DataTable9_13
       4  ??DataTable9_14
       4  ??DataTable9_15
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
     212  DMA_CalcBaseAndBitshift
     168  DMA_CalcDMAMUXChannelBaseAndMask
     126  DMA_CalcDMAMUXRequestGenBaseAndMask
     140  DMA_CheckFifoParam
     696  DMA_SetConfig
   1'184  HAL_DMA_Abort
     848  HAL_DMA_Abort_IT
     946  HAL_DMA_DeInit
       4  HAL_DMA_GetError
       6  HAL_DMA_GetState
   2'706  HAL_DMA_IRQHandler
   1'352  HAL_DMA_Init
   1'432  HAL_DMA_PollForTransfer
     106  HAL_DMA_RegisterCallback
     448  HAL_DMA_Start
     912  HAL_DMA_Start_IT
     142  HAL_DMA_UnRegisterCallback
       8  flagBitshiftOffset

 
      8 bytes in section .rodata
 12'068 bytes in section .text
 
 12'068 bytes of CODE  memory
      8 bytes of CONST memory

Errors: none
Warnings: none
