###############################################################################
#
# IAR ANSI C/C++ Compiler V9.20.1.318/W64 for ARM         05/Feb/2022  17:09:32
# Copyright 1999-2021 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        D:\99_Project\GitHub\TouchGFX\MyApplication\Drivers\STM32H7xx_HAL_Driver\Src\stm32h7xx_hal_crc_ex.c
#        [UTF-8]
#    Command line      =
#        -f
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Drivers\STM32H7xx_HAL_Driver\stm32h7xx_hal_crc_ex.o.rsp
#        (D:\99_Project\GitHub\TouchGFX\MyApplication\Drivers\STM32H7xx_HAL_Driver\Src\stm32h7xx_hal_crc_ex.c
#        -D USE_HAL_DRIVER -D STM32H7B3xxQ -D USE_BPP=24 -lC
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\Drivers\STM32H7xx_HAL_Driver
#        -lA
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\Drivers\STM32H7xx_HAL_Driver
#        -o
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Drivers\STM32H7xx_HAL_Driver
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.0\arm\inc\c\DLib_Config_Full.h" -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Core/Inc\ -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/App\ -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/target/generated\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/target\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/STM32H7xx_HAL_Driver/Inc\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/STM32H7xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM4F\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/CMSIS/Device/ST/STM32H7xx/Include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/BSP/Components/Common\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/BSP/STM32H7B3I-DK\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Middlewares/ST/touchgfx/framework/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/fonts/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/gui_generated/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/images/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/texts/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/gui/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/videos/include\
#        -Ol --source_encoding utf8 --text_out utf8 --utf8_text_in)
#        --dependencies=n
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Drivers\STM32H7xx_HAL_Driver\stm32h7xx_hal_crc_ex.o.d
#    Locale            =  C
#    List file         =
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\Drivers\STM32H7xx_HAL_Driver\stm32h7xx_hal_crc_ex.lst
#    Object file       =
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Drivers\STM32H7xx_HAL_Driver\stm32h7xx_hal_crc_ex.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

D:\99_Project\GitHub\TouchGFX\MyApplication\Drivers\STM32H7xx_HAL_Driver\Src\stm32h7xx_hal_crc_ex.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32h7xx_hal_crc_ex.c
      4            * @author  MCD Application Team
      5            * @brief   Extended CRC HAL module driver.
      6            *          This file provides firmware functions to manage the extended
      7            *          functionalities of the CRC peripheral.
      8            *
      9            ******************************************************************************
     10            * @attention
     11            *
     12            * Copyright (c) 2017 STMicroelectronics.
     13            * All rights reserved.
     14            *
     15            * This software is licensed under terms that can be found in the LICENSE file
     16            * in the root directory of this software component.
     17            * If no LICENSE file comes with this software, it is provided AS-IS.
     18            *
     19            ******************************************************************************
     20            @verbatim
     21          ================================================================================
     22                      ##### How to use this driver #####
     23          ================================================================================
     24              [..]
     25                   (+) Set user-defined generating polynomial through HAL_CRCEx_Polynomial_Set()
     26                   (+) Configure Input or Output data inversion
     27          
     28            @endverbatim
     29            ******************************************************************************
     30            */
     31          
     32          /* Includes ------------------------------------------------------------------*/
     33          #include "stm32h7xx_hal.h"
     34          
     35          /** @addtogroup STM32H7xx_HAL_Driver
     36            * @{
     37            */
     38          
     39          /** @defgroup CRCEx CRCEx
     40            * @brief CRC Extended HAL module driver
     41            * @{
     42            */
     43          
     44          #ifdef HAL_CRC_MODULE_ENABLED
     45          
     46          /* Private typedef -----------------------------------------------------------*/
     47          /* Private define ------------------------------------------------------------*/
     48          /* Private macro -------------------------------------------------------------*/
     49          /* Private variables ---------------------------------------------------------*/
     50          /* Private function prototypes -----------------------------------------------*/
     51          /* Exported functions --------------------------------------------------------*/
     52          
     53          /** @defgroup CRCEx_Exported_Functions CRC Extended Exported Functions
     54            * @{
     55            */
     56          
     57          /** @defgroup CRCEx_Exported_Functions_Group1 Extended Initialization/de-initialization functions
     58            * @brief    Extended Initialization and Configuration functions.
     59            *
     60          @verbatim
     61           ===============================================================================
     62                      ##### Extended configuration functions #####
     63           ===============================================================================
     64              [..]  This section provides functions allowing to:
     65                (+) Configure the generating polynomial
     66                (+) Configure the input data inversion
     67                (+) Configure the output data inversion
     68          
     69          @endverbatim
     70            * @{
     71            */
     72          
     73          
     74          /**
     75            * @brief  Initialize the CRC polynomial if different from default one.
     76            * @param  hcrc CRC handle
     77            * @param  Pol CRC generating polynomial (7, 8, 16 or 32-bit long).
     78            *         This parameter is written in normal representation, e.g.
     79            *         @arg for a polynomial of degree 7, X^7 + X^6 + X^5 + X^2 + 1 is written 0x65
     80            *         @arg for a polynomial of degree 16, X^16 + X^12 + X^5 + 1 is written 0x1021
     81            * @param  PolyLength CRC polynomial length.
     82            *         This parameter can be one of the following values:
     83            *          @arg @ref CRC_POLYLENGTH_7B  7-bit long CRC (generating polynomial of degree 7)
     84            *          @arg @ref CRC_POLYLENGTH_8B  8-bit long CRC (generating polynomial of degree 8)
     85            *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
     86            *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
     87            * @retval HAL status
     88            */

   \                                 In section .text, align 2, keep-with-next
     89          HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
     90          {
   \                     HAL_CRCEx_Polynomial_Set: (+1)
   \        0x0   0xB470             PUSH     {R4-R6}
   \        0x2   0x0003             MOVS     R3,R0
     91            HAL_StatusTypeDef status = HAL_OK;
   \        0x4   0x2400             MOVS     R4,#+0
     92            uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
   \        0x6   0x251F             MOVS     R5,#+31
     93          
     94            /* Check the parameters */
     95            assert_param(IS_CRC_POL_LENGTH(PolyLength));
     96          
     97            /* check polynomial definition vs polynomial size:
     98             * polynomial length must be aligned with polynomial
     99             * definition. HAL_ERROR is reported if Pol degree is
    100             * larger than that indicated by PolyLength.
    101             * Look for MSB position: msb will contain the degree of
    102             *  the second to the largest polynomial member. E.g., for
    103             *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    104            while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
   \                     ??HAL_CRCEx_Polynomial_Set_0: (+1)
   \        0x8   0x0028             MOVS     R0,R5
   \        0xA   0x1E45             SUBS     R5,R0,#+1
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD005             BEQ.N    ??HAL_CRCEx_Polynomial_Set_1
   \       0x10   0xF015 0x001F      ANDS     R0,R5,#0x1F
   \       0x14   0x000E             MOVS     R6,R1
   \       0x16   0x40C6             LSRS     R6,R6,R0
   \       0x18   0x07F0             LSLS     R0,R6,#+31
   \       0x1A   0xD5F5             BPL.N    ??HAL_CRCEx_Polynomial_Set_0
    105            {
    106            }
    107          
    108            switch (PolyLength)
   \                     ??HAL_CRCEx_Polynomial_Set_1: (+1)
   \       0x1C   0x0010             MOVS     R0,R2
   \       0x1E   0x2800             CMP      R0,#+0
   \       0x20   0xD011             BEQ.N    ??HAL_CRCEx_Polynomial_Set_2
   \       0x22   0x2808             CMP      R0,#+8
   \       0x24   0xD00B             BEQ.N    ??HAL_CRCEx_Polynomial_Set_3
   \       0x26   0x2810             CMP      R0,#+16
   \       0x28   0xD005             BEQ.N    ??HAL_CRCEx_Polynomial_Set_4
   \       0x2A   0x2818             CMP      R0,#+24
   \       0x2C   0xD10C             BNE.N    ??HAL_CRCEx_Polynomial_Set_5
    109            {
    110              case CRC_POLYLENGTH_7B:
    111                if (msb >= HAL_CRC_LENGTH_7B)
   \                     ??HAL_CRCEx_Polynomial_Set_6: (+1)
   \       0x2E   0x2D07             CMP      R5,#+7
   \       0x30   0xD300             BCC.N    ??HAL_CRCEx_Polynomial_Set_7
    112                {
    113                  status =   HAL_ERROR;
   \       0x32   0x2401             MOVS     R4,#+1
    114                }
    115                break;
   \                     ??HAL_CRCEx_Polynomial_Set_7: (+1)
   \       0x34   0xE009             B.N      ??HAL_CRCEx_Polynomial_Set_8
    116              case CRC_POLYLENGTH_8B:
    117                if (msb >= HAL_CRC_LENGTH_8B)
   \                     ??HAL_CRCEx_Polynomial_Set_4: (+1)
   \       0x36   0x2D08             CMP      R5,#+8
   \       0x38   0xD300             BCC.N    ??HAL_CRCEx_Polynomial_Set_9
    118                {
    119                  status =   HAL_ERROR;
   \       0x3A   0x2401             MOVS     R4,#+1
    120                }
    121                break;
   \                     ??HAL_CRCEx_Polynomial_Set_9: (+1)
   \       0x3C   0xE005             B.N      ??HAL_CRCEx_Polynomial_Set_8
    122              case CRC_POLYLENGTH_16B:
    123                if (msb >= HAL_CRC_LENGTH_16B)
   \                     ??HAL_CRCEx_Polynomial_Set_3: (+1)
   \       0x3E   0x2D10             CMP      R5,#+16
   \       0x40   0xD300             BCC.N    ??HAL_CRCEx_Polynomial_Set_10
    124                {
    125                  status =   HAL_ERROR;
   \       0x42   0x2401             MOVS     R4,#+1
    126                }
    127                break;
   \                     ??HAL_CRCEx_Polynomial_Set_10: (+1)
   \       0x44   0xE001             B.N      ??HAL_CRCEx_Polynomial_Set_8
    128          
    129              case CRC_POLYLENGTH_32B:
    130                /* no polynomial definition vs. polynomial length issue possible */
    131                break;
   \                     ??HAL_CRCEx_Polynomial_Set_2: (+1)
   \       0x46   0xE000             B.N      ??HAL_CRCEx_Polynomial_Set_8
    132              default:
    133                status =  HAL_ERROR;
   \                     ??HAL_CRCEx_Polynomial_Set_5: (+1)
   \       0x48   0x2401             MOVS     R4,#+1
    134                break;
    135            }
    136            if (status == HAL_OK)
   \                     ??HAL_CRCEx_Polynomial_Set_8: (+1)
   \       0x4A   0x0020             MOVS     R0,R4
   \       0x4C   0xB2C0             UXTB     R0,R0
   \       0x4E   0x2800             CMP      R0,#+0
   \       0x50   0xD108             BNE.N    ??HAL_CRCEx_Polynomial_Set_11
    137            {
    138              /* set generating polynomial */
    139              WRITE_REG(hcrc->Instance->POL, Pol);
   \       0x52   0x6818             LDR      R0,[R3, #+0]
   \       0x54   0x6141             STR      R1,[R0, #+20]
    140          
    141              /* set generating polynomial size */
    142              MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
   \       0x56   0x6818             LDR      R0,[R3, #+0]
   \       0x58   0x6880             LDR      R0,[R0, #+8]
   \       0x5A   0xF030 0x0018      BICS     R0,R0,#0x18
   \       0x5E   0x4302             ORRS     R2,R2,R0
   \       0x60   0x6818             LDR      R0,[R3, #+0]
   \       0x62   0x6082             STR      R2,[R0, #+8]
    143            }
    144            /* Return function status */
    145            return status;
   \                     ??HAL_CRCEx_Polynomial_Set_11: (+1)
   \       0x64   0x0020             MOVS     R0,R4
   \       0x66   0xB2C0             UXTB     R0,R0
   \       0x68   0xBC70             POP      {R4-R6}
   \       0x6A   0x4770             BX       LR
    146          }
    147          
    148          /**
    149            * @brief  Set the Reverse Input data mode.
    150            * @param  hcrc CRC handle
    151            * @param  InputReverseMode Input Data inversion mode.
    152            *         This parameter can be one of the following values:
    153            *          @arg @ref CRC_INPUTDATA_INVERSION_NONE     no change in bit order (default value)
    154            *          @arg @ref CRC_INPUTDATA_INVERSION_BYTE     Byte-wise bit reversal
    155            *          @arg @ref CRC_INPUTDATA_INVERSION_HALFWORD HalfWord-wise bit reversal
    156            *          @arg @ref CRC_INPUTDATA_INVERSION_WORD     Word-wise bit reversal
    157            * @retval HAL status
    158            */

   \                                 In section .text, align 2, keep-with-next
    159          HAL_StatusTypeDef HAL_CRCEx_Input_Data_Reverse(CRC_HandleTypeDef *hcrc, uint32_t InputReverseMode)
    160          {
    161            /* Check the parameters */
    162            assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(InputReverseMode));
    163          
    164            /* Change CRC peripheral state */
    165            hcrc->State = HAL_CRC_STATE_BUSY;
   \                     HAL_CRCEx_Input_Data_Reverse: (+1)
   \        0x0   0x2202             MOVS     R2,#+2
   \        0x2   0x7742             STRB     R2,[R0, #+29]
    166          
    167            /* set input data inversion mode */
    168            MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, InputReverseMode);
   \        0x4   0x6802             LDR      R2,[R0, #+0]
   \        0x6   0x6892             LDR      R2,[R2, #+8]
   \        0x8   0xF032 0x0260      BICS     R2,R2,#0x60
   \        0xC   0x4311             ORRS     R1,R1,R2
   \        0xE   0x6802             LDR      R2,[R0, #+0]
   \       0x10   0x6091             STR      R1,[R2, #+8]
    169            /* Change CRC peripheral state */
    170            hcrc->State = HAL_CRC_STATE_READY;
   \       0x12   0x2101             MOVS     R1,#+1
   \       0x14   0x7741             STRB     R1,[R0, #+29]
    171          
    172            /* Return function status */
    173            return HAL_OK;
   \       0x16   0x2000             MOVS     R0,#+0
   \       0x18   0x4770             BX       LR
    174          }
    175          
    176          /**
    177            * @brief  Set the Reverse Output data mode.
    178            * @param  hcrc CRC handle
    179            * @param  OutputReverseMode Output Data inversion mode.
    180            *         This parameter can be one of the following values:
    181            *          @arg @ref CRC_OUTPUTDATA_INVERSION_DISABLE no CRC inversion (default value)
    182            *          @arg @ref CRC_OUTPUTDATA_INVERSION_ENABLE  bit-level inversion (e.g. for a 8-bit CRC: 0xB5 becomes 0xAD)
    183            * @retval HAL status
    184            */

   \                                 In section .text, align 2, keep-with-next
    185          HAL_StatusTypeDef HAL_CRCEx_Output_Data_Reverse(CRC_HandleTypeDef *hcrc, uint32_t OutputReverseMode)
    186          {
    187            /* Check the parameters */
    188            assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(OutputReverseMode));
    189          
    190            /* Change CRC peripheral state */
    191            hcrc->State = HAL_CRC_STATE_BUSY;
   \                     HAL_CRCEx_Output_Data_Reverse: (+1)
   \        0x0   0x2202             MOVS     R2,#+2
   \        0x2   0x7742             STRB     R2,[R0, #+29]
    192          
    193            /* set output data inversion mode */
    194            MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, OutputReverseMode);
   \        0x4   0x6802             LDR      R2,[R0, #+0]
   \        0x6   0x6892             LDR      R2,[R2, #+8]
   \        0x8   0xF032 0x0280      BICS     R2,R2,#0x80
   \        0xC   0x4311             ORRS     R1,R1,R2
   \        0xE   0x6802             LDR      R2,[R0, #+0]
   \       0x10   0x6091             STR      R1,[R2, #+8]
    195          
    196            /* Change CRC peripheral state */
    197            hcrc->State = HAL_CRC_STATE_READY;
   \       0x12   0x2101             MOVS     R1,#+1
   \       0x14   0x7741             STRB     R1,[R0, #+29]
    198          
    199            /* Return function status */
    200            return HAL_OK;
   \       0x16   0x2000             MOVS     R0,#+0
   \       0x18   0x4770             BX       LR
    201          }
    202          
    203          
    204          
    205          
    206          /**
    207            * @}
    208            */
    209          
    210          
    211          /**
    212            * @}
    213            */
    214          
    215          
    216          #endif /* HAL_CRC_MODULE_ENABLED */
    217          /**
    218            * @}
    219            */
    220          
    221          /**
    222            * @}
    223            */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   HAL_CRCEx_Input_Data_Reverse
       0   HAL_CRCEx_Output_Data_Reverse
      12   HAL_CRCEx_Polynomial_Set


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      26  HAL_CRCEx_Input_Data_Reverse
      26  HAL_CRCEx_Output_Data_Reverse
     108  HAL_CRCEx_Polynomial_Set

 
 160 bytes in section .text
 
 160 bytes of CODE memory

Errors: none
Warnings: none
