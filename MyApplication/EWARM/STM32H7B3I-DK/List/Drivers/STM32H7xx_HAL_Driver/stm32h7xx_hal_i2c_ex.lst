###############################################################################
#
# IAR ANSI C/C++ Compiler V9.20.1.318/W64 for ARM         07/Feb/2022  20:39:47
# Copyright 1999-2021 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        D:\99_Project\GitHub\TouchGFX\MyApplication\Drivers\STM32H7xx_HAL_Driver\Src\stm32h7xx_hal_i2c_ex.c
#        [UTF-8]
#    Command line      =
#        -f
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Drivers\STM32H7xx_HAL_Driver\stm32h7xx_hal_i2c_ex.o.rsp
#        (D:\99_Project\GitHub\TouchGFX\MyApplication\Drivers\STM32H7xx_HAL_Driver\Src\stm32h7xx_hal_i2c_ex.c
#        -D USE_HAL_DRIVER -D STM32H7B3xxQ -D USE_BPP=24 -lC
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\Drivers\STM32H7xx_HAL_Driver
#        -lA
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\Drivers\STM32H7xx_HAL_Driver
#        -o
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Drivers\STM32H7xx_HAL_Driver
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.0\arm\inc\c\DLib_Config_Full.h" -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Core/Inc\ -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/App\ -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/target/generated\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/target\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/STM32H7xx_HAL_Driver/Inc\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/STM32H7xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM4F\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/CMSIS/Device/ST/STM32H7xx/Include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/BSP/Components/Common\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/BSP/STM32H7B3I-DK\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Middlewares/ST/touchgfx/framework/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/fonts/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/gui_generated/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/images/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/texts/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/gui/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/videos/include\
#        -Ol --source_encoding utf8 --text_out utf8 --utf8_text_in)
#        --dependencies=n
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Drivers\STM32H7xx_HAL_Driver\stm32h7xx_hal_i2c_ex.o.d
#    Locale            =  C
#    List file         =
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\Drivers\STM32H7xx_HAL_Driver\stm32h7xx_hal_i2c_ex.lst
#    Object file       =
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Drivers\STM32H7xx_HAL_Driver\stm32h7xx_hal_i2c_ex.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

D:\99_Project\GitHub\TouchGFX\MyApplication\Drivers\STM32H7xx_HAL_Driver\Src\stm32h7xx_hal_i2c_ex.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32h7xx_hal_i2c_ex.c
      4            * @author  MCD Application Team
      5            * @brief   I2C Extended HAL module driver.
      6            *          This file provides firmware functions to manage the following
      7            *          functionalities of I2C Extended peripheral:
      8            *           + Filter Mode Functions
      9            *           + WakeUp Mode Functions
     10            *           + FastModePlus Functions
     11            *
     12            ******************************************************************************
     13            * @attention
     14            *
     15            * Copyright (c) 2017 STMicroelectronics.
     16            * All rights reserved.
     17            *
     18            * This software is licensed under terms that can be found in the LICENSE file
     19            * in the root directory of this software component.
     20            * If no LICENSE file comes with this software, it is provided AS-IS.
     21            *
     22            ******************************************************************************
     23            @verbatim
     24            ==============================================================================
     25                         ##### I2C peripheral Extended features  #####
     26            ==============================================================================
     27          
     28            [..] Comparing to other previous devices, the I2C interface for STM32H7xx
     29                 devices contains the following additional features
     30          
     31                 (+) Possibility to disable or enable Analog Noise Filter
     32                 (+) Use of a configured Digital Noise Filter
     33                 (+) Disable or enable wakeup from Stop mode(s)
     34                 (+) Disable or enable Fast Mode Plus
     35          
     36                               ##### How to use this driver #####
     37            ==============================================================================
     38            [..] This driver provides functions to configure Noise Filter and Wake Up Feature
     39              (#) Configure I2C Analog noise filter using the function HAL_I2CEx_ConfigAnalogFilter()
     40              (#) Configure I2C Digital noise filter using the function HAL_I2CEx_ConfigDigitalFilter()
     41              (#) Configure the enable or disable of I2C Wake Up Mode using the functions :
     42                    (++) HAL_I2CEx_EnableWakeUp()
     43                    (++) HAL_I2CEx_DisableWakeUp()
     44              (#) Configure the enable or disable of fast mode plus driving capability using the functions :
     45                    (++) HAL_I2CEx_EnableFastModePlus()
     46                    (++) HAL_I2CEx_DisableFastModePlus()
     47            @endverbatim
     48            */
     49          
     50          /* Includes ------------------------------------------------------------------*/
     51          #include "stm32h7xx_hal.h"
     52          
     53          /** @addtogroup STM32H7xx_HAL_Driver
     54            * @{
     55            */
     56          
     57          /** @defgroup I2CEx I2CEx
     58            * @brief I2C Extended HAL module driver
     59            * @{
     60            */
     61          
     62          #ifdef HAL_I2C_MODULE_ENABLED
     63          
     64          /* Private typedef -----------------------------------------------------------*/
     65          /* Private define ------------------------------------------------------------*/
     66          /* Private macro -------------------------------------------------------------*/
     67          /* Private variables ---------------------------------------------------------*/
     68          /* Private function prototypes -----------------------------------------------*/
     69          /* Private functions ---------------------------------------------------------*/
     70          
     71          /** @defgroup I2CEx_Exported_Functions I2C Extended Exported Functions
     72            * @{
     73            */
     74          
     75          /** @defgroup I2CEx_Exported_Functions_Group1 Filter Mode Functions
     76            * @brief    Filter Mode Functions
     77            *
     78          @verbatim
     79           ===============================================================================
     80                                ##### Filter Mode Functions #####
     81           ===============================================================================
     82              [..] This section provides functions allowing to:
     83                (+) Configure Noise Filters
     84          
     85          @endverbatim
     86            * @{
     87            */
     88          
     89          /**
     90            * @brief  Configure I2C Analog noise filter.
     91            * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
     92            *                the configuration information for the specified I2Cx peripheral.
     93            * @param  AnalogFilter New state of the Analog filter.
     94            * @retval HAL status
     95            */

   \                                 In section .text, align 2, keep-with-next
     96          HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
     97          {
     98            /* Check the parameters */
     99            assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
    100            assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
    101          
    102            if (hi2c->State == HAL_I2C_STATE_READY)
   \                     HAL_I2CEx_ConfigAnalogFilter: (+1)
   \        0x0   0xF890 0x2041      LDRB     R2,[R0, #+65]
   \        0x4   0x2A20             CMP      R2,#+32
   \        0x6   0xD12A             BNE.N    ??HAL_I2CEx_ConfigAnalogFilter_0
    103            {
    104              /* Process Locked */
    105              __HAL_LOCK(hi2c);
   \        0x8   0xF890 0x2040      LDRB     R2,[R0, #+64]
   \        0xC   0x2A01             CMP      R2,#+1
   \        0xE   0xD101             BNE.N    ??HAL_I2CEx_ConfigAnalogFilter_1
   \       0x10   0x2002             MOVS     R0,#+2
   \       0x12   0xE025             B.N      ??HAL_I2CEx_ConfigAnalogFilter_2
   \                     ??HAL_I2CEx_ConfigAnalogFilter_1: (+1)
   \       0x14   0x2201             MOVS     R2,#+1
   \       0x16   0xF880 0x2040      STRB     R2,[R0, #+64]
    106          
    107              hi2c->State = HAL_I2C_STATE_BUSY;
   \       0x1A   0x2224             MOVS     R2,#+36
   \       0x1C   0xF880 0x2041      STRB     R2,[R0, #+65]
    108          
    109              /* Disable the selected I2C peripheral */
    110              __HAL_I2C_DISABLE(hi2c);
   \       0x20   0x6802             LDR      R2,[R0, #+0]
   \       0x22   0x6812             LDR      R2,[R2, #+0]
   \       0x24   0x0852             LSRS     R2,R2,#+1
   \       0x26   0x0052             LSLS     R2,R2,#+1
   \       0x28   0x6803             LDR      R3,[R0, #+0]
   \       0x2A   0x601A             STR      R2,[R3, #+0]
    111          
    112              /* Reset I2Cx ANOFF bit */
    113              hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
   \       0x2C   0x6802             LDR      R2,[R0, #+0]
   \       0x2E   0x6812             LDR      R2,[R2, #+0]
   \       0x30   0xF432 0x5280      BICS     R2,R2,#0x1000
   \       0x34   0x6803             LDR      R3,[R0, #+0]
   \       0x36   0x601A             STR      R2,[R3, #+0]
    114          
    115              /* Set analog filter bit*/
    116              hi2c->Instance->CR1 |= AnalogFilter;
   \       0x38   0x6802             LDR      R2,[R0, #+0]
   \       0x3A   0x6812             LDR      R2,[R2, #+0]
   \       0x3C   0x4311             ORRS     R1,R1,R2
   \       0x3E   0x6802             LDR      R2,[R0, #+0]
   \       0x40   0x6011             STR      R1,[R2, #+0]
    117          
    118              __HAL_I2C_ENABLE(hi2c);
   \       0x42   0x6801             LDR      R1,[R0, #+0]
   \       0x44   0x6809             LDR      R1,[R1, #+0]
   \       0x46   0xF051 0x0101      ORRS     R1,R1,#0x1
   \       0x4A   0x6802             LDR      R2,[R0, #+0]
   \       0x4C   0x6011             STR      R1,[R2, #+0]
    119          
    120              hi2c->State = HAL_I2C_STATE_READY;
   \       0x4E   0x2120             MOVS     R1,#+32
   \       0x50   0xF880 0x1041      STRB     R1,[R0, #+65]
    121          
    122              /* Process Unlocked */
    123              __HAL_UNLOCK(hi2c);
   \       0x54   0x2100             MOVS     R1,#+0
   \       0x56   0xF880 0x1040      STRB     R1,[R0, #+64]
    124          
    125              return HAL_OK;
   \       0x5A   0x2000             MOVS     R0,#+0
   \       0x5C   0xE000             B.N      ??HAL_I2CEx_ConfigAnalogFilter_2
    126            }
    127            else
    128            {
    129              return HAL_BUSY;
   \                     ??HAL_I2CEx_ConfigAnalogFilter_0: (+1)
   \       0x5E   0x2002             MOVS     R0,#+2
   \                     ??HAL_I2CEx_ConfigAnalogFilter_2: (+1)
   \       0x60   0x4770             BX       LR
    130            }
    131          }
    132          
    133          /**
    134            * @brief  Configure I2C Digital noise filter.
    135            * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
    136            *                the configuration information for the specified I2Cx peripheral.
    137            * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
    138            * @retval HAL status
    139            */

   \                                 In section .text, align 2, keep-with-next
    140          HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
    141          {
    142            uint32_t tmpreg;
    143          
    144            /* Check the parameters */
    145            assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
    146            assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
    147          
    148            if (hi2c->State == HAL_I2C_STATE_READY)
   \                     HAL_I2CEx_ConfigDigitalFilter: (+1)
   \        0x0   0xF890 0x2041      LDRB     R2,[R0, #+65]
   \        0x4   0x2A20             CMP      R2,#+32
   \        0x6   0xD127             BNE.N    ??HAL_I2CEx_ConfigDigitalFilter_0
    149            {
    150              /* Process Locked */
    151              __HAL_LOCK(hi2c);
   \        0x8   0xF890 0x2040      LDRB     R2,[R0, #+64]
   \        0xC   0x2A01             CMP      R2,#+1
   \        0xE   0xD101             BNE.N    ??HAL_I2CEx_ConfigDigitalFilter_1
   \       0x10   0x2002             MOVS     R0,#+2
   \       0x12   0xE022             B.N      ??HAL_I2CEx_ConfigDigitalFilter_2
   \                     ??HAL_I2CEx_ConfigDigitalFilter_1: (+1)
   \       0x14   0x2201             MOVS     R2,#+1
   \       0x16   0xF880 0x2040      STRB     R2,[R0, #+64]
    152          
    153              hi2c->State = HAL_I2C_STATE_BUSY;
   \       0x1A   0x2224             MOVS     R2,#+36
   \       0x1C   0xF880 0x2041      STRB     R2,[R0, #+65]
    154          
    155              /* Disable the selected I2C peripheral */
    156              __HAL_I2C_DISABLE(hi2c);
   \       0x20   0x6802             LDR      R2,[R0, #+0]
   \       0x22   0x6812             LDR      R2,[R2, #+0]
   \       0x24   0x0852             LSRS     R2,R2,#+1
   \       0x26   0x0052             LSLS     R2,R2,#+1
   \       0x28   0x6803             LDR      R3,[R0, #+0]
   \       0x2A   0x601A             STR      R2,[R3, #+0]
    157          
    158              /* Get the old register value */
    159              tmpreg = hi2c->Instance->CR1;
   \       0x2C   0x6802             LDR      R2,[R0, #+0]
   \       0x2E   0x6812             LDR      R2,[R2, #+0]
    160          
    161              /* Reset I2Cx DNF bits [11:8] */
    162              tmpreg &= ~(I2C_CR1_DNF);
   \       0x30   0xF432 0x6270      BICS     R2,R2,#0xF00
    163          
    164              /* Set I2Cx DNF coefficient */
    165              tmpreg |= DigitalFilter << 8U;
   \       0x34   0xEA52 0x2201      ORRS     R2,R2,R1, LSL #+8
    166          
    167              /* Store the new register value */
    168              hi2c->Instance->CR1 = tmpreg;
   \       0x38   0x6801             LDR      R1,[R0, #+0]
   \       0x3A   0x600A             STR      R2,[R1, #+0]
    169          
    170              __HAL_I2C_ENABLE(hi2c);
   \       0x3C   0x6801             LDR      R1,[R0, #+0]
   \       0x3E   0x6809             LDR      R1,[R1, #+0]
   \       0x40   0xF051 0x0101      ORRS     R1,R1,#0x1
   \       0x44   0x6802             LDR      R2,[R0, #+0]
   \       0x46   0x6011             STR      R1,[R2, #+0]
    171          
    172              hi2c->State = HAL_I2C_STATE_READY;
   \       0x48   0x2120             MOVS     R1,#+32
   \       0x4A   0xF880 0x1041      STRB     R1,[R0, #+65]
    173          
    174              /* Process Unlocked */
    175              __HAL_UNLOCK(hi2c);
   \       0x4E   0x2100             MOVS     R1,#+0
   \       0x50   0xF880 0x1040      STRB     R1,[R0, #+64]
    176          
    177              return HAL_OK;
   \       0x54   0x2000             MOVS     R0,#+0
   \       0x56   0xE000             B.N      ??HAL_I2CEx_ConfigDigitalFilter_2
    178            }
    179            else
    180            {
    181              return HAL_BUSY;
   \                     ??HAL_I2CEx_ConfigDigitalFilter_0: (+1)
   \       0x58   0x2002             MOVS     R0,#+2
   \                     ??HAL_I2CEx_ConfigDigitalFilter_2: (+1)
   \       0x5A   0x4770             BX       LR
    182            }
    183          }
    184          /**
    185            * @}
    186            */
    187          
    188          /** @defgroup I2CEx_Exported_Functions_Group2 WakeUp Mode Functions
    189            * @brief    WakeUp Mode Functions
    190            *
    191          @verbatim
    192           ===============================================================================
    193                                ##### WakeUp Mode Functions #####
    194           ===============================================================================
    195              [..] This section provides functions allowing to:
    196                (+) Configure Wake Up Feature
    197          
    198          @endverbatim
    199            * @{
    200            */
    201          
    202          /**
    203            * @brief  Enable I2C wakeup from Stop mode(s).
    204            * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
    205            *                the configuration information for the specified I2Cx peripheral.
    206            * @retval HAL status
    207            */

   \                                 In section .text, align 2, keep-with-next
    208          HAL_StatusTypeDef HAL_I2CEx_EnableWakeUp(I2C_HandleTypeDef *hi2c)
    209          {
    210            /* Check the parameters */
    211            assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(hi2c->Instance));
    212          
    213            if (hi2c->State == HAL_I2C_STATE_READY)
   \                     HAL_I2CEx_EnableWakeUp: (+1)
   \        0x0   0xF890 0x1041      LDRB     R1,[R0, #+65]
   \        0x4   0x2920             CMP      R1,#+32
   \        0x6   0xD125             BNE.N    ??HAL_I2CEx_EnableWakeUp_0
    214            {
    215              /* Process Locked */
    216              __HAL_LOCK(hi2c);
   \        0x8   0xF890 0x1040      LDRB     R1,[R0, #+64]
   \        0xC   0x2901             CMP      R1,#+1
   \        0xE   0xD101             BNE.N    ??HAL_I2CEx_EnableWakeUp_1
   \       0x10   0x2002             MOVS     R0,#+2
   \       0x12   0xE020             B.N      ??HAL_I2CEx_EnableWakeUp_2
   \                     ??HAL_I2CEx_EnableWakeUp_1: (+1)
   \       0x14   0x2101             MOVS     R1,#+1
   \       0x16   0xF880 0x1040      STRB     R1,[R0, #+64]
    217          
    218              hi2c->State = HAL_I2C_STATE_BUSY;
   \       0x1A   0x2124             MOVS     R1,#+36
   \       0x1C   0xF880 0x1041      STRB     R1,[R0, #+65]
    219          
    220              /* Disable the selected I2C peripheral */
    221              __HAL_I2C_DISABLE(hi2c);
   \       0x20   0x6801             LDR      R1,[R0, #+0]
   \       0x22   0x6809             LDR      R1,[R1, #+0]
   \       0x24   0x0849             LSRS     R1,R1,#+1
   \       0x26   0x0049             LSLS     R1,R1,#+1
   \       0x28   0x6802             LDR      R2,[R0, #+0]
   \       0x2A   0x6011             STR      R1,[R2, #+0]
    222          
    223              /* Enable wakeup from stop mode */
    224              hi2c->Instance->CR1 |= I2C_CR1_WUPEN;
   \       0x2C   0x6801             LDR      R1,[R0, #+0]
   \       0x2E   0x6809             LDR      R1,[R1, #+0]
   \       0x30   0xF451 0x2180      ORRS     R1,R1,#0x40000
   \       0x34   0x6802             LDR      R2,[R0, #+0]
   \       0x36   0x6011             STR      R1,[R2, #+0]
    225          
    226              __HAL_I2C_ENABLE(hi2c);
   \       0x38   0x6801             LDR      R1,[R0, #+0]
   \       0x3A   0x6809             LDR      R1,[R1, #+0]
   \       0x3C   0xF051 0x0101      ORRS     R1,R1,#0x1
   \       0x40   0x6802             LDR      R2,[R0, #+0]
   \       0x42   0x6011             STR      R1,[R2, #+0]
    227          
    228              hi2c->State = HAL_I2C_STATE_READY;
   \       0x44   0x2120             MOVS     R1,#+32
   \       0x46   0xF880 0x1041      STRB     R1,[R0, #+65]
    229          
    230              /* Process Unlocked */
    231              __HAL_UNLOCK(hi2c);
   \       0x4A   0x2100             MOVS     R1,#+0
   \       0x4C   0xF880 0x1040      STRB     R1,[R0, #+64]
    232          
    233              return HAL_OK;
   \       0x50   0x2000             MOVS     R0,#+0
   \       0x52   0xE000             B.N      ??HAL_I2CEx_EnableWakeUp_2
    234            }
    235            else
    236            {
    237              return HAL_BUSY;
   \                     ??HAL_I2CEx_EnableWakeUp_0: (+1)
   \       0x54   0x2002             MOVS     R0,#+2
   \                     ??HAL_I2CEx_EnableWakeUp_2: (+1)
   \       0x56   0x4770             BX       LR
    238            }
    239          }
    240          
    241          /**
    242            * @brief  Disable I2C wakeup from Stop mode(s).
    243            * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
    244            *                the configuration information for the specified I2Cx peripheral.
    245            * @retval HAL status
    246            */

   \                                 In section .text, align 2, keep-with-next
    247          HAL_StatusTypeDef HAL_I2CEx_DisableWakeUp(I2C_HandleTypeDef *hi2c)
    248          {
    249            /* Check the parameters */
    250            assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(hi2c->Instance));
    251          
    252            if (hi2c->State == HAL_I2C_STATE_READY)
   \                     HAL_I2CEx_DisableWakeUp: (+1)
   \        0x0   0xF890 0x1041      LDRB     R1,[R0, #+65]
   \        0x4   0x2920             CMP      R1,#+32
   \        0x6   0xD125             BNE.N    ??HAL_I2CEx_DisableWakeUp_0
    253            {
    254              /* Process Locked */
    255              __HAL_LOCK(hi2c);
   \        0x8   0xF890 0x1040      LDRB     R1,[R0, #+64]
   \        0xC   0x2901             CMP      R1,#+1
   \        0xE   0xD101             BNE.N    ??HAL_I2CEx_DisableWakeUp_1
   \       0x10   0x2002             MOVS     R0,#+2
   \       0x12   0xE020             B.N      ??HAL_I2CEx_DisableWakeUp_2
   \                     ??HAL_I2CEx_DisableWakeUp_1: (+1)
   \       0x14   0x2101             MOVS     R1,#+1
   \       0x16   0xF880 0x1040      STRB     R1,[R0, #+64]
    256          
    257              hi2c->State = HAL_I2C_STATE_BUSY;
   \       0x1A   0x2124             MOVS     R1,#+36
   \       0x1C   0xF880 0x1041      STRB     R1,[R0, #+65]
    258          
    259              /* Disable the selected I2C peripheral */
    260              __HAL_I2C_DISABLE(hi2c);
   \       0x20   0x6801             LDR      R1,[R0, #+0]
   \       0x22   0x6809             LDR      R1,[R1, #+0]
   \       0x24   0x0849             LSRS     R1,R1,#+1
   \       0x26   0x0049             LSLS     R1,R1,#+1
   \       0x28   0x6802             LDR      R2,[R0, #+0]
   \       0x2A   0x6011             STR      R1,[R2, #+0]
    261          
    262              /* Enable wakeup from stop mode */
    263              hi2c->Instance->CR1 &= ~(I2C_CR1_WUPEN);
   \       0x2C   0x6801             LDR      R1,[R0, #+0]
   \       0x2E   0x6809             LDR      R1,[R1, #+0]
   \       0x30   0xF431 0x2180      BICS     R1,R1,#0x40000
   \       0x34   0x6802             LDR      R2,[R0, #+0]
   \       0x36   0x6011             STR      R1,[R2, #+0]
    264          
    265              __HAL_I2C_ENABLE(hi2c);
   \       0x38   0x6801             LDR      R1,[R0, #+0]
   \       0x3A   0x6809             LDR      R1,[R1, #+0]
   \       0x3C   0xF051 0x0101      ORRS     R1,R1,#0x1
   \       0x40   0x6802             LDR      R2,[R0, #+0]
   \       0x42   0x6011             STR      R1,[R2, #+0]
    266          
    267              hi2c->State = HAL_I2C_STATE_READY;
   \       0x44   0x2120             MOVS     R1,#+32
   \       0x46   0xF880 0x1041      STRB     R1,[R0, #+65]
    268          
    269              /* Process Unlocked */
    270              __HAL_UNLOCK(hi2c);
   \       0x4A   0x2100             MOVS     R1,#+0
   \       0x4C   0xF880 0x1040      STRB     R1,[R0, #+64]
    271          
    272              return HAL_OK;
   \       0x50   0x2000             MOVS     R0,#+0
   \       0x52   0xE000             B.N      ??HAL_I2CEx_DisableWakeUp_2
    273            }
    274            else
    275            {
    276              return HAL_BUSY;
   \                     ??HAL_I2CEx_DisableWakeUp_0: (+1)
   \       0x54   0x2002             MOVS     R0,#+2
   \                     ??HAL_I2CEx_DisableWakeUp_2: (+1)
   \       0x56   0x4770             BX       LR
    277            }
    278          }
    279          /**
    280            * @}
    281            */
    282          
    283          /** @defgroup I2CEx_Exported_Functions_Group3 Fast Mode Plus Functions
    284            * @brief    Fast Mode Plus Functions
    285            *
    286          @verbatim
    287           ===============================================================================
    288                                ##### Fast Mode Plus Functions #####
    289           ===============================================================================
    290              [..] This section provides functions allowing to:
    291                (+) Configure Fast Mode Plus
    292          
    293          @endverbatim
    294            * @{
    295            */
    296          
    297          /**
    298            * @brief Enable the I2C fast mode plus driving capability.
    299            * @param ConfigFastModePlus Selects the pin.
    300            *   This parameter can be one of the @ref I2CEx_FastModePlus values
    301            * @note  For I2C1, fast mode plus driving capability can be enabled on all selected
    302            *        I2C1 pins using I2C_FASTMODEPLUS_I2C1 parameter or independently
    303            *        on each one of the following pins PB6, PB7, PB8 and PB9.
    304            * @note  For remaining I2C1 pins (PA14, PA15...) fast mode plus driving capability
    305            *        can be enabled only by using I2C_FASTMODEPLUS_I2C1 parameter.
    306            * @note  For all I2C2 pins fast mode plus driving capability can be enabled
    307            *        only by using I2C_FASTMODEPLUS_I2C2 parameter.
    308            * @note  For all I2C3 pins fast mode plus driving capability can be enabled
    309            *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
    310            * @note  For all I2C4 pins fast mode plus driving capability can be enabled
    311            *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
    312            * @note  For all I2C5 pins fast mode plus driving capability can be enabled
    313            *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
    314            * @retval None
    315            */

   \                                 In section .text, align 2, keep-with-next
    316          void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
    317          {
   \                     HAL_I2CEx_EnableFastModePlus: (+1)
   \        0x0   0xB081             SUB      SP,SP,#+4
    318            /* Check the parameter */
    319            assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));
    320          
    321            /* Enable SYSCFG clock */
    322            __HAL_RCC_SYSCFG_CLK_ENABLE();
   \        0x2   0x....             LDR.N    R1,??DataTable2
   \        0x4   0x680A             LDR      R2,[R1, #+0]
   \        0x6   0xF052 0x0202      ORRS     R2,R2,#0x2
   \        0xA   0x600A             STR      R2,[R1, #+0]
   \        0xC   0x6809             LDR      R1,[R1, #+0]
   \        0xE   0xF011 0x0102      ANDS     R1,R1,#0x2
   \       0x12   0x9100             STR      R1,[SP, #+0]
   \       0x14   0x9900             LDR      R1,[SP, #+0]
    323          
    324            /* Enable fast mode plus driving capability for selected pin */
    325            SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
   \       0x16   0x....             LDR.N    R1,??DataTable2_1
   \       0x18   0x680A             LDR      R2,[R1, #+0]
   \       0x1A   0x4310             ORRS     R0,R0,R2
   \       0x1C   0x6008             STR      R0,[R1, #+0]
    326          }
   \       0x1E   0xB001             ADD      SP,SP,#+4
   \       0x20   0x4770             BX       LR
    327          
    328          /**
    329            * @brief Disable the I2C fast mode plus driving capability.
    330            * @param ConfigFastModePlus Selects the pin.
    331            *   This parameter can be one of the @ref I2CEx_FastModePlus values
    332            * @note  For I2C1, fast mode plus driving capability can be disabled on all selected
    333            *        I2C1 pins using I2C_FASTMODEPLUS_I2C1 parameter or independently
    334            *        on each one of the following pins PB6, PB7, PB8 and PB9.
    335            * @note  For remaining I2C1 pins (PA14, PA15...) fast mode plus driving capability
    336            *        can be disabled only by using I2C_FASTMODEPLUS_I2C1 parameter.
    337            * @note  For all I2C2 pins fast mode plus driving capability can be disabled
    338            *        only by using I2C_FASTMODEPLUS_I2C2 parameter.
    339            * @note  For all I2C3 pins fast mode plus driving capability can be disabled
    340            *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
    341            * @note  For all I2C4 pins fast mode plus driving capability can be disabled
    342            *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
    343            * @note  For all I2C5 pins fast mode plus driving capability can be disabled
    344            *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
    345            * @retval None
    346            */

   \                                 In section .text, align 2, keep-with-next
    347          void HAL_I2CEx_DisableFastModePlus(uint32_t ConfigFastModePlus)
    348          {
   \                     HAL_I2CEx_DisableFastModePlus: (+1)
   \        0x0   0xB081             SUB      SP,SP,#+4
    349            /* Check the parameter */
    350            assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));
    351          
    352            /* Enable SYSCFG clock */
    353            __HAL_RCC_SYSCFG_CLK_ENABLE();
   \        0x2   0x....             LDR.N    R1,??DataTable2
   \        0x4   0x680A             LDR      R2,[R1, #+0]
   \        0x6   0xF052 0x0202      ORRS     R2,R2,#0x2
   \        0xA   0x600A             STR      R2,[R1, #+0]
   \        0xC   0x6809             LDR      R1,[R1, #+0]
   \        0xE   0xF011 0x0102      ANDS     R1,R1,#0x2
   \       0x12   0x9100             STR      R1,[SP, #+0]
   \       0x14   0x9900             LDR      R1,[SP, #+0]
    354          
    355            /* Disable fast mode plus driving capability for selected pin */
    356            CLEAR_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
   \       0x16   0x....             LDR.N    R1,??DataTable2_1
   \       0x18   0x680A             LDR      R2,[R1, #+0]
   \       0x1A   0xEA32 0x0000      BICS     R0,R2,R0
   \       0x1E   0x6008             STR      R0,[R1, #+0]
    357          }
   \       0x20   0xB001             ADD      SP,SP,#+4
   \       0x22   0x4770             BX       LR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x5802'4554        DC32     0x58024554

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0x5800'0404        DC32     0x58000404
    358          /**
    359            * @}
    360            */
    361          /**
    362            * @}
    363            */
    364          
    365          #endif /* HAL_I2C_MODULE_ENABLED */
    366          /**
    367            * @}
    368            */
    369          
    370          /**
    371            * @}
    372            */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   HAL_I2CEx_ConfigAnalogFilter
       0   HAL_I2CEx_ConfigDigitalFilter
       4   HAL_I2CEx_DisableFastModePlus
       0   HAL_I2CEx_DisableWakeUp
       4   HAL_I2CEx_EnableFastModePlus
       0   HAL_I2CEx_EnableWakeUp


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
      98  HAL_I2CEx_ConfigAnalogFilter
      92  HAL_I2CEx_ConfigDigitalFilter
      36  HAL_I2CEx_DisableFastModePlus
      88  HAL_I2CEx_DisableWakeUp
      34  HAL_I2CEx_EnableFastModePlus
      88  HAL_I2CEx_EnableWakeUp

 
 444 bytes in section .text
 
 444 bytes of CODE memory

Errors: none
Warnings: none
