###############################################################################
#
# IAR ANSI C/C++ Compiler V9.20.1.318/W64 for ARM         09/Feb/2022  10:51:14
# Copyright 1999-2021 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\Drivers\STM32H7xx_HAL_Driver\Src\stm32h7xx_hal_dma_ex.c
#        [UTF-8]
#    Command line      =
#        -f
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Drivers\STM32H7xx_HAL_Driver\stm32h7xx_hal_dma_ex.o.rsp
#        (D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\Drivers\STM32H7xx_HAL_Driver\Src\stm32h7xx_hal_dma_ex.c
#        -D USE_HAL_DRIVER -D STM32H7B3xxQ -D USE_BPP=24 -lC
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\Drivers\STM32H7xx_HAL_Driver
#        -lA
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\Drivers\STM32H7xx_HAL_Driver
#        -o
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Drivers\STM32H7xx_HAL_Driver
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.0\arm\inc\c\DLib_Config_Full.h" -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Core/Inc\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/App\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/target/generated\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/target\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/STM32H7xx_HAL_Driver/Inc\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/STM32H7xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM4F\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/CMSIS/Device/ST/STM32H7xx/Include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/BSP/Components/Common\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/BSP/STM32H7B3I-DK\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Middlewares/ST/touchgfx/framework/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/fonts/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/gui_generated/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/images/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/texts/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/gui/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/videos/include\
#        -Ol --source_encoding utf8 --text_out utf8 --utf8_text_in)
#        --dependencies=n
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Drivers\STM32H7xx_HAL_Driver\stm32h7xx_hal_dma_ex.o.d
#    Locale            =  C
#    List file         =
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\Drivers\STM32H7xx_HAL_Driver\stm32h7xx_hal_dma_ex.lst
#    Object file       =
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Drivers\STM32H7xx_HAL_Driver\stm32h7xx_hal_dma_ex.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\Drivers\STM32H7xx_HAL_Driver\Src\stm32h7xx_hal_dma_ex.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32h7xx_hal_dma_ex.c
      4            * @author  MCD Application Team
      5            * @brief   DMA Extension HAL module driver
      6            *          This file provides firmware functions to manage the following
      7            *          functionalities of the DMA Extension peripheral:
      8            *           + Extended features functions
      9            *
     10            @verbatim
     11            ==============================================================================
     12                                  ##### How to use this driver #####
     13            ==============================================================================
     14            [..]
     15            The DMA Extension HAL driver can be used as follows:
     16             (+) Start a multi buffer transfer using the HAL_DMA_MultiBufferStart() function
     17                 for polling mode or HAL_DMA_MultiBufferStart_IT() for interrupt mode.
     18          
     19             (+) Configure the DMA_MUX Synchronization Block using HAL_DMAEx_ConfigMuxSync function.
     20             (+) Configure the DMA_MUX Request Generator Block using HAL_DMAEx_ConfigMuxRequestGenerator function.
     21                 Functions HAL_DMAEx_EnableMuxRequestGenerator and HAL_DMAEx_DisableMuxRequestGenerator can then be used
     22                 to respectively enable/disable the request generator.
     23          
     24             (+) To handle the DMAMUX Interrupts, the function  HAL_DMAEx_MUX_IRQHandler should be called from
     25                 the DMAMUX IRQ handler i.e DMAMUX1_OVR_IRQHandler or DMAMUX2_OVR_IRQHandler .
     26                 As only one interrupt line is available for all DMAMUX channels and request generators , HAL_DMA_MUX_IRQHandler should be
     27                 called with, as parameter, the appropriate DMA handle as many as used DMAs in the user project
     28                (exception done if a given DMA is not using the DMAMUX SYNC block neither a request generator)
     29          
     30               -@-  In Memory-to-Memory transfer mode, Multi (Double) Buffer mode is not allowed.
     31               -@-  When Multi (Double) Buffer mode is enabled, the transfer is circular by default.
     32               -@-  In Multi (Double) buffer mode, it is possible to update the base address for
     33                    the AHB memory port on the fly (DMA_SxM0AR or DMA_SxM1AR) when the stream is enabled.
     34               -@-  Multi (Double) buffer mode is possible with DMA and BDMA instances.
     35          
     36            @endverbatim
     37            ******************************************************************************
     38            * @attention
     39            *
     40            * Copyright (c) 2017 STMicroelectronics.
     41            * All rights reserved.
     42            *
     43            * This software is licensed under terms that can be found in the LICENSE file
     44            * in the root directory of this software component.
     45            * If no LICENSE file comes with this software, it is provided AS-IS.
     46            *
     47            ******************************************************************************
     48            */
     49          
     50          /* Includes ------------------------------------------------------------------*/
     51          #include "stm32h7xx_hal.h"
     52          
     53          /** @addtogroup STM32H7xx_HAL_Driver
     54            * @{
     55            */
     56          
     57          /** @defgroup DMAEx DMAEx
     58            * @brief DMA Extended HAL module driver
     59            * @{
     60            */
     61          
     62          #ifdef HAL_DMA_MODULE_ENABLED
     63          
     64          /* Private types -------------------------------------------------------------*/
     65          /* Private variables ---------------------------------------------------------*/
     66          /* Private Constants ---------------------------------------------------------*/
     67          /* Private macros ------------------------------------------------------------*/
     68          /* Private functions ---------------------------------------------------------*/
     69          /** @addtogroup DMAEx_Private_Functions
     70            * @{
     71            */
     72          
     73          static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength);
     74          
     75          /**
     76            * @}
     77            */
     78          
     79          /* Exported functions ---------------------------------------------------------*/
     80          
     81          /** @addtogroup DMAEx_Exported_Functions
     82            * @{
     83            */
     84          
     85          
     86          /** @addtogroup DMAEx_Exported_Functions_Group1
     87            *
     88          @verbatim
     89           ===============================================================================
     90                          #####  Extended features functions  #####
     91           ===============================================================================
     92              [..]  This section provides functions allowing to:
     93                (+) Configure the source, destination address and data length and
     94                    Start MultiBuffer DMA transfer
     95                (+) Configure the source, destination address and data length and
     96                    Start MultiBuffer DMA transfer with interrupt
     97                (+) Change on the fly the memory0 or memory1 address.
     98                (+) Configure the DMA_MUX Synchronization Block using HAL_DMAEx_ConfigMuxSync function.
     99                (+) Configure the DMA_MUX Request Generator Block using HAL_DMAEx_ConfigMuxRequestGenerator function.
    100                (+) Functions HAL_DMAEx_EnableMuxRequestGenerator and HAL_DMAEx_DisableMuxRequestGenerator can then be used
    101                    to respectively enable/disable the request generator.
    102                (+) Handle DMAMUX interrupts using HAL_DMAEx_MUX_IRQHandler : should be called from
    103                    the DMAMUX IRQ handler i.e DMAMUX1_OVR_IRQHandler or DMAMUX2_OVR_IRQHandler
    104          
    105          @endverbatim
    106            * @{
    107            */
    108          
    109          
    110          /**
    111            * @brief  Starts the multi_buffer DMA Transfer.
    112            * @param  hdma      : pointer to a DMA_HandleTypeDef structure that contains
    113            *                     the configuration information for the specified DMA Stream.
    114            * @param  SrcAddress: The source memory Buffer address
    115            * @param  DstAddress: The destination memory Buffer address
    116            * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
    117            * @param  DataLength: The length of data to be transferred from source to destination
    118            * @retval HAL status
    119            */

   \                                 In section .text, align 2, keep-with-next
    120          HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
    121          {
   \                     HAL_DMAEx_MultiBufferStart: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
    122            HAL_StatusTypeDef status = HAL_OK;
   \        0x4   0x2500             MOVS     R5,#+0
    123            __IO uint32_t *ifcRegister_Base; /* DMA Stream Interrupt Clear register */
    124          
    125            /* Check the parameters */
    126            assert_param(IS_DMA_BUFFER_SIZE(DataLength));
    127            assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
    128          
    129            /* Memory-to-memory transfer not supported in double buffering mode */
    130            if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
   \        0x6   0x68A0             LDR      R0,[R4, #+8]
   \        0x8   0x2880             CMP      R0,#+128
   \        0xA   0xD104             BNE.N    ??HAL_DMAEx_MultiBufferStart_0
    131            {
    132              hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
   \        0xC   0xF44F 0x7080      MOV      R0,#+256
   \       0x10   0x6560             STR      R0,[R4, #+84]
    133              status = HAL_ERROR;
   \       0x12   0x2501             MOVS     R5,#+1
   \       0x14   0xE176             B.N      ??HAL_DMAEx_MultiBufferStart_1
    134            }
    135            else
    136            {
    137              /* Process Locked */
    138              __HAL_LOCK(hdma);
   \                     ??HAL_DMAEx_MultiBufferStart_0: (+1)
   \       0x16   0xF894 0x0034      LDRB     R0,[R4, #+52]
   \       0x1A   0x2801             CMP      R0,#+1
   \       0x1C   0xD101             BNE.N    ??HAL_DMAEx_MultiBufferStart_2
   \       0x1E   0x2002             MOVS     R0,#+2
   \       0x20   0xE172             B.N      ??HAL_DMAEx_MultiBufferStart_3
   \                     ??HAL_DMAEx_MultiBufferStart_2: (+1)
   \       0x22   0x2001             MOVS     R0,#+1
   \       0x24   0xF884 0x0034      STRB     R0,[R4, #+52]
    139          
    140              if(HAL_DMA_STATE_READY == hdma->State)
   \       0x28   0xF894 0x0035      LDRB     R0,[R4, #+53]
   \       0x2C   0x2801             CMP      R0,#+1
   \       0x2E   0xF040 0x8165      BNE.W    ??HAL_DMAEx_MultiBufferStart_4
    141              {
    142                /* Change DMA peripheral state */
    143                hdma->State = HAL_DMA_STATE_BUSY;
   \       0x32   0x2002             MOVS     R0,#+2
   \       0x34   0xF884 0x0035      STRB     R0,[R4, #+53]
    144          
    145                /* Initialize the error code */
    146                hdma->ErrorCode = HAL_DMA_ERROR_NONE;
   \       0x38   0x2000             MOVS     R0,#+0
   \       0x3A   0x6560             STR      R0,[R4, #+84]
    147          
    148                if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
   \       0x3C   0x.... 0x....      LDR.W    R6,??DataTable2
   \       0x40   0x6820             LDR      R0,[R4, #+0]
   \       0x42   0x42B0             CMP      R0,R6
   \       0x44   0xD04A             BEQ.N    ??HAL_DMAEx_MultiBufferStart_5
   \       0x46   0x6820             LDR      R0,[R4, #+0]
   \       0x48   0x.... 0x....      LDR.W    R7,??DataTable2_1
   \       0x4C   0x42B8             CMP      R0,R7
   \       0x4E   0xD045             BEQ.N    ??HAL_DMAEx_MultiBufferStart_5
   \       0x50   0x6820             LDR      R0,[R4, #+0]
   \       0x52   0x.... 0x....      LDR.W    R7,??DataTable2_2
   \       0x56   0x42B8             CMP      R0,R7
   \       0x58   0xD040             BEQ.N    ??HAL_DMAEx_MultiBufferStart_5
   \       0x5A   0x6820             LDR      R0,[R4, #+0]
   \       0x5C   0x.... 0x....      LDR.W    R7,??DataTable2_3
   \       0x60   0x42B8             CMP      R0,R7
   \       0x62   0xD03B             BEQ.N    ??HAL_DMAEx_MultiBufferStart_5
   \       0x64   0x6820             LDR      R0,[R4, #+0]
   \       0x66   0x.... 0x....      LDR.W    R7,??DataTable2_4
   \       0x6A   0x42B8             CMP      R0,R7
   \       0x6C   0xD036             BEQ.N    ??HAL_DMAEx_MultiBufferStart_5
   \       0x6E   0x6820             LDR      R0,[R4, #+0]
   \       0x70   0x.... 0x....      LDR.W    R7,??DataTable2_5
   \       0x74   0x42B8             CMP      R0,R7
   \       0x76   0xD031             BEQ.N    ??HAL_DMAEx_MultiBufferStart_5
   \       0x78   0x6820             LDR      R0,[R4, #+0]
   \       0x7A   0x.... 0x....      LDR.W    R7,??DataTable2_6
   \       0x7E   0x42B8             CMP      R0,R7
   \       0x80   0xD02C             BEQ.N    ??HAL_DMAEx_MultiBufferStart_5
   \       0x82   0x6820             LDR      R0,[R4, #+0]
   \       0x84   0x.... 0x....      LDR.W    R7,??DataTable2_7
   \       0x88   0x42B8             CMP      R0,R7
   \       0x8A   0xD027             BEQ.N    ??HAL_DMAEx_MultiBufferStart_5
   \       0x8C   0x6820             LDR      R0,[R4, #+0]
   \       0x8E   0x.... 0x....      LDR.W    R7,??DataTable3
   \       0x92   0x42B8             CMP      R0,R7
   \       0x94   0xD022             BEQ.N    ??HAL_DMAEx_MultiBufferStart_5
   \       0x96   0x6820             LDR      R0,[R4, #+0]
   \       0x98   0x.... 0x....      LDR.W    R7,??DataTable3_1
   \       0x9C   0x42B8             CMP      R0,R7
   \       0x9E   0xD01D             BEQ.N    ??HAL_DMAEx_MultiBufferStart_5
   \       0xA0   0x6820             LDR      R0,[R4, #+0]
   \       0xA2   0x.... 0x....      LDR.W    R7,??DataTable3_2
   \       0xA6   0x42B8             CMP      R0,R7
   \       0xA8   0xD018             BEQ.N    ??HAL_DMAEx_MultiBufferStart_5
   \       0xAA   0x6820             LDR      R0,[R4, #+0]
   \       0xAC   0x.... 0x....      LDR.W    R7,??DataTable3_3
   \       0xB0   0x42B8             CMP      R0,R7
   \       0xB2   0xD013             BEQ.N    ??HAL_DMAEx_MultiBufferStart_5
   \       0xB4   0x6820             LDR      R0,[R4, #+0]
   \       0xB6   0x.... 0x....      LDR.W    R7,??DataTable3_4
   \       0xBA   0x42B8             CMP      R0,R7
   \       0xBC   0xD00E             BEQ.N    ??HAL_DMAEx_MultiBufferStart_5
   \       0xBE   0x6820             LDR      R0,[R4, #+0]
   \       0xC0   0x.... 0x....      LDR.W    R7,??DataTable3_5
   \       0xC4   0x42B8             CMP      R0,R7
   \       0xC6   0xD009             BEQ.N    ??HAL_DMAEx_MultiBufferStart_5
   \       0xC8   0x6820             LDR      R0,[R4, #+0]
   \       0xCA   0x.... 0x....      LDR.W    R7,??DataTable3_6
   \       0xCE   0x42B8             CMP      R0,R7
   \       0xD0   0xD004             BEQ.N    ??HAL_DMAEx_MultiBufferStart_5
   \       0xD2   0x6820             LDR      R0,[R4, #+0]
   \       0xD4   0x.... 0x....      LDR.W    R7,??DataTable4
   \       0xD8   0x42B8             CMP      R0,R7
   \       0xDA   0xD101             BNE.N    ??HAL_DMAEx_MultiBufferStart_6
   \                     ??HAL_DMAEx_MultiBufferStart_5: (+1)
   \       0xDC   0x2001             MOVS     R0,#+1
   \       0xDE   0xE000             B.N      ??HAL_DMAEx_MultiBufferStart_7
   \                     ??HAL_DMAEx_MultiBufferStart_6: (+1)
   \       0xE0   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMAEx_MultiBufferStart_7: (+1)
   \       0xE2   0xB2C0             UXTB     R0,R0
   \       0xE4   0x2800             CMP      R0,#+0
   \       0xE6   0xD011             BEQ.N    ??HAL_DMAEx_MultiBufferStart_8
    149                {
    150                  /* Enable the Double buffer mode */
    151                  ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
   \       0xE8   0x6820             LDR      R0,[R4, #+0]
   \       0xEA   0x6800             LDR      R0,[R0, #+0]
   \       0xEC   0xF450 0x2080      ORRS     R0,R0,#0x40000
   \       0xF0   0x6827             LDR      R7,[R4, #+0]
   \       0xF2   0x6038             STR      R0,[R7, #+0]
    152          
    153                  /* Configure DMA Stream destination address */
    154                  ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
   \       0xF4   0x6820             LDR      R0,[R4, #+0]
   \       0xF6   0x6103             STR      R3,[R0, #+16]
    155          
    156                  /* Calculate the interrupt clear flag register (IFCR) base address  */
    157                  ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
   \       0xF8   0x6DA0             LDR      R0,[R4, #+88]
   \       0xFA   0x3008             ADDS     R0,R0,#+8
    158          
    159                  /* Clear all flags */
    160                  *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
   \       0xFC   0x233F             MOVS     R3,#+63
   \       0xFE   0xF894 0x705C      LDRB     R7,[R4, #+92]
   \      0x102   0xF017 0x071F      ANDS     R7,R7,#0x1F
   \      0x106   0x40BB             LSLS     R3,R3,R7
   \      0x108   0x6003             STR      R3,[R0, #+0]
   \      0x10A   0xE012             B.N      ??HAL_DMAEx_MultiBufferStart_9
    161                }
    162                else /* BDMA instance(s) */
    163                {
    164                  /* Enable the Double buffer mode */
    165                  ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
   \                     ??HAL_DMAEx_MultiBufferStart_8: (+1)
   \      0x10C   0x6820             LDR      R0,[R4, #+0]
   \      0x10E   0x6800             LDR      R0,[R0, #+0]
   \      0x110   0xF440 0x4000      ORR      R0,R0,#0x8000
   \      0x114   0xF050 0x0020      ORRS     R0,R0,#0x20
   \      0x118   0x6827             LDR      R7,[R4, #+0]
   \      0x11A   0x6038             STR      R0,[R7, #+0]
    166          
    167                  /* Configure DMA Stream destination address */
    168                  ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
   \      0x11C   0x6820             LDR      R0,[R4, #+0]
   \      0x11E   0x6103             STR      R3,[R0, #+16]
    169          
    170                  /* Calculate the interrupt clear flag register (IFCR) base address  */
    171                  ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
   \      0x120   0x6DA0             LDR      R0,[R4, #+88]
   \      0x122   0x1D00             ADDS     R0,R0,#+4
    172          
    173                  /* Clear all flags */
    174                  *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
   \      0x124   0x2301             MOVS     R3,#+1
   \      0x126   0xF894 0x705C      LDRB     R7,[R4, #+92]
   \      0x12A   0xF017 0x071F      ANDS     R7,R7,#0x1F
   \      0x12E   0x40BB             LSLS     R3,R3,R7
   \      0x130   0x6003             STR      R3,[R0, #+0]
    175                }
    176          
    177                if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
   \                     ??HAL_DMAEx_MultiBufferStart_9: (+1)
   \      0x132   0x6820             LDR      R0,[R4, #+0]
   \      0x134   0x42B0             CMP      R0,R6
   \      0x136   0xD072             BEQ.N    ??HAL_DMAEx_MultiBufferStart_10
   \      0x138   0x6820             LDR      R0,[R4, #+0]
   \      0x13A   0x.... 0x....      LDR.W    R3,??DataTable2_1
   \      0x13E   0x4298             CMP      R0,R3
   \      0x140   0xD06D             BEQ.N    ??HAL_DMAEx_MultiBufferStart_10
   \      0x142   0x6820             LDR      R0,[R4, #+0]
   \      0x144   0x.... 0x....      LDR.W    R3,??DataTable2_2
   \      0x148   0x4298             CMP      R0,R3
   \      0x14A   0xD068             BEQ.N    ??HAL_DMAEx_MultiBufferStart_10
   \      0x14C   0x6820             LDR      R0,[R4, #+0]
   \      0x14E   0x.... 0x....      LDR.W    R3,??DataTable2_3
   \      0x152   0x4298             CMP      R0,R3
   \      0x154   0xD063             BEQ.N    ??HAL_DMAEx_MultiBufferStart_10
   \      0x156   0x6820             LDR      R0,[R4, #+0]
   \      0x158   0x.... 0x....      LDR.W    R3,??DataTable2_4
   \      0x15C   0x4298             CMP      R0,R3
   \      0x15E   0xD05E             BEQ.N    ??HAL_DMAEx_MultiBufferStart_10
   \      0x160   0x6820             LDR      R0,[R4, #+0]
   \      0x162   0x.... 0x....      LDR.W    R3,??DataTable2_5
   \      0x166   0x4298             CMP      R0,R3
   \      0x168   0xD059             BEQ.N    ??HAL_DMAEx_MultiBufferStart_10
   \      0x16A   0x6820             LDR      R0,[R4, #+0]
   \      0x16C   0x.... 0x....      LDR.W    R3,??DataTable2_6
   \      0x170   0x4298             CMP      R0,R3
   \      0x172   0xD054             BEQ.N    ??HAL_DMAEx_MultiBufferStart_10
   \      0x174   0x6820             LDR      R0,[R4, #+0]
   \      0x176   0x.... 0x....      LDR.W    R3,??DataTable2_7
   \      0x17A   0x4298             CMP      R0,R3
   \      0x17C   0xD04F             BEQ.N    ??HAL_DMAEx_MultiBufferStart_10
   \      0x17E   0x6820             LDR      R0,[R4, #+0]
   \      0x180   0x.... 0x....      LDR.W    R3,??DataTable3
   \      0x184   0x4298             CMP      R0,R3
   \      0x186   0xD04A             BEQ.N    ??HAL_DMAEx_MultiBufferStart_10
   \      0x188   0x6820             LDR      R0,[R4, #+0]
   \      0x18A   0x.... 0x....      LDR.W    R3,??DataTable3_1
   \      0x18E   0x4298             CMP      R0,R3
   \      0x190   0xD045             BEQ.N    ??HAL_DMAEx_MultiBufferStart_10
   \      0x192   0x6820             LDR      R0,[R4, #+0]
   \      0x194   0x.... 0x....      LDR.W    R3,??DataTable3_2
   \      0x198   0x4298             CMP      R0,R3
   \      0x19A   0xD040             BEQ.N    ??HAL_DMAEx_MultiBufferStart_10
   \      0x19C   0x6820             LDR      R0,[R4, #+0]
   \      0x19E   0x.... 0x....      LDR.W    R3,??DataTable3_3
   \      0x1A2   0x4298             CMP      R0,R3
   \      0x1A4   0xD03B             BEQ.N    ??HAL_DMAEx_MultiBufferStart_10
   \      0x1A6   0x6820             LDR      R0,[R4, #+0]
   \      0x1A8   0x.... 0x....      LDR.W    R3,??DataTable3_4
   \      0x1AC   0x4298             CMP      R0,R3
   \      0x1AE   0xD036             BEQ.N    ??HAL_DMAEx_MultiBufferStart_10
   \      0x1B0   0x6820             LDR      R0,[R4, #+0]
   \      0x1B2   0x.... 0x....      LDR.W    R3,??DataTable3_5
   \      0x1B6   0x4298             CMP      R0,R3
   \      0x1B8   0xD031             BEQ.N    ??HAL_DMAEx_MultiBufferStart_10
   \      0x1BA   0x6820             LDR      R0,[R4, #+0]
   \      0x1BC   0x.... 0x....      LDR.W    R3,??DataTable3_6
   \      0x1C0   0x4298             CMP      R0,R3
   \      0x1C2   0xD02C             BEQ.N    ??HAL_DMAEx_MultiBufferStart_10
   \      0x1C4   0x6820             LDR      R0,[R4, #+0]
   \      0x1C6   0x.... 0x....      LDR.W    R3,??DataTable4
   \      0x1CA   0x4298             CMP      R0,R3
   \      0x1CC   0xD027             BEQ.N    ??HAL_DMAEx_MultiBufferStart_10
   \      0x1CE   0x6820             LDR      R0,[R4, #+0]
   \      0x1D0   0x.... 0x....      LDR.W    R3,??DataTable3_7
   \      0x1D4   0x4298             CMP      R0,R3
   \      0x1D6   0xD022             BEQ.N    ??HAL_DMAEx_MultiBufferStart_10
   \      0x1D8   0x6820             LDR      R0,[R4, #+0]
   \      0x1DA   0x.... 0x....      LDR.W    R3,??DataTable3_8
   \      0x1DE   0x4298             CMP      R0,R3
   \      0x1E0   0xD01D             BEQ.N    ??HAL_DMAEx_MultiBufferStart_10
   \      0x1E2   0x6820             LDR      R0,[R4, #+0]
   \      0x1E4   0x.... 0x....      LDR.W    R3,??DataTable3_9
   \      0x1E8   0x4298             CMP      R0,R3
   \      0x1EA   0xD018             BEQ.N    ??HAL_DMAEx_MultiBufferStart_10
   \      0x1EC   0x6820             LDR      R0,[R4, #+0]
   \      0x1EE   0x.... 0x....      LDR.W    R3,??DataTable3_10
   \      0x1F2   0x4298             CMP      R0,R3
   \      0x1F4   0xD013             BEQ.N    ??HAL_DMAEx_MultiBufferStart_10
   \      0x1F6   0x6820             LDR      R0,[R4, #+0]
   \      0x1F8   0x.... 0x....      LDR.W    R3,??DataTable3_11
   \      0x1FC   0x4298             CMP      R0,R3
   \      0x1FE   0xD00E             BEQ.N    ??HAL_DMAEx_MultiBufferStart_10
   \      0x200   0x6820             LDR      R0,[R4, #+0]
   \      0x202   0x.... 0x....      LDR.W    R3,??DataTable3_12
   \      0x206   0x4298             CMP      R0,R3
   \      0x208   0xD009             BEQ.N    ??HAL_DMAEx_MultiBufferStart_10
   \      0x20A   0x6820             LDR      R0,[R4, #+0]
   \      0x20C   0x.... 0x....      LDR.W    R3,??DataTable3_13
   \      0x210   0x4298             CMP      R0,R3
   \      0x212   0xD004             BEQ.N    ??HAL_DMAEx_MultiBufferStart_10
   \      0x214   0x6820             LDR      R0,[R4, #+0]
   \      0x216   0x.... 0x....      LDR.W    R3,??DataTable3_14
   \      0x21A   0x4298             CMP      R0,R3
   \      0x21C   0xD101             BNE.N    ??HAL_DMAEx_MultiBufferStart_11
   \                     ??HAL_DMAEx_MultiBufferStart_10: (+1)
   \      0x21E   0x2001             MOVS     R0,#+1
   \      0x220   0xE000             B.N      ??HAL_DMAEx_MultiBufferStart_12
   \                     ??HAL_DMAEx_MultiBufferStart_11: (+1)
   \      0x222   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMAEx_MultiBufferStart_12: (+1)
   \      0x224   0xB2C0             UXTB     R0,R0
   \      0x226   0x2800             CMP      R0,#+0
   \      0x228   0xD00C             BEQ.N    ??HAL_DMAEx_MultiBufferStart_13
   \      0x22A   0x9B06             LDR      R3,[SP, #+24]
    178                {
    179                  /* Configure the source, destination address and the data length */
    180                  DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
   \      0x22C   0x0020             MOVS     R0,R4
   \      0x22E   0x.... 0x....      BL       DMA_MultiBufferSetConfig
    181          
    182                  /* Clear the DMAMUX synchro overrun flag */
    183                  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
   \      0x232   0x6EA0             LDR      R0,[R4, #+104]
   \      0x234   0x6E61             LDR      R1,[R4, #+100]
   \      0x236   0x6048             STR      R0,[R1, #+4]
    184          
    185                  if(hdma->DMAmuxRequestGen != 0U)
   \      0x238   0x6EE0             LDR      R0,[R4, #+108]
   \      0x23A   0x2800             CMP      R0,#+0
   \      0x23C   0xD002             BEQ.N    ??HAL_DMAEx_MultiBufferStart_13
    186                  {
    187                    /* Clear the DMAMUX request generator overrun flag */
    188                    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
   \      0x23E   0x6F60             LDR      R0,[R4, #+116]
   \      0x240   0x6F21             LDR      R1,[R4, #+112]
   \      0x242   0x6048             STR      R0,[R1, #+4]
    189                  }
    190                }
    191          
    192                /* Enable the peripheral */
    193                __HAL_DMA_ENABLE(hdma);
   \                     ??HAL_DMAEx_MultiBufferStart_13: (+1)
   \      0x244   0x6820             LDR      R0,[R4, #+0]
   \      0x246   0x42B0             CMP      R0,R6
   \      0x248   0xD04A             BEQ.N    ??HAL_DMAEx_MultiBufferStart_14
   \      0x24A   0x6820             LDR      R0,[R4, #+0]
   \      0x24C   0x.... 0x....      LDR.W    R1,??DataTable2_1
   \      0x250   0x4288             CMP      R0,R1
   \      0x252   0xD045             BEQ.N    ??HAL_DMAEx_MultiBufferStart_14
   \      0x254   0x6820             LDR      R0,[R4, #+0]
   \      0x256   0x.... 0x....      LDR.W    R1,??DataTable2_2
   \      0x25A   0x4288             CMP      R0,R1
   \      0x25C   0xD040             BEQ.N    ??HAL_DMAEx_MultiBufferStart_14
   \      0x25E   0x6820             LDR      R0,[R4, #+0]
   \      0x260   0x.... 0x....      LDR.W    R1,??DataTable2_3
   \      0x264   0x4288             CMP      R0,R1
   \      0x266   0xD03B             BEQ.N    ??HAL_DMAEx_MultiBufferStart_14
   \      0x268   0x6820             LDR      R0,[R4, #+0]
   \      0x26A   0x.... 0x....      LDR.W    R1,??DataTable2_4
   \      0x26E   0x4288             CMP      R0,R1
   \      0x270   0xD036             BEQ.N    ??HAL_DMAEx_MultiBufferStart_14
   \      0x272   0x6820             LDR      R0,[R4, #+0]
   \      0x274   0x.... 0x....      LDR.W    R1,??DataTable2_5
   \      0x278   0x4288             CMP      R0,R1
   \      0x27A   0xD031             BEQ.N    ??HAL_DMAEx_MultiBufferStart_14
   \      0x27C   0x6820             LDR      R0,[R4, #+0]
   \      0x27E   0x.... 0x....      LDR.W    R1,??DataTable2_6
   \      0x282   0x4288             CMP      R0,R1
   \      0x284   0xD02C             BEQ.N    ??HAL_DMAEx_MultiBufferStart_14
   \      0x286   0x6820             LDR      R0,[R4, #+0]
   \      0x288   0x.... 0x....      LDR.W    R1,??DataTable2_7
   \      0x28C   0x4288             CMP      R0,R1
   \      0x28E   0xD027             BEQ.N    ??HAL_DMAEx_MultiBufferStart_14
   \      0x290   0x6820             LDR      R0,[R4, #+0]
   \      0x292   0x.... 0x....      LDR.W    R1,??DataTable3
   \      0x296   0x4288             CMP      R0,R1
   \      0x298   0xD022             BEQ.N    ??HAL_DMAEx_MultiBufferStart_14
   \      0x29A   0x6820             LDR      R0,[R4, #+0]
   \      0x29C   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \      0x2A0   0x4288             CMP      R0,R1
   \      0x2A2   0xD01D             BEQ.N    ??HAL_DMAEx_MultiBufferStart_14
   \      0x2A4   0x6820             LDR      R0,[R4, #+0]
   \      0x2A6   0x.... 0x....      LDR.W    R1,??DataTable3_2
   \      0x2AA   0x4288             CMP      R0,R1
   \      0x2AC   0xD018             BEQ.N    ??HAL_DMAEx_MultiBufferStart_14
   \      0x2AE   0x6820             LDR      R0,[R4, #+0]
   \      0x2B0   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \      0x2B4   0x4288             CMP      R0,R1
   \      0x2B6   0xD013             BEQ.N    ??HAL_DMAEx_MultiBufferStart_14
   \      0x2B8   0x6820             LDR      R0,[R4, #+0]
   \      0x2BA   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \      0x2BE   0x4288             CMP      R0,R1
   \      0x2C0   0xD00E             BEQ.N    ??HAL_DMAEx_MultiBufferStart_14
   \      0x2C2   0x6820             LDR      R0,[R4, #+0]
   \      0x2C4   0x.... 0x....      LDR.W    R1,??DataTable3_5
   \      0x2C8   0x4288             CMP      R0,R1
   \      0x2CA   0xD009             BEQ.N    ??HAL_DMAEx_MultiBufferStart_14
   \      0x2CC   0x6820             LDR      R0,[R4, #+0]
   \      0x2CE   0x.... 0x....      LDR.W    R1,??DataTable3_6
   \      0x2D2   0x4288             CMP      R0,R1
   \      0x2D4   0xD004             BEQ.N    ??HAL_DMAEx_MultiBufferStart_14
   \      0x2D6   0x6820             LDR      R0,[R4, #+0]
   \      0x2D8   0x.... 0x....      LDR.W    R1,??DataTable4
   \      0x2DC   0x4288             CMP      R0,R1
   \      0x2DE   0xD106             BNE.N    ??HAL_DMAEx_MultiBufferStart_15
   \                     ??HAL_DMAEx_MultiBufferStart_14: (+1)
   \      0x2E0   0x6820             LDR      R0,[R4, #+0]
   \      0x2E2   0x6800             LDR      R0,[R0, #+0]
   \      0x2E4   0xF050 0x0001      ORRS     R0,R0,#0x1
   \      0x2E8   0x6821             LDR      R1,[R4, #+0]
   \      0x2EA   0x6008             STR      R0,[R1, #+0]
   \      0x2EC   0xE00A             B.N      ??HAL_DMAEx_MultiBufferStart_1
   \                     ??HAL_DMAEx_MultiBufferStart_15: (+1)
   \      0x2EE   0x6820             LDR      R0,[R4, #+0]
   \      0x2F0   0x6800             LDR      R0,[R0, #+0]
   \      0x2F2   0xF050 0x0001      ORRS     R0,R0,#0x1
   \      0x2F6   0x6821             LDR      R1,[R4, #+0]
   \      0x2F8   0x6008             STR      R0,[R1, #+0]
   \      0x2FA   0xE003             B.N      ??HAL_DMAEx_MultiBufferStart_1
    194              }
    195              else
    196              {
    197                /* Set the error code to busy */
    198                hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
   \                     ??HAL_DMAEx_MultiBufferStart_4: (+1)
   \      0x2FC   0xF44F 0x6000      MOV      R0,#+2048
   \      0x300   0x6560             STR      R0,[R4, #+84]
    199          
    200                /* Return error status */
    201                status = HAL_ERROR;
   \      0x302   0x2501             MOVS     R5,#+1
    202              }
    203            }
    204            return status;
   \                     ??HAL_DMAEx_MultiBufferStart_1: (+1)
   \      0x304   0x0028             MOVS     R0,R5
   \      0x306   0xB2C0             UXTB     R0,R0
   \                     ??HAL_DMAEx_MultiBufferStart_3: (+1)
   \      0x308   0xBDF2             POP      {R1,R4-R7,PC}
    205          }
    206          
    207          /**
    208            * @brief  Starts the multi_buffer DMA Transfer with interrupt enabled.
    209            * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
    210            *                     the configuration information for the specified DMA Stream.
    211            * @param  SrcAddress: The source memory Buffer address
    212            * @param  DstAddress: The destination memory Buffer address
    213            * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
    214            * @param  DataLength: The length of data to be transferred from source to destination
    215            * @retval HAL status
    216            */

   \                                 In section .text, align 2, keep-with-next
    217          HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
    218          {
   \                     HAL_DMAEx_MultiBufferStart_IT: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
    219            HAL_StatusTypeDef status = HAL_OK;
   \        0x4   0x2500             MOVS     R5,#+0
    220            __IO uint32_t *ifcRegister_Base; /* DMA Stream Interrupt Clear register */
    221          
    222            /* Check the parameters */
    223            assert_param(IS_DMA_BUFFER_SIZE(DataLength));
    224            assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
    225          
    226            /* Memory-to-memory transfer not supported in double buffering mode */
    227            if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
   \        0x6   0x68A0             LDR      R0,[R4, #+8]
   \        0x8   0x2880             CMP      R0,#+128
   \        0xA   0xD104             BNE.N    ??HAL_DMAEx_MultiBufferStart_IT_0
    228            {
    229              hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
   \        0xC   0xF44F 0x7080      MOV      R0,#+256
   \       0x10   0x6560             STR      R0,[R4, #+84]
    230              return HAL_ERROR;
   \       0x12   0x2001             MOVS     R0,#+1
   \       0x14   0xE275             B.N      ??HAL_DMAEx_MultiBufferStart_IT_1
    231            }
    232          
    233            /* Process locked */
    234            __HAL_LOCK(hdma);
   \                     ??HAL_DMAEx_MultiBufferStart_IT_0: (+1)
   \       0x16   0xF894 0x0034      LDRB     R0,[R4, #+52]
   \       0x1A   0x2801             CMP      R0,#+1
   \       0x1C   0xD101             BNE.N    ??HAL_DMAEx_MultiBufferStart_IT_2
   \       0x1E   0x2002             MOVS     R0,#+2
   \       0x20   0xE26F             B.N      ??HAL_DMAEx_MultiBufferStart_IT_1
   \                     ??HAL_DMAEx_MultiBufferStart_IT_2: (+1)
   \       0x22   0x2001             MOVS     R0,#+1
   \       0x24   0xF884 0x0034      STRB     R0,[R4, #+52]
    235          
    236            if(HAL_DMA_STATE_READY == hdma->State)
   \       0x28   0xF894 0x0035      LDRB     R0,[R4, #+53]
   \       0x2C   0x2801             CMP      R0,#+1
   \       0x2E   0xF040 0x8262      BNE.W    ??HAL_DMAEx_MultiBufferStart_IT_3
    237            {
    238              /* Change DMA peripheral state */
    239              hdma->State = HAL_DMA_STATE_BUSY;
   \       0x32   0x2002             MOVS     R0,#+2
   \       0x34   0xF884 0x0035      STRB     R0,[R4, #+53]
    240          
    241              /* Initialize the error code */
    242              hdma->ErrorCode = HAL_DMA_ERROR_NONE;
   \       0x38   0x2000             MOVS     R0,#+0
   \       0x3A   0x6560             STR      R0,[R4, #+84]
    243          
    244              if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
   \       0x3C   0x.... 0x....      LDR.W    R6,??DataTable2
   \       0x40   0x6820             LDR      R0,[R4, #+0]
   \       0x42   0x42B0             CMP      R0,R6
   \       0x44   0xD04A             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_4
   \       0x46   0x6820             LDR      R0,[R4, #+0]
   \       0x48   0x.... 0x....      LDR.W    R7,??DataTable2_1
   \       0x4C   0x42B8             CMP      R0,R7
   \       0x4E   0xD045             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_4
   \       0x50   0x6820             LDR      R0,[R4, #+0]
   \       0x52   0x.... 0x....      LDR.W    R7,??DataTable2_2
   \       0x56   0x42B8             CMP      R0,R7
   \       0x58   0xD040             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_4
   \       0x5A   0x6820             LDR      R0,[R4, #+0]
   \       0x5C   0x.... 0x....      LDR.W    R7,??DataTable2_3
   \       0x60   0x42B8             CMP      R0,R7
   \       0x62   0xD03B             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_4
   \       0x64   0x6820             LDR      R0,[R4, #+0]
   \       0x66   0x.... 0x....      LDR.W    R7,??DataTable2_4
   \       0x6A   0x42B8             CMP      R0,R7
   \       0x6C   0xD036             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_4
   \       0x6E   0x6820             LDR      R0,[R4, #+0]
   \       0x70   0x.... 0x....      LDR.W    R7,??DataTable2_5
   \       0x74   0x42B8             CMP      R0,R7
   \       0x76   0xD031             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_4
   \       0x78   0x6820             LDR      R0,[R4, #+0]
   \       0x7A   0x.... 0x....      LDR.W    R7,??DataTable2_6
   \       0x7E   0x42B8             CMP      R0,R7
   \       0x80   0xD02C             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_4
   \       0x82   0x6820             LDR      R0,[R4, #+0]
   \       0x84   0x.... 0x....      LDR.W    R7,??DataTable2_7
   \       0x88   0x42B8             CMP      R0,R7
   \       0x8A   0xD027             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_4
   \       0x8C   0x6820             LDR      R0,[R4, #+0]
   \       0x8E   0x.... 0x....      LDR.W    R7,??DataTable3
   \       0x92   0x42B8             CMP      R0,R7
   \       0x94   0xD022             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_4
   \       0x96   0x6820             LDR      R0,[R4, #+0]
   \       0x98   0x.... 0x....      LDR.W    R7,??DataTable3_1
   \       0x9C   0x42B8             CMP      R0,R7
   \       0x9E   0xD01D             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_4
   \       0xA0   0x6820             LDR      R0,[R4, #+0]
   \       0xA2   0x.... 0x....      LDR.W    R7,??DataTable3_2
   \       0xA6   0x42B8             CMP      R0,R7
   \       0xA8   0xD018             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_4
   \       0xAA   0x6820             LDR      R0,[R4, #+0]
   \       0xAC   0x.... 0x....      LDR.W    R7,??DataTable3_3
   \       0xB0   0x42B8             CMP      R0,R7
   \       0xB2   0xD013             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_4
   \       0xB4   0x6820             LDR      R0,[R4, #+0]
   \       0xB6   0x.... 0x....      LDR.W    R7,??DataTable3_4
   \       0xBA   0x42B8             CMP      R0,R7
   \       0xBC   0xD00E             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_4
   \       0xBE   0x6820             LDR      R0,[R4, #+0]
   \       0xC0   0x.... 0x....      LDR.W    R7,??DataTable3_5
   \       0xC4   0x42B8             CMP      R0,R7
   \       0xC6   0xD009             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_4
   \       0xC8   0x6820             LDR      R0,[R4, #+0]
   \       0xCA   0x.... 0x....      LDR.W    R7,??DataTable3_6
   \       0xCE   0x42B8             CMP      R0,R7
   \       0xD0   0xD004             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_4
   \       0xD2   0x6820             LDR      R0,[R4, #+0]
   \       0xD4   0x.... 0x....      LDR.W    R7,??DataTable4
   \       0xD8   0x42B8             CMP      R0,R7
   \       0xDA   0xD101             BNE.N    ??HAL_DMAEx_MultiBufferStart_IT_5
   \                     ??HAL_DMAEx_MultiBufferStart_IT_4: (+1)
   \       0xDC   0x2001             MOVS     R0,#+1
   \       0xDE   0xE000             B.N      ??HAL_DMAEx_MultiBufferStart_IT_6
   \                     ??HAL_DMAEx_MultiBufferStart_IT_5: (+1)
   \       0xE0   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMAEx_MultiBufferStart_IT_6: (+1)
   \       0xE2   0xB2C0             UXTB     R0,R0
   \       0xE4   0x2800             CMP      R0,#+0
   \       0xE6   0xD011             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_7
    245              {
    246                /* Enable the Double buffer mode */
    247                ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
   \       0xE8   0x6820             LDR      R0,[R4, #+0]
   \       0xEA   0x6800             LDR      R0,[R0, #+0]
   \       0xEC   0xF450 0x2080      ORRS     R0,R0,#0x40000
   \       0xF0   0x6827             LDR      R7,[R4, #+0]
   \       0xF2   0x6038             STR      R0,[R7, #+0]
    248          
    249                /* Configure DMA Stream destination address */
    250                ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
   \       0xF4   0x6820             LDR      R0,[R4, #+0]
   \       0xF6   0x6103             STR      R3,[R0, #+16]
    251          
    252                /* Calculate the interrupt clear flag register (IFCR) base address  */
    253                ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
   \       0xF8   0x6DA0             LDR      R0,[R4, #+88]
   \       0xFA   0x3008             ADDS     R0,R0,#+8
    254          
    255                /* Clear all flags */
    256                *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
   \       0xFC   0x233F             MOVS     R3,#+63
   \       0xFE   0xF894 0x705C      LDRB     R7,[R4, #+92]
   \      0x102   0xF017 0x071F      ANDS     R7,R7,#0x1F
   \      0x106   0x40BB             LSLS     R3,R3,R7
   \      0x108   0x6003             STR      R3,[R0, #+0]
   \      0x10A   0xE012             B.N      ??HAL_DMAEx_MultiBufferStart_IT_8
    257              }
    258              else /* BDMA instance(s) */
    259              {
    260                /* Enable the Double buffer mode */
    261                ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
   \                     ??HAL_DMAEx_MultiBufferStart_IT_7: (+1)
   \      0x10C   0x6820             LDR      R0,[R4, #+0]
   \      0x10E   0x6800             LDR      R0,[R0, #+0]
   \      0x110   0xF440 0x4000      ORR      R0,R0,#0x8000
   \      0x114   0xF050 0x0020      ORRS     R0,R0,#0x20
   \      0x118   0x6827             LDR      R7,[R4, #+0]
   \      0x11A   0x6038             STR      R0,[R7, #+0]
    262          
    263                /* Configure DMA Stream destination address */
    264                ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
   \      0x11C   0x6820             LDR      R0,[R4, #+0]
   \      0x11E   0x6103             STR      R3,[R0, #+16]
    265          
    266                /* Calculate the interrupt clear flag register (IFCR) base address  */
    267                ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
   \      0x120   0x6DA0             LDR      R0,[R4, #+88]
   \      0x122   0x1D00             ADDS     R0,R0,#+4
    268          
    269                /* Clear all flags */
    270                *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
   \      0x124   0x2301             MOVS     R3,#+1
   \      0x126   0xF894 0x705C      LDRB     R7,[R4, #+92]
   \      0x12A   0xF017 0x071F      ANDS     R7,R7,#0x1F
   \      0x12E   0x40BB             LSLS     R3,R3,R7
   \      0x130   0x6003             STR      R3,[R0, #+0]
   \                     ??HAL_DMAEx_MultiBufferStart_IT_8: (+1)
   \      0x132   0x9B06             LDR      R3,[SP, #+24]
    271              }
    272          
    273              /* Configure the source, destination address and the data length */
    274              DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
   \      0x134   0x0020             MOVS     R0,R4
   \      0x136   0x.... 0x....      BL       DMA_MultiBufferSetConfig
    275          
    276              if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
   \      0x13A   0x6820             LDR      R0,[R4, #+0]
   \      0x13C   0x42B0             CMP      R0,R6
   \      0x13E   0xD072             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_9
   \      0x140   0x6820             LDR      R0,[R4, #+0]
   \      0x142   0x.... 0x....      LDR.W    R1,??DataTable2_1
   \      0x146   0x4288             CMP      R0,R1
   \      0x148   0xD06D             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_9
   \      0x14A   0x6820             LDR      R0,[R4, #+0]
   \      0x14C   0x.... 0x....      LDR.W    R1,??DataTable2_2
   \      0x150   0x4288             CMP      R0,R1
   \      0x152   0xD068             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_9
   \      0x154   0x6820             LDR      R0,[R4, #+0]
   \      0x156   0x.... 0x....      LDR.W    R1,??DataTable2_3
   \      0x15A   0x4288             CMP      R0,R1
   \      0x15C   0xD063             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_9
   \      0x15E   0x6820             LDR      R0,[R4, #+0]
   \      0x160   0x.... 0x....      LDR.W    R1,??DataTable2_4
   \      0x164   0x4288             CMP      R0,R1
   \      0x166   0xD05E             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_9
   \      0x168   0x6820             LDR      R0,[R4, #+0]
   \      0x16A   0x.... 0x....      LDR.W    R1,??DataTable2_5
   \      0x16E   0x4288             CMP      R0,R1
   \      0x170   0xD059             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_9
   \      0x172   0x6820             LDR      R0,[R4, #+0]
   \      0x174   0x.... 0x....      LDR.W    R1,??DataTable2_6
   \      0x178   0x4288             CMP      R0,R1
   \      0x17A   0xD054             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_9
   \      0x17C   0x6820             LDR      R0,[R4, #+0]
   \      0x17E   0x.... 0x....      LDR.W    R1,??DataTable2_7
   \      0x182   0x4288             CMP      R0,R1
   \      0x184   0xD04F             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_9
   \      0x186   0x6820             LDR      R0,[R4, #+0]
   \      0x188   0x.... 0x....      LDR.W    R1,??DataTable3
   \      0x18C   0x4288             CMP      R0,R1
   \      0x18E   0xD04A             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_9
   \      0x190   0x6820             LDR      R0,[R4, #+0]
   \      0x192   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \      0x196   0x4288             CMP      R0,R1
   \      0x198   0xD045             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_9
   \      0x19A   0x6820             LDR      R0,[R4, #+0]
   \      0x19C   0x.... 0x....      LDR.W    R1,??DataTable3_2
   \      0x1A0   0x4288             CMP      R0,R1
   \      0x1A2   0xD040             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_9
   \      0x1A4   0x6820             LDR      R0,[R4, #+0]
   \      0x1A6   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \      0x1AA   0x4288             CMP      R0,R1
   \      0x1AC   0xD03B             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_9
   \      0x1AE   0x6820             LDR      R0,[R4, #+0]
   \      0x1B0   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \      0x1B4   0x4288             CMP      R0,R1
   \      0x1B6   0xD036             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_9
   \      0x1B8   0x6820             LDR      R0,[R4, #+0]
   \      0x1BA   0x.... 0x....      LDR.W    R1,??DataTable3_5
   \      0x1BE   0x4288             CMP      R0,R1
   \      0x1C0   0xD031             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_9
   \      0x1C2   0x6820             LDR      R0,[R4, #+0]
   \      0x1C4   0x.... 0x....      LDR.W    R1,??DataTable3_6
   \      0x1C8   0x4288             CMP      R0,R1
   \      0x1CA   0xD02C             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_9
   \      0x1CC   0x6820             LDR      R0,[R4, #+0]
   \      0x1CE   0x.... 0x....      LDR.W    R1,??DataTable4
   \      0x1D2   0x4288             CMP      R0,R1
   \      0x1D4   0xD027             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_9
   \      0x1D6   0x6820             LDR      R0,[R4, #+0]
   \      0x1D8   0x.... 0x....      LDR.W    R1,??DataTable3_7
   \      0x1DC   0x4288             CMP      R0,R1
   \      0x1DE   0xD022             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_9
   \      0x1E0   0x6820             LDR      R0,[R4, #+0]
   \      0x1E2   0x.... 0x....      LDR.W    R1,??DataTable3_8
   \      0x1E6   0x4288             CMP      R0,R1
   \      0x1E8   0xD01D             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_9
   \      0x1EA   0x6820             LDR      R0,[R4, #+0]
   \      0x1EC   0x.... 0x....      LDR.W    R1,??DataTable3_9
   \      0x1F0   0x4288             CMP      R0,R1
   \      0x1F2   0xD018             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_9
   \      0x1F4   0x6820             LDR      R0,[R4, #+0]
   \      0x1F6   0x.... 0x....      LDR.W    R1,??DataTable3_10
   \      0x1FA   0x4288             CMP      R0,R1
   \      0x1FC   0xD013             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_9
   \      0x1FE   0x6820             LDR      R0,[R4, #+0]
   \      0x200   0x.... 0x....      LDR.W    R1,??DataTable3_11
   \      0x204   0x4288             CMP      R0,R1
   \      0x206   0xD00E             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_9
   \      0x208   0x6820             LDR      R0,[R4, #+0]
   \      0x20A   0x.... 0x....      LDR.W    R1,??DataTable3_12
   \      0x20E   0x4288             CMP      R0,R1
   \      0x210   0xD009             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_9
   \      0x212   0x6820             LDR      R0,[R4, #+0]
   \      0x214   0x.... 0x....      LDR.W    R1,??DataTable3_13
   \      0x218   0x4288             CMP      R0,R1
   \      0x21A   0xD004             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_9
   \      0x21C   0x6820             LDR      R0,[R4, #+0]
   \      0x21E   0x.... 0x....      LDR.W    R1,??DataTable3_14
   \      0x222   0x4288             CMP      R0,R1
   \      0x224   0xD101             BNE.N    ??HAL_DMAEx_MultiBufferStart_IT_10
   \                     ??HAL_DMAEx_MultiBufferStart_IT_9: (+1)
   \      0x226   0x2001             MOVS     R0,#+1
   \      0x228   0xE000             B.N      ??HAL_DMAEx_MultiBufferStart_IT_11
   \                     ??HAL_DMAEx_MultiBufferStart_IT_10: (+1)
   \      0x22A   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMAEx_MultiBufferStart_IT_11: (+1)
   \      0x22C   0xB2C0             UXTB     R0,R0
   \      0x22E   0x2800             CMP      R0,#+0
   \      0x230   0xD008             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_12
    277              {
    278                /* Clear the DMAMUX synchro overrun flag */
    279                hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
   \      0x232   0x6EA0             LDR      R0,[R4, #+104]
   \      0x234   0x6E61             LDR      R1,[R4, #+100]
   \      0x236   0x6048             STR      R0,[R1, #+4]
    280          
    281                if(hdma->DMAmuxRequestGen != 0U)
   \      0x238   0x6EE0             LDR      R0,[R4, #+108]
   \      0x23A   0x2800             CMP      R0,#+0
   \      0x23C   0xD002             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_12
    282                {
    283                  /* Clear the DMAMUX request generator overrun flag */
    284                  hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
   \      0x23E   0x6F60             LDR      R0,[R4, #+116]
   \      0x240   0x6F21             LDR      R1,[R4, #+112]
   \      0x242   0x6048             STR      R0,[R1, #+4]
    285                }
    286              }
    287          
    288              if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
   \                     ??HAL_DMAEx_MultiBufferStart_IT_12: (+1)
   \      0x244   0x6820             LDR      R0,[R4, #+0]
   \      0x246   0x42B0             CMP      R0,R6
   \      0x248   0xD04A             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_13
   \      0x24A   0x6820             LDR      R0,[R4, #+0]
   \      0x24C   0x.... 0x....      LDR.W    R1,??DataTable2_1
   \      0x250   0x4288             CMP      R0,R1
   \      0x252   0xD045             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_13
   \      0x254   0x6820             LDR      R0,[R4, #+0]
   \      0x256   0x.... 0x....      LDR.W    R1,??DataTable2_2
   \      0x25A   0x4288             CMP      R0,R1
   \      0x25C   0xD040             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_13
   \      0x25E   0x6820             LDR      R0,[R4, #+0]
   \      0x260   0x.... 0x....      LDR.W    R1,??DataTable2_3
   \      0x264   0x4288             CMP      R0,R1
   \      0x266   0xD03B             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_13
   \      0x268   0x6820             LDR      R0,[R4, #+0]
   \      0x26A   0x.... 0x....      LDR.W    R1,??DataTable2_4
   \      0x26E   0x4288             CMP      R0,R1
   \      0x270   0xD036             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_13
   \      0x272   0x6820             LDR      R0,[R4, #+0]
   \      0x274   0x.... 0x....      LDR.W    R1,??DataTable2_5
   \      0x278   0x4288             CMP      R0,R1
   \      0x27A   0xD031             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_13
   \      0x27C   0x6820             LDR      R0,[R4, #+0]
   \      0x27E   0x.... 0x....      LDR.W    R1,??DataTable2_6
   \      0x282   0x4288             CMP      R0,R1
   \      0x284   0xD02C             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_13
   \      0x286   0x6820             LDR      R0,[R4, #+0]
   \      0x288   0x.... 0x....      LDR.W    R1,??DataTable2_7
   \      0x28C   0x4288             CMP      R0,R1
   \      0x28E   0xD027             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_13
   \      0x290   0x6820             LDR      R0,[R4, #+0]
   \      0x292   0x.... 0x....      LDR.W    R1,??DataTable3
   \      0x296   0x4288             CMP      R0,R1
   \      0x298   0xD022             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_13
   \      0x29A   0x6820             LDR      R0,[R4, #+0]
   \      0x29C   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \      0x2A0   0x4288             CMP      R0,R1
   \      0x2A2   0xD01D             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_13
   \      0x2A4   0x6820             LDR      R0,[R4, #+0]
   \      0x2A6   0x.... 0x....      LDR.W    R1,??DataTable3_2
   \      0x2AA   0x4288             CMP      R0,R1
   \      0x2AC   0xD018             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_13
   \      0x2AE   0x6820             LDR      R0,[R4, #+0]
   \      0x2B0   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \      0x2B4   0x4288             CMP      R0,R1
   \      0x2B6   0xD013             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_13
   \      0x2B8   0x6820             LDR      R0,[R4, #+0]
   \      0x2BA   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \      0x2BE   0x4288             CMP      R0,R1
   \      0x2C0   0xD00E             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_13
   \      0x2C2   0x6820             LDR      R0,[R4, #+0]
   \      0x2C4   0x.... 0x....      LDR.W    R1,??DataTable3_5
   \      0x2C8   0x4288             CMP      R0,R1
   \      0x2CA   0xD009             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_13
   \      0x2CC   0x6820             LDR      R0,[R4, #+0]
   \      0x2CE   0x.... 0x....      LDR.W    R1,??DataTable3_6
   \      0x2D2   0x4288             CMP      R0,R1
   \      0x2D4   0xD004             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_13
   \      0x2D6   0x6820             LDR      R0,[R4, #+0]
   \      0x2D8   0x.... 0x....      LDR.W    R1,??DataTable4
   \      0x2DC   0x4288             CMP      R0,R1
   \      0x2DE   0xD101             BNE.N    ??HAL_DMAEx_MultiBufferStart_IT_14
   \                     ??HAL_DMAEx_MultiBufferStart_IT_13: (+1)
   \      0x2E0   0x2001             MOVS     R0,#+1
   \      0x2E2   0xE000             B.N      ??HAL_DMAEx_MultiBufferStart_IT_15
   \                     ??HAL_DMAEx_MultiBufferStart_IT_14: (+1)
   \      0x2E4   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMAEx_MultiBufferStart_IT_15: (+1)
   \      0x2E6   0xB2C0             UXTB     R0,R0
   \      0x2E8   0x2800             CMP      R0,#+0
   \      0x2EA   0xD01A             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_16
    289              {
    290                /* Enable Common interrupts*/
    291                MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
   \      0x2EC   0x6820             LDR      R0,[R4, #+0]
   \      0x2EE   0x6800             LDR      R0,[R0, #+0]
   \      0x2F0   0xF030 0x001E      BICS     R0,R0,#0x1E
   \      0x2F4   0xF050 0x0016      ORRS     R0,R0,#0x16
   \      0x2F8   0x6821             LDR      R1,[R4, #+0]
   \      0x2FA   0x6008             STR      R0,[R1, #+0]
    292                ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
   \      0x2FC   0x6820             LDR      R0,[R4, #+0]
   \      0x2FE   0x6940             LDR      R0,[R0, #+20]
   \      0x300   0xF050 0x0080      ORRS     R0,R0,#0x80
   \      0x304   0x6821             LDR      R1,[R4, #+0]
   \      0x306   0x6148             STR      R0,[R1, #+20]
    293          
    294                if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
   \      0x308   0x6C20             LDR      R0,[R4, #+64]
   \      0x30A   0x2800             CMP      R0,#+0
   \      0x30C   0xD102             BNE.N    ??HAL_DMAEx_MultiBufferStart_IT_17
   \      0x30E   0x6CA0             LDR      R0,[R4, #+72]
   \      0x310   0x2800             CMP      R0,#+0
   \      0x312   0xD01A             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_18
    295                {
    296                  /*Enable Half Transfer IT if corresponding Callback is set*/
    297                  ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
   \                     ??HAL_DMAEx_MultiBufferStart_IT_17: (+1)
   \      0x314   0x6820             LDR      R0,[R4, #+0]
   \      0x316   0x6800             LDR      R0,[R0, #+0]
   \      0x318   0xF050 0x0008      ORRS     R0,R0,#0x8
   \      0x31C   0x6821             LDR      R1,[R4, #+0]
   \      0x31E   0x6008             STR      R0,[R1, #+0]
   \      0x320   0xE013             B.N      ??HAL_DMAEx_MultiBufferStart_IT_18
    298                }
    299              }
    300              else /* BDMA instance(s) */
    301              {
    302                /* Enable Common interrupts*/
    303                MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
   \                     ??HAL_DMAEx_MultiBufferStart_IT_16: (+1)
   \      0x322   0x6820             LDR      R0,[R4, #+0]
   \      0x324   0x6800             LDR      R0,[R0, #+0]
   \      0x326   0xF030 0x000E      BICS     R0,R0,#0xE
   \      0x32A   0xF050 0x000A      ORRS     R0,R0,#0xA
   \      0x32E   0x6821             LDR      R1,[R4, #+0]
   \      0x330   0x6008             STR      R0,[R1, #+0]
    304          
    305                if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
   \      0x332   0x6C20             LDR      R0,[R4, #+64]
   \      0x334   0x2800             CMP      R0,#+0
   \      0x336   0xD102             BNE.N    ??HAL_DMAEx_MultiBufferStart_IT_19
   \      0x338   0x6CA0             LDR      R0,[R4, #+72]
   \      0x33A   0x2800             CMP      R0,#+0
   \      0x33C   0xD005             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_18
    306                {
    307                  /*Enable Half Transfer IT if corresponding Callback is set*/
    308                  ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
   \                     ??HAL_DMAEx_MultiBufferStart_IT_19: (+1)
   \      0x33E   0x6820             LDR      R0,[R4, #+0]
   \      0x340   0x6800             LDR      R0,[R0, #+0]
   \      0x342   0xF050 0x0004      ORRS     R0,R0,#0x4
   \      0x346   0x6821             LDR      R1,[R4, #+0]
   \      0x348   0x6008             STR      R0,[R1, #+0]
    309                }
    310              }
    311          
    312              if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
   \                     ??HAL_DMAEx_MultiBufferStart_IT_18: (+1)
   \      0x34A   0x6820             LDR      R0,[R4, #+0]
   \      0x34C   0x42B0             CMP      R0,R6
   \      0x34E   0xD06B             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_20
   \      0x350   0x6820             LDR      R0,[R4, #+0]
   \      0x352   0x....             LDR.N    R1,??DataTable2_1
   \      0x354   0x4288             CMP      R0,R1
   \      0x356   0xD067             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_20
   \      0x358   0x6820             LDR      R0,[R4, #+0]
   \      0x35A   0x....             LDR.N    R1,??DataTable2_2
   \      0x35C   0x4288             CMP      R0,R1
   \      0x35E   0xD063             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_20
   \      0x360   0x6820             LDR      R0,[R4, #+0]
   \      0x362   0x....             LDR.N    R1,??DataTable2_3
   \      0x364   0x4288             CMP      R0,R1
   \      0x366   0xD05F             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_20
   \      0x368   0x6820             LDR      R0,[R4, #+0]
   \      0x36A   0x....             LDR.N    R1,??DataTable2_4
   \      0x36C   0x4288             CMP      R0,R1
   \      0x36E   0xD05B             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_20
   \      0x370   0x6820             LDR      R0,[R4, #+0]
   \      0x372   0x....             LDR.N    R1,??DataTable2_5
   \      0x374   0x4288             CMP      R0,R1
   \      0x376   0xD057             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_20
   \      0x378   0x6820             LDR      R0,[R4, #+0]
   \      0x37A   0x....             LDR.N    R1,??DataTable2_6
   \      0x37C   0x4288             CMP      R0,R1
   \      0x37E   0xD053             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_20
   \      0x380   0x6820             LDR      R0,[R4, #+0]
   \      0x382   0x....             LDR.N    R1,??DataTable2_7
   \      0x384   0x4288             CMP      R0,R1
   \      0x386   0xD04F             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_20
   \      0x388   0x6820             LDR      R0,[R4, #+0]
   \      0x38A   0x.... 0x....      LDR.W    R1,??DataTable3
   \      0x38E   0x4288             CMP      R0,R1
   \      0x390   0xD04A             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_20
   \      0x392   0x6820             LDR      R0,[R4, #+0]
   \      0x394   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \      0x398   0x4288             CMP      R0,R1
   \      0x39A   0xD045             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_20
   \      0x39C   0x6820             LDR      R0,[R4, #+0]
   \      0x39E   0x.... 0x....      LDR.W    R1,??DataTable3_2
   \      0x3A2   0x4288             CMP      R0,R1
   \      0x3A4   0xD040             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_20
   \      0x3A6   0x6820             LDR      R0,[R4, #+0]
   \      0x3A8   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \      0x3AC   0x4288             CMP      R0,R1
   \      0x3AE   0xD03B             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_20
   \      0x3B0   0x6820             LDR      R0,[R4, #+0]
   \      0x3B2   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \      0x3B6   0x4288             CMP      R0,R1
   \      0x3B8   0xD036             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_20
   \      0x3BA   0x6820             LDR      R0,[R4, #+0]
   \      0x3BC   0x.... 0x....      LDR.W    R1,??DataTable3_5
   \      0x3C0   0x4288             CMP      R0,R1
   \      0x3C2   0xD031             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_20
   \      0x3C4   0x6820             LDR      R0,[R4, #+0]
   \      0x3C6   0x.... 0x....      LDR.W    R1,??DataTable3_6
   \      0x3CA   0x4288             CMP      R0,R1
   \      0x3CC   0xD02C             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_20
   \      0x3CE   0x6820             LDR      R0,[R4, #+0]
   \      0x3D0   0x.... 0x....      LDR.W    R1,??DataTable4
   \      0x3D4   0x4288             CMP      R0,R1
   \      0x3D6   0xD027             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_20
   \      0x3D8   0x6820             LDR      R0,[R4, #+0]
   \      0x3DA   0x.... 0x....      LDR.W    R1,??DataTable3_7
   \      0x3DE   0x4288             CMP      R0,R1
   \      0x3E0   0xD022             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_20
   \      0x3E2   0x6820             LDR      R0,[R4, #+0]
   \      0x3E4   0x.... 0x....      LDR.W    R1,??DataTable3_8
   \      0x3E8   0x4288             CMP      R0,R1
   \      0x3EA   0xD01D             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_20
   \      0x3EC   0x6820             LDR      R0,[R4, #+0]
   \      0x3EE   0x.... 0x....      LDR.W    R1,??DataTable3_9
   \      0x3F2   0x4288             CMP      R0,R1
   \      0x3F4   0xD018             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_20
   \      0x3F6   0x6820             LDR      R0,[R4, #+0]
   \      0x3F8   0x.... 0x....      LDR.W    R1,??DataTable3_10
   \      0x3FC   0x4288             CMP      R0,R1
   \      0x3FE   0xD013             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_20
   \      0x400   0x6820             LDR      R0,[R4, #+0]
   \      0x402   0x.... 0x....      LDR.W    R1,??DataTable3_11
   \      0x406   0x4288             CMP      R0,R1
   \      0x408   0xD00E             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_20
   \      0x40A   0x6820             LDR      R0,[R4, #+0]
   \      0x40C   0x.... 0x....      LDR.W    R1,??DataTable3_12
   \      0x410   0x4288             CMP      R0,R1
   \      0x412   0xD009             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_20
   \      0x414   0x6820             LDR      R0,[R4, #+0]
   \      0x416   0x.... 0x....      LDR.W    R1,??DataTable3_13
   \      0x41A   0x4288             CMP      R0,R1
   \      0x41C   0xD004             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_20
   \      0x41E   0x6820             LDR      R0,[R4, #+0]
   \      0x420   0x.... 0x....      LDR.W    R1,??DataTable3_14
   \      0x424   0x4288             CMP      R0,R1
   \      0x426   0xD101             BNE.N    ??HAL_DMAEx_MultiBufferStart_IT_21
   \                     ??HAL_DMAEx_MultiBufferStart_IT_20: (+1)
   \      0x428   0x2001             MOVS     R0,#+1
   \      0x42A   0xE000             B.N      ??HAL_DMAEx_MultiBufferStart_IT_22
   \                     ??HAL_DMAEx_MultiBufferStart_IT_21: (+1)
   \      0x42C   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMAEx_MultiBufferStart_IT_22: (+1)
   \      0x42E   0xB2C0             UXTB     R0,R0
   \      0x430   0x2800             CMP      R0,#+0
   \      0x432   0xD012             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_23
    313              {
    314                /* Check if DMAMUX Synchronization is enabled*/
    315                if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
   \      0x434   0x6E20             LDR      R0,[R4, #+96]
   \      0x436   0x6800             LDR      R0,[R0, #+0]
   \      0x438   0x03C0             LSLS     R0,R0,#+15
   \      0x43A   0xD505             BPL.N    ??HAL_DMAEx_MultiBufferStart_IT_24
    316                {
    317                  /* Enable DMAMUX sync overrun IT*/
    318                  hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
   \      0x43C   0x6E20             LDR      R0,[R4, #+96]
   \      0x43E   0x6800             LDR      R0,[R0, #+0]
   \      0x440   0xF450 0x7080      ORRS     R0,R0,#0x100
   \      0x444   0x6E21             LDR      R1,[R4, #+96]
   \      0x446   0x6008             STR      R0,[R1, #+0]
    319                }
    320          
    321                if(hdma->DMAmuxRequestGen != 0U)
   \                     ??HAL_DMAEx_MultiBufferStart_IT_24: (+1)
   \      0x448   0x6EE0             LDR      R0,[R4, #+108]
   \      0x44A   0x2800             CMP      R0,#+0
   \      0x44C   0xD005             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_23
    322                {
    323                  /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
    324                  /* enable the request gen overrun IT*/
    325                  hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
   \      0x44E   0x6EE0             LDR      R0,[R4, #+108]
   \      0x450   0x6800             LDR      R0,[R0, #+0]
   \      0x452   0xF450 0x7080      ORRS     R0,R0,#0x100
   \      0x456   0x6EE1             LDR      R1,[R4, #+108]
   \      0x458   0x6008             STR      R0,[R1, #+0]
    326                }
    327              }
    328          
    329              /* Enable the peripheral */
    330              __HAL_DMA_ENABLE(hdma);
   \                     ??HAL_DMAEx_MultiBufferStart_IT_23: (+1)
   \      0x45A   0x6820             LDR      R0,[R4, #+0]
   \      0x45C   0x42B0             CMP      R0,R6
   \      0x45E   0xD03C             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_25
   \      0x460   0x6820             LDR      R0,[R4, #+0]
   \      0x462   0x....             LDR.N    R1,??DataTable2_1
   \      0x464   0x4288             CMP      R0,R1
   \      0x466   0xD038             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_25
   \      0x468   0x6820             LDR      R0,[R4, #+0]
   \      0x46A   0x....             LDR.N    R1,??DataTable2_2
   \      0x46C   0x4288             CMP      R0,R1
   \      0x46E   0xD034             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_25
   \      0x470   0x6820             LDR      R0,[R4, #+0]
   \      0x472   0x....             LDR.N    R1,??DataTable2_3
   \      0x474   0x4288             CMP      R0,R1
   \      0x476   0xD030             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_25
   \      0x478   0x6820             LDR      R0,[R4, #+0]
   \      0x47A   0x....             LDR.N    R1,??DataTable2_4
   \      0x47C   0x4288             CMP      R0,R1
   \      0x47E   0xD02C             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_25
   \      0x480   0x6820             LDR      R0,[R4, #+0]
   \      0x482   0x....             LDR.N    R1,??DataTable2_5
   \      0x484   0x4288             CMP      R0,R1
   \      0x486   0xD028             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_25
   \      0x488   0x6820             LDR      R0,[R4, #+0]
   \      0x48A   0x....             LDR.N    R1,??DataTable2_6
   \      0x48C   0x4288             CMP      R0,R1
   \      0x48E   0xD024             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_25
   \      0x490   0x6820             LDR      R0,[R4, #+0]
   \      0x492   0x....             LDR.N    R1,??DataTable2_7
   \      0x494   0x4288             CMP      R0,R1
   \      0x496   0xD020             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_25
   \      0x498   0x6820             LDR      R0,[R4, #+0]
   \      0x49A   0x....             LDR.N    R1,??DataTable3
   \      0x49C   0x4288             CMP      R0,R1
   \      0x49E   0xD01C             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_25
   \      0x4A0   0x6820             LDR      R0,[R4, #+0]
   \      0x4A2   0x....             LDR.N    R1,??DataTable3_1
   \      0x4A4   0x4288             CMP      R0,R1
   \      0x4A6   0xD018             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_25
   \      0x4A8   0x6820             LDR      R0,[R4, #+0]
   \      0x4AA   0x....             LDR.N    R1,??DataTable3_2
   \      0x4AC   0x4288             CMP      R0,R1
   \      0x4AE   0xD014             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_25
   \      0x4B0   0x6820             LDR      R0,[R4, #+0]
   \      0x4B2   0x....             LDR.N    R1,??DataTable3_3
   \      0x4B4   0x4288             CMP      R0,R1
   \      0x4B6   0xD010             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_25
   \      0x4B8   0x6820             LDR      R0,[R4, #+0]
   \      0x4BA   0x....             LDR.N    R1,??DataTable3_4
   \      0x4BC   0x4288             CMP      R0,R1
   \      0x4BE   0xD00C             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_25
   \      0x4C0   0x6820             LDR      R0,[R4, #+0]
   \      0x4C2   0x....             LDR.N    R1,??DataTable3_5
   \      0x4C4   0x4288             CMP      R0,R1
   \      0x4C6   0xD008             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_25
   \      0x4C8   0x6820             LDR      R0,[R4, #+0]
   \      0x4CA   0x....             LDR.N    R1,??DataTable3_6
   \      0x4CC   0x4288             CMP      R0,R1
   \      0x4CE   0xD004             BEQ.N    ??HAL_DMAEx_MultiBufferStart_IT_25
   \      0x4D0   0x6820             LDR      R0,[R4, #+0]
   \      0x4D2   0x.... 0x....      LDR.W    R1,??DataTable4
   \      0x4D6   0x4288             CMP      R0,R1
   \      0x4D8   0xD106             BNE.N    ??HAL_DMAEx_MultiBufferStart_IT_26
   \                     ??HAL_DMAEx_MultiBufferStart_IT_25: (+1)
   \      0x4DA   0x6820             LDR      R0,[R4, #+0]
   \      0x4DC   0x6800             LDR      R0,[R0, #+0]
   \      0x4DE   0xF050 0x0001      ORRS     R0,R0,#0x1
   \      0x4E2   0x6821             LDR      R1,[R4, #+0]
   \      0x4E4   0x6008             STR      R0,[R1, #+0]
   \      0x4E6   0xE00A             B.N      ??HAL_DMAEx_MultiBufferStart_IT_27
   \                     ??HAL_DMAEx_MultiBufferStart_IT_26: (+1)
   \      0x4E8   0x6820             LDR      R0,[R4, #+0]
   \      0x4EA   0x6800             LDR      R0,[R0, #+0]
   \      0x4EC   0xF050 0x0001      ORRS     R0,R0,#0x1
   \      0x4F0   0x6821             LDR      R1,[R4, #+0]
   \      0x4F2   0x6008             STR      R0,[R1, #+0]
   \      0x4F4   0xE003             B.N      ??HAL_DMAEx_MultiBufferStart_IT_27
    331            }
    332            else
    333            {
    334              /* Set the error code to busy */
    335              hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
   \                     ??HAL_DMAEx_MultiBufferStart_IT_3: (+1)
   \      0x4F6   0xF44F 0x6000      MOV      R0,#+2048
   \      0x4FA   0x6560             STR      R0,[R4, #+84]
    336          
    337              /* Return error status */
    338              status = HAL_ERROR;
   \      0x4FC   0x2501             MOVS     R5,#+1
    339            }
    340            return status;
   \                     ??HAL_DMAEx_MultiBufferStart_IT_27: (+1)
   \      0x4FE   0x0028             MOVS     R0,R5
   \      0x500   0xB2C0             UXTB     R0,R0
   \                     ??HAL_DMAEx_MultiBufferStart_IT_1: (+1)
   \      0x502   0xBDF2             POP      {R1,R4-R7,PC}
    341          }
    342          
    343          /**
    344            * @brief  Change the memory0 or memory1 address on the fly.
    345            * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
    346            *                     the configuration information for the specified DMA Stream.
    347            * @param  Address:    The new address
    348            * @param  memory:     the memory to be changed, This parameter can be one of
    349            *                     the following values:
    350            *                      MEMORY0 /
    351            *                      MEMORY1
    352            * @note   The MEMORY0 address can be changed only when the current transfer use
    353            *         MEMORY1 and the MEMORY1 address can be changed only when the current
    354            *         transfer use MEMORY0.
    355            * @retval HAL status
    356            */

   \                                 In section .text, align 2, keep-with-next
    357          HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
    358          {
   \                     HAL_DMAEx_ChangeMemory: (+1)
   \        0x0   0xB410             PUSH     {R4}
    359            if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
   \        0x2   0x6803             LDR      R3,[R0, #+0]
   \        0x4   0x....             LDR.N    R4,??DataTable2
   \        0x6   0x42A3             CMP      R3,R4
   \        0x8   0xD03B             BEQ.N    ??HAL_DMAEx_ChangeMemory_0
   \        0xA   0x6803             LDR      R3,[R0, #+0]
   \        0xC   0x....             LDR.N    R4,??DataTable2_1
   \        0xE   0x42A3             CMP      R3,R4
   \       0x10   0xD037             BEQ.N    ??HAL_DMAEx_ChangeMemory_0
   \       0x12   0x6803             LDR      R3,[R0, #+0]
   \       0x14   0x....             LDR.N    R4,??DataTable2_2
   \       0x16   0x42A3             CMP      R3,R4
   \       0x18   0xD033             BEQ.N    ??HAL_DMAEx_ChangeMemory_0
   \       0x1A   0x6803             LDR      R3,[R0, #+0]
   \       0x1C   0x....             LDR.N    R4,??DataTable2_3
   \       0x1E   0x42A3             CMP      R3,R4
   \       0x20   0xD02F             BEQ.N    ??HAL_DMAEx_ChangeMemory_0
   \       0x22   0x6803             LDR      R3,[R0, #+0]
   \       0x24   0x....             LDR.N    R4,??DataTable2_4
   \       0x26   0x42A3             CMP      R3,R4
   \       0x28   0xD02B             BEQ.N    ??HAL_DMAEx_ChangeMemory_0
   \       0x2A   0x6803             LDR      R3,[R0, #+0]
   \       0x2C   0x....             LDR.N    R4,??DataTable2_5
   \       0x2E   0x42A3             CMP      R3,R4
   \       0x30   0xD027             BEQ.N    ??HAL_DMAEx_ChangeMemory_0
   \       0x32   0x6803             LDR      R3,[R0, #+0]
   \       0x34   0x....             LDR.N    R4,??DataTable2_6
   \       0x36   0x42A3             CMP      R3,R4
   \       0x38   0xD023             BEQ.N    ??HAL_DMAEx_ChangeMemory_0
   \       0x3A   0x6803             LDR      R3,[R0, #+0]
   \       0x3C   0x....             LDR.N    R4,??DataTable2_7
   \       0x3E   0x42A3             CMP      R3,R4
   \       0x40   0xD01F             BEQ.N    ??HAL_DMAEx_ChangeMemory_0
   \       0x42   0x6803             LDR      R3,[R0, #+0]
   \       0x44   0x....             LDR.N    R4,??DataTable3
   \       0x46   0x42A3             CMP      R3,R4
   \       0x48   0xD01B             BEQ.N    ??HAL_DMAEx_ChangeMemory_0
   \       0x4A   0x6803             LDR      R3,[R0, #+0]
   \       0x4C   0x....             LDR.N    R4,??DataTable3_1
   \       0x4E   0x42A3             CMP      R3,R4
   \       0x50   0xD017             BEQ.N    ??HAL_DMAEx_ChangeMemory_0
   \       0x52   0x6803             LDR      R3,[R0, #+0]
   \       0x54   0x....             LDR.N    R4,??DataTable3_2
   \       0x56   0x42A3             CMP      R3,R4
   \       0x58   0xD013             BEQ.N    ??HAL_DMAEx_ChangeMemory_0
   \       0x5A   0x6803             LDR      R3,[R0, #+0]
   \       0x5C   0x....             LDR.N    R4,??DataTable3_3
   \       0x5E   0x42A3             CMP      R3,R4
   \       0x60   0xD00F             BEQ.N    ??HAL_DMAEx_ChangeMemory_0
   \       0x62   0x6803             LDR      R3,[R0, #+0]
   \       0x64   0x....             LDR.N    R4,??DataTable3_4
   \       0x66   0x42A3             CMP      R3,R4
   \       0x68   0xD00B             BEQ.N    ??HAL_DMAEx_ChangeMemory_0
   \       0x6A   0x6803             LDR      R3,[R0, #+0]
   \       0x6C   0x....             LDR.N    R4,??DataTable3_5
   \       0x6E   0x42A3             CMP      R3,R4
   \       0x70   0xD007             BEQ.N    ??HAL_DMAEx_ChangeMemory_0
   \       0x72   0x6803             LDR      R3,[R0, #+0]
   \       0x74   0x....             LDR.N    R4,??DataTable3_6
   \       0x76   0x42A3             CMP      R3,R4
   \       0x78   0xD003             BEQ.N    ??HAL_DMAEx_ChangeMemory_0
   \       0x7A   0x6803             LDR      R3,[R0, #+0]
   \       0x7C   0x....             LDR.N    R4,??DataTable4
   \       0x7E   0x42A3             CMP      R3,R4
   \       0x80   0xD101             BNE.N    ??HAL_DMAEx_ChangeMemory_1
   \                     ??HAL_DMAEx_ChangeMemory_0: (+1)
   \       0x82   0x2301             MOVS     R3,#+1
   \       0x84   0xE000             B.N      ??HAL_DMAEx_ChangeMemory_2
   \                     ??HAL_DMAEx_ChangeMemory_1: (+1)
   \       0x86   0x2300             MOVS     R3,#+0
   \                     ??HAL_DMAEx_ChangeMemory_2: (+1)
   \       0x88   0xB2DB             UXTB     R3,R3
   \       0x8A   0x2B00             CMP      R3,#+0
   \       0x8C   0xD008             BEQ.N    ??HAL_DMAEx_ChangeMemory_3
    360            {
    361              if(memory == MEMORY0)
   \       0x8E   0xB2D2             UXTB     R2,R2
   \       0x90   0x2A00             CMP      R2,#+0
   \       0x92   0xD102             BNE.N    ??HAL_DMAEx_ChangeMemory_4
    362              {
    363                /* change the memory0 address */
    364                ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
   \       0x94   0x6800             LDR      R0,[R0, #+0]
   \       0x96   0x60C1             STR      R1,[R0, #+12]
   \       0x98   0xE00A             B.N      ??HAL_DMAEx_ChangeMemory_5
    365              }
    366              else
    367              {
    368                /* change the memory1 address */
    369                ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
   \                     ??HAL_DMAEx_ChangeMemory_4: (+1)
   \       0x9A   0x6800             LDR      R0,[R0, #+0]
   \       0x9C   0x6101             STR      R1,[R0, #+16]
   \       0x9E   0xE007             B.N      ??HAL_DMAEx_ChangeMemory_5
    370              }
    371            }
    372            else /* BDMA instance(s) */
    373            {
    374              if(memory == MEMORY0)
   \                     ??HAL_DMAEx_ChangeMemory_3: (+1)
   \       0xA0   0xB2D2             UXTB     R2,R2
   \       0xA2   0x2A00             CMP      R2,#+0
   \       0xA4   0xD102             BNE.N    ??HAL_DMAEx_ChangeMemory_6
    375              {
    376                /* change the memory0 address */
    377                ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
   \       0xA6   0x6800             LDR      R0,[R0, #+0]
   \       0xA8   0x60C1             STR      R1,[R0, #+12]
   \       0xAA   0xE001             B.N      ??HAL_DMAEx_ChangeMemory_5
    378              }
    379              else
    380              {
    381                /* change the memory1 address */
    382                ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
   \                     ??HAL_DMAEx_ChangeMemory_6: (+1)
   \       0xAC   0x6800             LDR      R0,[R0, #+0]
   \       0xAE   0x6101             STR      R1,[R0, #+16]
    383              }
    384            }
    385          
    386            return HAL_OK;
   \                     ??HAL_DMAEx_ChangeMemory_5: (+1)
   \       0xB0   0x2000             MOVS     R0,#+0
   \       0xB2   0xBC10             POP      {R4}
   \       0xB4   0x4770             BX       LR
    387          }
    388          
    389          /**
    390            * @brief  Configure the DMAMUX synchronization parameters for a given DMA stream (instance).
    391            * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
    392            *                     the configuration information for the specified DMA Stream.
    393            * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
    394            * @retval HAL status
    395            */

   \                                 In section .text, align 2, keep-with-next
    396          HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
    397          {
   \                     HAL_DMAEx_ConfigMuxSync: (+1)
   \        0x0   0xB430             PUSH     {R4,R5}
    398            uint32_t syncSignalID = 0;
   \        0x2   0x2300             MOVS     R3,#+0
    399            uint32_t syncPolarity = 0;
   \        0x4   0x2200             MOVS     R2,#+0
    400          
    401            /* Check the parameters */
    402            assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
    403            assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
    404            assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
    405            assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));
    406          
    407            if(pSyncConfig->SyncEnable == ENABLE)
   \        0x6   0x7A0C             LDRB     R4,[R1, #+8]
   \        0x8   0x2C01             CMP      R4,#+1
   \        0xA   0xD14F             BNE.N    ??HAL_DMAEx_ConfigMuxSync_0
    408            {
    409              assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));
    410          
    411              if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
   \        0xC   0x6802             LDR      R2,[R0, #+0]
   \        0xE   0x.... 0x....      LDR.W    R3,??DataTable5
   \       0x12   0x429A             CMP      R2,R3
   \       0x14   0xD042             BEQ.N    ??HAL_DMAEx_ConfigMuxSync_1
   \       0x16   0x6802             LDR      R2,[R0, #+0]
   \       0x18   0x.... 0x....      LDR.W    R3,??DataTable5_1
   \       0x1C   0x429A             CMP      R2,R3
   \       0x1E   0xD03D             BEQ.N    ??HAL_DMAEx_ConfigMuxSync_1
   \       0x20   0x6802             LDR      R2,[R0, #+0]
   \       0x22   0x.... 0x....      LDR.W    R3,??DataTable5_2
   \       0x26   0x429A             CMP      R2,R3
   \       0x28   0xD038             BEQ.N    ??HAL_DMAEx_ConfigMuxSync_1
   \       0x2A   0x6802             LDR      R2,[R0, #+0]
   \       0x2C   0x.... 0x....      LDR.W    R3,??DataTable5_3
   \       0x30   0x429A             CMP      R2,R3
   \       0x32   0xD033             BEQ.N    ??HAL_DMAEx_ConfigMuxSync_1
   \       0x34   0x6802             LDR      R2,[R0, #+0]
   \       0x36   0x.... 0x....      LDR.W    R3,??DataTable5_4
   \       0x3A   0x429A             CMP      R2,R3
   \       0x3C   0xD02E             BEQ.N    ??HAL_DMAEx_ConfigMuxSync_1
   \       0x3E   0x6802             LDR      R2,[R0, #+0]
   \       0x40   0x.... 0x....      LDR.W    R3,??DataTable5_5
   \       0x44   0x429A             CMP      R2,R3
   \       0x46   0xD029             BEQ.N    ??HAL_DMAEx_ConfigMuxSync_1
   \       0x48   0x6802             LDR      R2,[R0, #+0]
   \       0x4A   0x.... 0x....      LDR.W    R3,??DataTable5_6
   \       0x4E   0x429A             CMP      R2,R3
   \       0x50   0xD024             BEQ.N    ??HAL_DMAEx_ConfigMuxSync_1
   \       0x52   0x6802             LDR      R2,[R0, #+0]
   \       0x54   0x.... 0x....      LDR.W    R3,??DataTable5_7
   \       0x58   0x429A             CMP      R2,R3
   \       0x5A   0xD01F             BEQ.N    ??HAL_DMAEx_ConfigMuxSync_1
   \       0x5C   0x6802             LDR      R2,[R0, #+0]
   \       0x5E   0x....             LDR.N    R3,??DataTable3
   \       0x60   0x429A             CMP      R2,R3
   \       0x62   0xD01B             BEQ.N    ??HAL_DMAEx_ConfigMuxSync_1
   \       0x64   0x6802             LDR      R2,[R0, #+0]
   \       0x66   0x....             LDR.N    R3,??DataTable3_1
   \       0x68   0x429A             CMP      R2,R3
   \       0x6A   0xD017             BEQ.N    ??HAL_DMAEx_ConfigMuxSync_1
   \       0x6C   0x6802             LDR      R2,[R0, #+0]
   \       0x6E   0x....             LDR.N    R3,??DataTable3_2
   \       0x70   0x429A             CMP      R2,R3
   \       0x72   0xD013             BEQ.N    ??HAL_DMAEx_ConfigMuxSync_1
   \       0x74   0x6802             LDR      R2,[R0, #+0]
   \       0x76   0x....             LDR.N    R3,??DataTable3_3
   \       0x78   0x429A             CMP      R2,R3
   \       0x7A   0xD00F             BEQ.N    ??HAL_DMAEx_ConfigMuxSync_1
   \       0x7C   0x6802             LDR      R2,[R0, #+0]
   \       0x7E   0x....             LDR.N    R3,??DataTable3_4
   \       0x80   0x429A             CMP      R2,R3
   \       0x82   0xD00B             BEQ.N    ??HAL_DMAEx_ConfigMuxSync_1
   \       0x84   0x6802             LDR      R2,[R0, #+0]
   \       0x86   0x....             LDR.N    R3,??DataTable3_5
   \       0x88   0x429A             CMP      R2,R3
   \       0x8A   0xD007             BEQ.N    ??HAL_DMAEx_ConfigMuxSync_1
   \       0x8C   0x6802             LDR      R2,[R0, #+0]
   \       0x8E   0x....             LDR.N    R3,??DataTable3_6
   \       0x90   0x429A             CMP      R2,R3
   \       0x92   0xD003             BEQ.N    ??HAL_DMAEx_ConfigMuxSync_1
   \       0x94   0x6802             LDR      R2,[R0, #+0]
   \       0x96   0x....             LDR.N    R3,??DataTable4
   \       0x98   0x429A             CMP      R2,R3
   \       0x9A   0xD101             BNE.N    ??HAL_DMAEx_ConfigMuxSync_2
   \                     ??HAL_DMAEx_ConfigMuxSync_1: (+1)
   \       0x9C   0x2201             MOVS     R2,#+1
   \       0x9E   0xE000             B.N      ??HAL_DMAEx_ConfigMuxSync_3
   \                     ??HAL_DMAEx_ConfigMuxSync_2: (+1)
   \       0xA0   0x2200             MOVS     R2,#+0
   \                     ??HAL_DMAEx_ConfigMuxSync_3: (+1)
   \       0xA2   0xB2D2             UXTB     R2,R2
   \       0xA4   0x2A00             CMP      R2,#+0
   \       0xA6   0xD1FF             BNE.N    ??HAL_DMAEx_ConfigMuxSync_4
    412              {
    413                assert_param(IS_DMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    414              }
    415              else
    416              {
    417                assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    418              }
    419              syncSignalID = pSyncConfig->SyncSignalID;
   \                     ??HAL_DMAEx_ConfigMuxSync_5: (+1)
   \                     ??HAL_DMAEx_ConfigMuxSync_4: (+1)
   \       0xA8   0x680B             LDR      R3,[R1, #+0]
    420              syncPolarity = pSyncConfig->SyncPolarity;
   \       0xAA   0x684A             LDR      R2,[R1, #+4]
    421            }
    422          
    423            /*Check if the DMA state is ready */
    424            if(hdma->State == HAL_DMA_STATE_READY)
   \                     ??HAL_DMAEx_ConfigMuxSync_0: (+1)
   \       0xAC   0xF890 0x4035      LDRB     R4,[R0, #+53]
   \       0xB0   0x2C01             CMP      R4,#+1
   \       0xB2   0xD126             BNE.N    ??HAL_DMAEx_ConfigMuxSync_6
    425            {
    426              /* Process Locked */
    427              __HAL_LOCK(hdma);
   \       0xB4   0xF890 0x4034      LDRB     R4,[R0, #+52]
   \       0xB8   0x2C01             CMP      R4,#+1
   \       0xBA   0xD101             BNE.N    ??HAL_DMAEx_ConfigMuxSync_7
   \       0xBC   0x2002             MOVS     R0,#+2
   \       0xBE   0xE024             B.N      ??HAL_DMAEx_ConfigMuxSync_8
   \                     ??HAL_DMAEx_ConfigMuxSync_7: (+1)
   \       0xC0   0x2401             MOVS     R4,#+1
   \       0xC2   0xF880 0x4034      STRB     R4,[R0, #+52]
    428          
    429              /* Disable the synchronization and event generation before applying a new config */
    430              CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
   \       0xC6   0x6E04             LDR      R4,[R0, #+96]
   \       0xC8   0x6824             LDR      R4,[R4, #+0]
   \       0xCA   0xF434 0x3481      BICS     R4,R4,#0x10200
   \       0xCE   0x6E05             LDR      R5,[R0, #+96]
   \       0xD0   0x602C             STR      R4,[R5, #+0]
    431          
    432              /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    433              MODIFY_REG( hdma->DMAmuxChannel->CCR, \
    434                         (~DMAMUX_CxCR_DMAREQ_ID) , \
    435                         (syncSignalID << DMAMUX_CxCR_SYNC_ID_Pos)       | \
    436                         ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
    437                         syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
    438                         ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));
   \       0xD2   0x6E04             LDR      R4,[R0, #+96]
   \       0xD4   0x6824             LDR      R4,[R4, #+0]
   \       0xD6   0xF004 0x04FF      AND      R4,R4,#0xFF
   \       0xDA   0xEA54 0x6403      ORRS     R4,R4,R3, LSL #+24
   \       0xDE   0x68CB             LDR      R3,[R1, #+12]
   \       0xE0   0x1E5B             SUBS     R3,R3,#+1
   \       0xE2   0xEA54 0x44C3      ORRS     R4,R4,R3, LSL #+19
   \       0xE6   0x4322             ORRS     R2,R2,R4
   \       0xE8   0x7A0B             LDRB     R3,[R1, #+8]
   \       0xEA   0xEA52 0x4203      ORRS     R2,R2,R3, LSL #+16
   \       0xEE   0x7A49             LDRB     R1,[R1, #+9]
   \       0xF0   0xEA52 0x2241      ORRS     R2,R2,R1, LSL #+9
   \       0xF4   0x6E01             LDR      R1,[R0, #+96]
   \       0xF6   0x600A             STR      R2,[R1, #+0]
    439          
    440                /* Process Locked */
    441              __HAL_UNLOCK(hdma);
   \       0xF8   0x2100             MOVS     R1,#+0
   \       0xFA   0xF880 0x1034      STRB     R1,[R0, #+52]
    442          
    443              return HAL_OK;
   \       0xFE   0x2000             MOVS     R0,#+0
   \      0x100   0xE003             B.N      ??HAL_DMAEx_ConfigMuxSync_8
    444            }
    445            else
    446            {
    447              /* Set the error code to busy */
    448              hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
   \                     ??HAL_DMAEx_ConfigMuxSync_6: (+1)
   \      0x102   0xF44F 0x6100      MOV      R1,#+2048
   \      0x106   0x6541             STR      R1,[R0, #+84]
    449          
    450              /* Return error status */
    451              return HAL_ERROR;
   \      0x108   0x2001             MOVS     R0,#+1
   \                     ??HAL_DMAEx_ConfigMuxSync_8: (+1)
   \      0x10A   0xBC30             POP      {R4,R5}
   \      0x10C   0x4770             BX       LR
    452            }
    453          }
    454          
    455          /**
    456            * @brief  Configure the DMAMUX request generator block used by the given DMA stream (instance).
    457            * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
    458            *                     the configuration information for the specified DMA Stream.
    459            * @param  pRequestGeneratorConfig : pointer to HAL_DMA_MuxRequestGeneratorConfigTypeDef :
    460            *         contains the request generator parameters.
    461            *
    462            * @retval HAL status
    463            */

   \                                 In section .text, align 2, keep-with-next
    464          HAL_StatusTypeDef HAL_DMAEx_ConfigMuxRequestGenerator (DMA_HandleTypeDef *hdma, HAL_DMA_MuxRequestGeneratorConfigTypeDef *pRequestGeneratorConfig)
    465          {
   \                     HAL_DMAEx_ConfigMuxRequestGenerator: (+1)
   \        0x0   0xB410             PUSH     {R4}
    466            HAL_StatusTypeDef status;
    467            HAL_DMA_StateTypeDef temp_state = hdma->State;
   \        0x2   0xF890 0x3035      LDRB     R3,[R0, #+53]
    468          
    469            /* Check the parameters */
    470            assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
    471          
    472            if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
   \        0x6   0x6802             LDR      R2,[R0, #+0]
   \        0x8   0x....             LDR.N    R4,??DataTable5
   \        0xA   0x42A2             CMP      R2,R4
   \        0xC   0xD03B             BEQ.N    ??HAL_DMAEx_ConfigMuxRequestGenerator_0
   \        0xE   0x6802             LDR      R2,[R0, #+0]
   \       0x10   0x....             LDR.N    R4,??DataTable5_1
   \       0x12   0x42A2             CMP      R2,R4
   \       0x14   0xD037             BEQ.N    ??HAL_DMAEx_ConfigMuxRequestGenerator_0
   \       0x16   0x6802             LDR      R2,[R0, #+0]
   \       0x18   0x....             LDR.N    R4,??DataTable5_2
   \       0x1A   0x42A2             CMP      R2,R4
   \       0x1C   0xD033             BEQ.N    ??HAL_DMAEx_ConfigMuxRequestGenerator_0
   \       0x1E   0x6802             LDR      R2,[R0, #+0]
   \       0x20   0x....             LDR.N    R4,??DataTable5_3
   \       0x22   0x42A2             CMP      R2,R4
   \       0x24   0xD02F             BEQ.N    ??HAL_DMAEx_ConfigMuxRequestGenerator_0
   \       0x26   0x6802             LDR      R2,[R0, #+0]
   \       0x28   0x....             LDR.N    R4,??DataTable5_4
   \       0x2A   0x42A2             CMP      R2,R4
   \       0x2C   0xD02B             BEQ.N    ??HAL_DMAEx_ConfigMuxRequestGenerator_0
   \       0x2E   0x6802             LDR      R2,[R0, #+0]
   \       0x30   0x....             LDR.N    R4,??DataTable5_5
   \       0x32   0x42A2             CMP      R2,R4
   \       0x34   0xD027             BEQ.N    ??HAL_DMAEx_ConfigMuxRequestGenerator_0
   \       0x36   0x6802             LDR      R2,[R0, #+0]
   \       0x38   0x....             LDR.N    R4,??DataTable5_6
   \       0x3A   0x42A2             CMP      R2,R4
   \       0x3C   0xD023             BEQ.N    ??HAL_DMAEx_ConfigMuxRequestGenerator_0
   \       0x3E   0x6802             LDR      R2,[R0, #+0]
   \       0x40   0x....             LDR.N    R4,??DataTable5_7
   \       0x42   0x42A2             CMP      R2,R4
   \       0x44   0xD01F             BEQ.N    ??HAL_DMAEx_ConfigMuxRequestGenerator_0
   \       0x46   0x6802             LDR      R2,[R0, #+0]
   \       0x48   0x....             LDR.N    R4,??DataTable5_8
   \       0x4A   0x42A2             CMP      R2,R4
   \       0x4C   0xD01B             BEQ.N    ??HAL_DMAEx_ConfigMuxRequestGenerator_0
   \       0x4E   0x6802             LDR      R2,[R0, #+0]
   \       0x50   0x....             LDR.N    R4,??DataTable5_9
   \       0x52   0x42A2             CMP      R2,R4
   \       0x54   0xD017             BEQ.N    ??HAL_DMAEx_ConfigMuxRequestGenerator_0
   \       0x56   0x6802             LDR      R2,[R0, #+0]
   \       0x58   0x....             LDR.N    R4,??DataTable5_10
   \       0x5A   0x42A2             CMP      R2,R4
   \       0x5C   0xD013             BEQ.N    ??HAL_DMAEx_ConfigMuxRequestGenerator_0
   \       0x5E   0x6802             LDR      R2,[R0, #+0]
   \       0x60   0x....             LDR.N    R4,??DataTable5_11
   \       0x62   0x42A2             CMP      R2,R4
   \       0x64   0xD00F             BEQ.N    ??HAL_DMAEx_ConfigMuxRequestGenerator_0
   \       0x66   0x6802             LDR      R2,[R0, #+0]
   \       0x68   0x....             LDR.N    R4,??DataTable5_12
   \       0x6A   0x42A2             CMP      R2,R4
   \       0x6C   0xD00B             BEQ.N    ??HAL_DMAEx_ConfigMuxRequestGenerator_0
   \       0x6E   0x6802             LDR      R2,[R0, #+0]
   \       0x70   0x....             LDR.N    R4,??DataTable5_13
   \       0x72   0x42A2             CMP      R2,R4
   \       0x74   0xD007             BEQ.N    ??HAL_DMAEx_ConfigMuxRequestGenerator_0
   \       0x76   0x6802             LDR      R2,[R0, #+0]
   \       0x78   0x....             LDR.N    R4,??DataTable5_14
   \       0x7A   0x42A2             CMP      R2,R4
   \       0x7C   0xD003             BEQ.N    ??HAL_DMAEx_ConfigMuxRequestGenerator_0
   \       0x7E   0x6802             LDR      R2,[R0, #+0]
   \       0x80   0x....             LDR.N    R4,??DataTable4
   \       0x82   0x42A2             CMP      R2,R4
   \       0x84   0xD101             BNE.N    ??HAL_DMAEx_ConfigMuxRequestGenerator_1
   \                     ??HAL_DMAEx_ConfigMuxRequestGenerator_0: (+1)
   \       0x86   0x2201             MOVS     R2,#+1
   \       0x88   0xE000             B.N      ??HAL_DMAEx_ConfigMuxRequestGenerator_2
   \                     ??HAL_DMAEx_ConfigMuxRequestGenerator_1: (+1)
   \       0x8A   0x2200             MOVS     R2,#+0
   \                     ??HAL_DMAEx_ConfigMuxRequestGenerator_2: (+1)
   \       0x8C   0xB2D2             UXTB     R2,R2
   \       0x8E   0x2A00             CMP      R2,#+0
   \       0x90   0xD1FF             BNE.N    ??HAL_DMAEx_ConfigMuxRequestGenerator_3
    473            {
    474              assert_param(IS_DMA_DMAMUX_REQUEST_GEN_SIGNAL_ID(pRequestGeneratorConfig->SignalID));
    475            }
    476            else
    477            {
    478              assert_param(IS_BDMA_DMAMUX_REQUEST_GEN_SIGNAL_ID(pRequestGeneratorConfig->SignalID));
    479            }
    480          
    481          
    482            assert_param(IS_DMAMUX_REQUEST_GEN_POLARITY(pRequestGeneratorConfig->Polarity));
    483            assert_param(IS_DMAMUX_REQUEST_GEN_REQUEST_NUMBER(pRequestGeneratorConfig->RequestNumber));
    484          
    485            /* check if the DMA state is ready
    486               and DMA is using a DMAMUX request generator block
    487            */
    488            if(hdma->DMAmuxRequestGen == 0U)
   \                     ??HAL_DMAEx_ConfigMuxRequestGenerator_4: (+1)
   \                     ??HAL_DMAEx_ConfigMuxRequestGenerator_3: (+1)
   \       0x92   0x6EC2             LDR      R2,[R0, #+108]
   \       0x94   0x2A00             CMP      R2,#+0
   \       0x96   0xD103             BNE.N    ??HAL_DMAEx_ConfigMuxRequestGenerator_5
    489            {
    490              /* Set the error code to busy */
    491              hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
   \       0x98   0x2140             MOVS     R1,#+64
   \       0x9A   0x6541             STR      R1,[R0, #+84]
    492          
    493              /* error status */
    494              status = HAL_ERROR;
   \       0x9C   0x2001             MOVS     R0,#+1
   \       0x9E   0xE021             B.N      ??HAL_DMAEx_ConfigMuxRequestGenerator_6
    495            }
    496            else if(((hdma->DMAmuxRequestGen->RGCR & DMAMUX_RGxCR_GE) == 0U) && (temp_state == HAL_DMA_STATE_READY))
   \                     ??HAL_DMAEx_ConfigMuxRequestGenerator_5: (+1)
   \       0xA0   0x6EC2             LDR      R2,[R0, #+108]
   \       0xA2   0x6812             LDR      R2,[R2, #+0]
   \       0xA4   0x03D2             LSLS     R2,R2,#+15
   \       0xA6   0xD419             BMI.N    ??HAL_DMAEx_ConfigMuxRequestGenerator_7
   \       0xA8   0xB2DB             UXTB     R3,R3
   \       0xAA   0x2B01             CMP      R3,#+1
   \       0xAC   0xD116             BNE.N    ??HAL_DMAEx_ConfigMuxRequestGenerator_7
    497            {
    498              /* RequestGenerator must be disable prior to the configuration i.e GE bit is 0 */
    499          
    500              /* Process Locked */
    501              __HAL_LOCK(hdma);
   \       0xAE   0xF890 0x2034      LDRB     R2,[R0, #+52]
   \       0xB2   0x2A01             CMP      R2,#+1
   \       0xB4   0xD101             BNE.N    ??HAL_DMAEx_ConfigMuxRequestGenerator_8
   \       0xB6   0x2002             MOVS     R0,#+2
   \       0xB8   0xE015             B.N      ??HAL_DMAEx_ConfigMuxRequestGenerator_9
   \                     ??HAL_DMAEx_ConfigMuxRequestGenerator_8: (+1)
   \       0xBA   0x2201             MOVS     R2,#+1
   \       0xBC   0xF880 0x2034      STRB     R2,[R0, #+52]
    502          
    503              /* Set the request generator new parameters */
    504              hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
    505                                            ((pRequestGeneratorConfig->RequestNumber - 1U) << DMAMUX_RGxCR_GNBREQ_Pos)| \
    506                                            pRequestGeneratorConfig->Polarity;
   \       0xC0   0x680A             LDR      R2,[R1, #+0]
   \       0xC2   0x688B             LDR      R3,[R1, #+8]
   \       0xC4   0x1E5B             SUBS     R3,R3,#+1
   \       0xC6   0xEA52 0x42C3      ORRS     R2,R2,R3, LSL #+19
   \       0xCA   0x6849             LDR      R1,[R1, #+4]
   \       0xCC   0x430A             ORRS     R2,R1,R2
   \       0xCE   0x6EC1             LDR      R1,[R0, #+108]
   \       0xD0   0x600A             STR      R2,[R1, #+0]
    507              /* Process Locked */
    508              __HAL_UNLOCK(hdma);
   \       0xD2   0x2100             MOVS     R1,#+0
   \       0xD4   0xF880 0x1034      STRB     R1,[R0, #+52]
    509          
    510              return HAL_OK;
   \       0xD8   0x2000             MOVS     R0,#+0
   \       0xDA   0xE004             B.N      ??HAL_DMAEx_ConfigMuxRequestGenerator_9
    511            }
    512            else
    513            {
    514              /* Set the error code to busy */
    515              hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
   \                     ??HAL_DMAEx_ConfigMuxRequestGenerator_7: (+1)
   \       0xDC   0xF44F 0x6100      MOV      R1,#+2048
   \       0xE0   0x6541             STR      R1,[R0, #+84]
    516          
    517              /* error status */
    518              status = HAL_ERROR;
   \       0xE2   0x2001             MOVS     R0,#+1
    519            }
    520          
    521            return status;
   \                     ??HAL_DMAEx_ConfigMuxRequestGenerator_6: (+1)
   \       0xE4   0xB2C0             UXTB     R0,R0
   \                     ??HAL_DMAEx_ConfigMuxRequestGenerator_9: (+1)
   \       0xE6   0xBC10             POP      {R4}
   \       0xE8   0x4770             BX       LR
    522          }
    523          
    524          /**
    525            * @brief  Enable the DMAMUX request generator block used by the given DMA stream (instance).
    526            * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
    527            *                     the configuration information for the specified DMA Stream.
    528            * @retval HAL status
    529            */

   \                                 In section .text, align 2, keep-with-next
    530          HAL_StatusTypeDef HAL_DMAEx_EnableMuxRequestGenerator (DMA_HandleTypeDef *hdma)
    531          {
    532            /* Check the parameters */
    533            assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
    534          
    535            /* check if the DMA state is ready
    536               and DMA is using a DMAMUX request generator block */
    537            if((hdma->State != HAL_DMA_STATE_RESET) && (hdma->DMAmuxRequestGen != 0U))
   \                     HAL_DMAEx_EnableMuxRequestGenerator: (+1)
   \        0x0   0xF890 0x1035      LDRB     R1,[R0, #+53]
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD00A             BEQ.N    ??HAL_DMAEx_EnableMuxRequestGenerator_0
   \        0x8   0x6EC1             LDR      R1,[R0, #+108]
   \        0xA   0x2900             CMP      R1,#+0
   \        0xC   0xD007             BEQ.N    ??HAL_DMAEx_EnableMuxRequestGenerator_0
    538            {
    539              /* Enable the request generator*/
    540              hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_GE;
   \        0xE   0x6EC1             LDR      R1,[R0, #+108]
   \       0x10   0x6809             LDR      R1,[R1, #+0]
   \       0x12   0xF451 0x3180      ORRS     R1,R1,#0x10000
   \       0x16   0x6EC0             LDR      R0,[R0, #+108]
   \       0x18   0x6001             STR      R1,[R0, #+0]
    541          
    542             return HAL_OK;
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0xE000             B.N      ??HAL_DMAEx_EnableMuxRequestGenerator_1
    543           }
    544           else
    545           {
    546             return HAL_ERROR;
   \                     ??HAL_DMAEx_EnableMuxRequestGenerator_0: (+1)
   \       0x1E   0x2001             MOVS     R0,#+1
   \                     ??HAL_DMAEx_EnableMuxRequestGenerator_1: (+1)
   \       0x20   0x4770             BX       LR
    547           }
    548          }
    549          
    550          /**
    551            * @brief  Disable the DMAMUX request generator block used by the given DMA stream (instance).
    552            * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
    553            *                     the configuration information for the specified DMA Stream.
    554            * @retval HAL status
    555            */

   \                                 In section .text, align 2, keep-with-next
    556          HAL_StatusTypeDef HAL_DMAEx_DisableMuxRequestGenerator (DMA_HandleTypeDef *hdma)
    557          {
    558            /* Check the parameters */
    559            assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
    560          
    561            /* check if the DMA state is ready
    562               and DMA is using a DMAMUX request generator block */
    563            if((hdma->State != HAL_DMA_STATE_RESET) && (hdma->DMAmuxRequestGen != 0U))
   \                     HAL_DMAEx_DisableMuxRequestGenerator: (+1)
   \        0x0   0xF890 0x1035      LDRB     R1,[R0, #+53]
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD00A             BEQ.N    ??HAL_DMAEx_DisableMuxRequestGenerator_0
   \        0x8   0x6EC1             LDR      R1,[R0, #+108]
   \        0xA   0x2900             CMP      R1,#+0
   \        0xC   0xD007             BEQ.N    ??HAL_DMAEx_DisableMuxRequestGenerator_0
    564            {
    565              /* Disable the request generator*/
    566              hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_GE;
   \        0xE   0x6EC1             LDR      R1,[R0, #+108]
   \       0x10   0x6809             LDR      R1,[R1, #+0]
   \       0x12   0xF431 0x3180      BICS     R1,R1,#0x10000
   \       0x16   0x6EC0             LDR      R0,[R0, #+108]
   \       0x18   0x6001             STR      R1,[R0, #+0]
    567          
    568             return HAL_OK;
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0xE000             B.N      ??HAL_DMAEx_DisableMuxRequestGenerator_1
    569           }
    570           else
    571           {
    572             return HAL_ERROR;
   \                     ??HAL_DMAEx_DisableMuxRequestGenerator_0: (+1)
   \       0x1E   0x2001             MOVS     R0,#+1
   \                     ??HAL_DMAEx_DisableMuxRequestGenerator_1: (+1)
   \       0x20   0x4770             BX       LR
    573           }
    574          }
    575          
    576          /**
    577            * @brief  Handles DMAMUX interrupt request.
    578            * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
    579            *               the configuration information for the specified DMA Stream.
    580            * @retval None
    581            */

   \                                 In section .text, align 2, keep-with-next
    582          void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
    583          {
   \                     HAL_DMAEx_MUX_IRQHandler: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    584            /* Check for DMAMUX Synchronization overrun */
    585            if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
   \        0x4   0x6E60             LDR      R0,[R4, #+100]
   \        0x6   0x6800             LDR      R0,[R0, #+0]
   \        0x8   0x6EA1             LDR      R1,[R4, #+104]
   \        0xA   0x4208             TST      R0,R1
   \        0xC   0xD012             BEQ.N    ??HAL_DMAEx_MUX_IRQHandler_0
    586            {
    587              /* Disable the synchro overrun interrupt */
    588              hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
   \        0xE   0x6E20             LDR      R0,[R4, #+96]
   \       0x10   0x6800             LDR      R0,[R0, #+0]
   \       0x12   0xF430 0x7080      BICS     R0,R0,#0x100
   \       0x16   0x6E21             LDR      R1,[R4, #+96]
   \       0x18   0x6008             STR      R0,[R1, #+0]
    589          
    590              /* Clear the DMAMUX synchro overrun flag */
    591              hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
   \       0x1A   0x6EA0             LDR      R0,[R4, #+104]
   \       0x1C   0x6E61             LDR      R1,[R4, #+100]
   \       0x1E   0x6048             STR      R0,[R1, #+4]
    592          
    593              /* Update error code */
    594              hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
   \       0x20   0x6D60             LDR      R0,[R4, #+84]
   \       0x22   0xF450 0x7000      ORRS     R0,R0,#0x200
   \       0x26   0x6560             STR      R0,[R4, #+84]
    595          
    596              if(hdma->XferErrorCallback != NULL)
   \       0x28   0x6CE0             LDR      R0,[R4, #+76]
   \       0x2A   0x2800             CMP      R0,#+0
   \       0x2C   0xD002             BEQ.N    ??HAL_DMAEx_MUX_IRQHandler_0
    597              {
    598                /* Transfer error callback */
    599                hdma->XferErrorCallback(hdma);
   \       0x2E   0x0020             MOVS     R0,R4
   \       0x30   0x6CE1             LDR      R1,[R4, #+76]
   \       0x32   0x4788             BLX      R1
    600              }
    601            }
    602          
    603            if(hdma->DMAmuxRequestGen != 0)
   \                     ??HAL_DMAEx_MUX_IRQHandler_0: (+1)
   \       0x34   0x6EE0             LDR      R0,[R4, #+108]
   \       0x36   0x2800             CMP      R0,#+0
   \       0x38   0xD017             BEQ.N    ??HAL_DMAEx_MUX_IRQHandler_1
    604            {
    605             /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    606              if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
   \       0x3A   0x6F20             LDR      R0,[R4, #+112]
   \       0x3C   0x6800             LDR      R0,[R0, #+0]
   \       0x3E   0x6F61             LDR      R1,[R4, #+116]
   \       0x40   0x4208             TST      R0,R1
   \       0x42   0xD012             BEQ.N    ??HAL_DMAEx_MUX_IRQHandler_1
    607              {
    608                /* Disable the request gen overrun interrupt */
    609                hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
   \       0x44   0x6EE0             LDR      R0,[R4, #+108]
   \       0x46   0x6800             LDR      R0,[R0, #+0]
   \       0x48   0xF430 0x7080      BICS     R0,R0,#0x100
   \       0x4C   0x6EE1             LDR      R1,[R4, #+108]
   \       0x4E   0x6008             STR      R0,[R1, #+0]
    610          
    611                /* Clear the DMAMUX request generator overrun flag */
    612                hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
   \       0x50   0x6F60             LDR      R0,[R4, #+116]
   \       0x52   0x6F21             LDR      R1,[R4, #+112]
   \       0x54   0x6048             STR      R0,[R1, #+4]
    613          
    614                /* Update error code */
    615                hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
   \       0x56   0x6D60             LDR      R0,[R4, #+84]
   \       0x58   0xF450 0x6080      ORRS     R0,R0,#0x400
   \       0x5C   0x6560             STR      R0,[R4, #+84]
    616          
    617                if(hdma->XferErrorCallback != NULL)
   \       0x5E   0x6CE0             LDR      R0,[R4, #+76]
   \       0x60   0x2800             CMP      R0,#+0
   \       0x62   0xD002             BEQ.N    ??HAL_DMAEx_MUX_IRQHandler_1
    618                {
    619                  /* Transfer error callback */
    620                  hdma->XferErrorCallback(hdma);
   \       0x64   0x0020             MOVS     R0,R4
   \       0x66   0x6CE1             LDR      R1,[R4, #+76]
   \       0x68   0x4788             BLX      R1
    621                }
    622              }
    623            }
    624          }
   \                     ??HAL_DMAEx_MUX_IRQHandler_1: (+1)
   \       0x6A   0xBD10             POP      {R4,PC}
    625          
    626          
    627          /**
    628            * @}
    629            */
    630          
    631          /**
    632            * @}
    633            */
    634          
    635          /** @addtogroup DMAEx_Private_Functions
    636            * @{
    637            */
    638          
    639          /**
    640            * @brief  Set the DMA Transfer parameter.
    641            * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
    642            *                     the configuration information for the specified DMA Stream.
    643            * @param  SrcAddress: The source memory Buffer address
    644            * @param  DstAddress: The destination memory Buffer address
    645            * @param  DataLength: The length of data to be transferred from source to destination
    646            * @retval HAL status
    647            */

   \                                 In section .text, align 2, keep-with-next
    648          static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
    649          {
   \                     DMA_MultiBufferSetConfig: (+1)
   \        0x0   0xB430             PUSH     {R4,R5}
    650            if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
   \        0x2   0x6804             LDR      R4,[R0, #+0]
   \        0x4   0x....             LDR.N    R5,??DataTable5
   \        0x6   0x42AC             CMP      R4,R5
   \        0x8   0xD03B             BEQ.N    ??DMA_MultiBufferSetConfig_0
   \        0xA   0x6804             LDR      R4,[R0, #+0]
   \        0xC   0x....             LDR.N    R5,??DataTable5_1
   \        0xE   0x42AC             CMP      R4,R5
   \       0x10   0xD037             BEQ.N    ??DMA_MultiBufferSetConfig_0
   \       0x12   0x6804             LDR      R4,[R0, #+0]
   \       0x14   0x....             LDR.N    R5,??DataTable5_2
   \       0x16   0x42AC             CMP      R4,R5
   \       0x18   0xD033             BEQ.N    ??DMA_MultiBufferSetConfig_0
   \       0x1A   0x6804             LDR      R4,[R0, #+0]
   \       0x1C   0x....             LDR.N    R5,??DataTable5_3
   \       0x1E   0x42AC             CMP      R4,R5
   \       0x20   0xD02F             BEQ.N    ??DMA_MultiBufferSetConfig_0
   \       0x22   0x6804             LDR      R4,[R0, #+0]
   \       0x24   0x....             LDR.N    R5,??DataTable5_4
   \       0x26   0x42AC             CMP      R4,R5
   \       0x28   0xD02B             BEQ.N    ??DMA_MultiBufferSetConfig_0
   \       0x2A   0x6804             LDR      R4,[R0, #+0]
   \       0x2C   0x....             LDR.N    R5,??DataTable5_5
   \       0x2E   0x42AC             CMP      R4,R5
   \       0x30   0xD027             BEQ.N    ??DMA_MultiBufferSetConfig_0
   \       0x32   0x6804             LDR      R4,[R0, #+0]
   \       0x34   0x....             LDR.N    R5,??DataTable5_6
   \       0x36   0x42AC             CMP      R4,R5
   \       0x38   0xD023             BEQ.N    ??DMA_MultiBufferSetConfig_0
   \       0x3A   0x6804             LDR      R4,[R0, #+0]
   \       0x3C   0x....             LDR.N    R5,??DataTable5_7
   \       0x3E   0x42AC             CMP      R4,R5
   \       0x40   0xD01F             BEQ.N    ??DMA_MultiBufferSetConfig_0
   \       0x42   0x6804             LDR      R4,[R0, #+0]
   \       0x44   0x....             LDR.N    R5,??DataTable5_8
   \       0x46   0x42AC             CMP      R4,R5
   \       0x48   0xD01B             BEQ.N    ??DMA_MultiBufferSetConfig_0
   \       0x4A   0x6804             LDR      R4,[R0, #+0]
   \       0x4C   0x....             LDR.N    R5,??DataTable5_9
   \       0x4E   0x42AC             CMP      R4,R5
   \       0x50   0xD017             BEQ.N    ??DMA_MultiBufferSetConfig_0
   \       0x52   0x6804             LDR      R4,[R0, #+0]
   \       0x54   0x....             LDR.N    R5,??DataTable5_10
   \       0x56   0x42AC             CMP      R4,R5
   \       0x58   0xD013             BEQ.N    ??DMA_MultiBufferSetConfig_0
   \       0x5A   0x6804             LDR      R4,[R0, #+0]
   \       0x5C   0x....             LDR.N    R5,??DataTable5_11
   \       0x5E   0x42AC             CMP      R4,R5
   \       0x60   0xD00F             BEQ.N    ??DMA_MultiBufferSetConfig_0
   \       0x62   0x6804             LDR      R4,[R0, #+0]
   \       0x64   0x....             LDR.N    R5,??DataTable5_12
   \       0x66   0x42AC             CMP      R4,R5
   \       0x68   0xD00B             BEQ.N    ??DMA_MultiBufferSetConfig_0
   \       0x6A   0x6804             LDR      R4,[R0, #+0]
   \       0x6C   0x....             LDR.N    R5,??DataTable5_13
   \       0x6E   0x42AC             CMP      R4,R5
   \       0x70   0xD007             BEQ.N    ??DMA_MultiBufferSetConfig_0
   \       0x72   0x6804             LDR      R4,[R0, #+0]
   \       0x74   0x....             LDR.N    R5,??DataTable5_14
   \       0x76   0x42AC             CMP      R4,R5
   \       0x78   0xD003             BEQ.N    ??DMA_MultiBufferSetConfig_0
   \       0x7A   0x6804             LDR      R4,[R0, #+0]
   \       0x7C   0x....             LDR.N    R5,??DataTable5_15
   \       0x7E   0x42AC             CMP      R4,R5
   \       0x80   0xD101             BNE.N    ??DMA_MultiBufferSetConfig_1
   \                     ??DMA_MultiBufferSetConfig_0: (+1)
   \       0x82   0x2401             MOVS     R4,#+1
   \       0x84   0xE000             B.N      ??DMA_MultiBufferSetConfig_2
   \                     ??DMA_MultiBufferSetConfig_1: (+1)
   \       0x86   0x2400             MOVS     R4,#+0
   \                     ??DMA_MultiBufferSetConfig_2: (+1)
   \       0x88   0xB2E4             UXTB     R4,R4
   \       0x8A   0x2C00             CMP      R4,#+0
   \       0x8C   0xD00E             BEQ.N    ??DMA_MultiBufferSetConfig_3
    651            {
    652              /* Configure DMA Stream data length */
    653              ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
   \       0x8E   0x6804             LDR      R4,[R0, #+0]
   \       0x90   0x6063             STR      R3,[R4, #+4]
    654          
    655              /* Peripheral to Memory */
    656              if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
   \       0x92   0x6883             LDR      R3,[R0, #+8]
   \       0x94   0x2B40             CMP      R3,#+64
   \       0x96   0xD104             BNE.N    ??DMA_MultiBufferSetConfig_4
    657              {
    658                /* Configure DMA Stream destination address */
    659                ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
   \       0x98   0x6803             LDR      R3,[R0, #+0]
   \       0x9A   0x609A             STR      R2,[R3, #+8]
    660          
    661                /* Configure DMA Stream source address */
    662                ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
   \       0x9C   0x6800             LDR      R0,[R0, #+0]
   \       0x9E   0x60C1             STR      R1,[R0, #+12]
   \       0xA0   0xE012             B.N      ??DMA_MultiBufferSetConfig_5
    663              }
    664              /* Memory to Peripheral */
    665              else
    666              {
    667                /* Configure DMA Stream source address */
    668                ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
   \                     ??DMA_MultiBufferSetConfig_4: (+1)
   \       0xA2   0x6803             LDR      R3,[R0, #+0]
   \       0xA4   0x6099             STR      R1,[R3, #+8]
    669          
    670                /* Configure DMA Stream destination address */
    671                ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
   \       0xA6   0x6800             LDR      R0,[R0, #+0]
   \       0xA8   0x60C2             STR      R2,[R0, #+12]
   \       0xAA   0xE00D             B.N      ??DMA_MultiBufferSetConfig_5
    672              }
    673            }
    674            else /* BDMA instance(s) */
    675            {
    676              /* Configure DMA Stream data length */
    677              ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
   \                     ??DMA_MultiBufferSetConfig_3: (+1)
   \       0xAC   0x6804             LDR      R4,[R0, #+0]
   \       0xAE   0x6063             STR      R3,[R4, #+4]
    678          
    679              /* Peripheral to Memory */
    680              if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
   \       0xB0   0x6883             LDR      R3,[R0, #+8]
   \       0xB2   0x2B40             CMP      R3,#+64
   \       0xB4   0xD104             BNE.N    ??DMA_MultiBufferSetConfig_6
    681              {
    682                /* Configure DMA Stream destination address */
    683                ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
   \       0xB6   0x6803             LDR      R3,[R0, #+0]
   \       0xB8   0x609A             STR      R2,[R3, #+8]
    684          
    685                /* Configure DMA Stream source address */
    686                ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
   \       0xBA   0x6800             LDR      R0,[R0, #+0]
   \       0xBC   0x60C1             STR      R1,[R0, #+12]
   \       0xBE   0xE003             B.N      ??DMA_MultiBufferSetConfig_5
    687              }
    688              /* Memory to Peripheral */
    689              else
    690              {
    691                /* Configure DMA Stream source address */
    692                ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
   \                     ??DMA_MultiBufferSetConfig_6: (+1)
   \       0xC0   0x6803             LDR      R3,[R0, #+0]
   \       0xC2   0x6099             STR      R1,[R3, #+8]
    693          
    694                /* Configure DMA Stream destination address */
    695                ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
   \       0xC4   0x6800             LDR      R0,[R0, #+0]
   \       0xC6   0x60C2             STR      R2,[R0, #+12]
    696              }
    697            }
    698          }
   \                     ??DMA_MultiBufferSetConfig_5: (+1)
   \       0xC8   0xBC30             POP      {R4,R5}
   \       0xCA   0x4770             BX       LR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x4002'0010        DC32     0x40020010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0x4002'0028        DC32     0x40020028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \        0x0   0x4002'0040        DC32     0x40020040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \        0x0   0x4002'0058        DC32     0x40020058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \        0x0   0x4002'0070        DC32     0x40020070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \        0x0   0x4002'0088        DC32     0x40020088

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \        0x0   0x4002'00A0        DC32     0x400200a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \        0x0   0x4002'00B8        DC32     0x400200b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0x4002'0410        DC32     0x40020410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \        0x0   0x4002'0428        DC32     0x40020428

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \        0x0   0x4002'0440        DC32     0x40020440

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \        0x0   0x4002'0458        DC32     0x40020458

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \        0x0   0x4002'0470        DC32     0x40020470

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \        0x0   0x4002'0488        DC32     0x40020488

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \        0x0   0x4002'04A0        DC32     0x400204a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \        0x0   0x5802'5408        DC32     0x58025408

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \        0x0   0x5802'541C        DC32     0x5802541c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \        0x0   0x5802'5430        DC32     0x58025430

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \        0x0   0x5802'5444        DC32     0x58025444

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \        0x0   0x5802'5458        DC32     0x58025458

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \        0x0   0x5802'546C        DC32     0x5802546c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \        0x0   0x5802'5480        DC32     0x58025480

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \        0x0   0x5802'5494        DC32     0x58025494

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \        0x0   0x4002'04B8        DC32     0x400204b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \        0x0   0x4002'0010        DC32     0x40020010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \        0x0   0x4002'0028        DC32     0x40020028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \        0x0   0x4002'0040        DC32     0x40020040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \        0x0   0x4002'0058        DC32     0x40020058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \        0x0   0x4002'0070        DC32     0x40020070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \        0x0   0x4002'0088        DC32     0x40020088

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \        0x0   0x4002'00A0        DC32     0x400200a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \        0x0   0x4002'00B8        DC32     0x400200b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \        0x0   0x4002'0410        DC32     0x40020410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \        0x0   0x4002'0428        DC32     0x40020428

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \        0x0   0x4002'0440        DC32     0x40020440

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \        0x0   0x4002'0458        DC32     0x40020458

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \        0x0   0x4002'0470        DC32     0x40020470

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \        0x0   0x4002'0488        DC32     0x40020488

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_14:
   \        0x0   0x4002'04A0        DC32     0x400204a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_15:
   \        0x0   0x4002'04B8        DC32     0x400204b8
    699          
    700          /**
    701            * @}
    702            */
    703          
    704          #endif /* HAL_DMA_MODULE_ENABLED */
    705          /**
    706            * @}
    707            */
    708          
    709          /**
    710            * @}
    711            */
    712          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   DMA_MultiBufferSetConfig
       4   HAL_DMAEx_ChangeMemory
       4   HAL_DMAEx_ConfigMuxRequestGenerator
       8   HAL_DMAEx_ConfigMuxSync
       0   HAL_DMAEx_DisableMuxRequestGenerator
       0   HAL_DMAEx_EnableMuxRequestGenerator
       8   HAL_DMAEx_MUX_IRQHandler
         8   -- Indirect call
      24   HAL_DMAEx_MultiBufferStart
        24   -> DMA_MultiBufferSetConfig
      24   HAL_DMAEx_MultiBufferStart_IT
        24   -> DMA_MultiBufferSetConfig


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
       4  ??DataTable4
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_14
       4  ??DataTable5_15
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
     204  DMA_MultiBufferSetConfig
     182  HAL_DMAEx_ChangeMemory
     234  HAL_DMAEx_ConfigMuxRequestGenerator
     270  HAL_DMAEx_ConfigMuxSync
      34  HAL_DMAEx_DisableMuxRequestGenerator
      34  HAL_DMAEx_EnableMuxRequestGenerator
     108  HAL_DMAEx_MUX_IRQHandler
     778  HAL_DMAEx_MultiBufferStart
   1'284  HAL_DMAEx_MultiBufferStart_IT

 
 3'288 bytes in section .text
 
 3'288 bytes of CODE memory

Errors: none
Warnings: none
