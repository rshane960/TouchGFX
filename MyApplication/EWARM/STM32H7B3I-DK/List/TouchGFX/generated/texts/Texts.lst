###############################################################################
#
# IAR ANSI C/C++ Compiler V9.20.1.318/W64 for ARM         09/Feb/2022  10:51:33
# Copyright 1999-2021 IAR Systems AB.
#
#    Cpu mode           =  thumb
#    Endian             =  little
#    Source file        =
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\TouchGFX\generated\texts\src\Texts.cpp
#        [UTF-8]
#    Command line       =
#        -f
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\TouchGFX\generated\texts\Texts.o.rsp
#        (D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\TouchGFX\generated\texts\src\Texts.cpp
#        -D USE_HAL_DRIVER -D STM32H7B3xxQ -D USE_BPP=24 -lC
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\TouchGFX\generated\texts
#        -lA
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\TouchGFX\generated\texts
#        -o
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\TouchGFX\generated\texts
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.0\arm\inc\c\DLib_Config_Full.h" -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Core/Inc\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/App\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/target/generated\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/target\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/STM32H7xx_HAL_Driver/Inc\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/STM32H7xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM4F\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/CMSIS/Device/ST/STM32H7xx/Include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/BSP/Components/Common\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/BSP/STM32H7B3I-DK\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Middlewares/ST/touchgfx/framework/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/fonts/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/gui_generated/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/images/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/texts/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/gui/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/videos/include\
#        -Ol --c++ --no_exceptions --no_rtti --no_static_destruction
#        --source_encoding utf8 --text_out utf8 --utf8_text_in)
#        --dependencies=n
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\TouchGFX\generated\texts\Texts.o.d
#    Locale             =  C
#    List file          =
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\TouchGFX\generated\texts\Texts.lst
#    Object file        =
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\TouchGFX\generated\texts\Texts.o
#    Runtime model:        
#      __CPP_Exceptions =  Disabled
#      __CPP_Language   =  C++14
#      __CPP_Library    =  DLib
#      __CPP_Runtime    =  1
#      __SystemLibrary  =  DLib
#      __dlib_version   =  6
#
###############################################################################

D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\TouchGFX\generated\texts\src\Texts.cpp
      1          /* DO NOT EDIT THIS FILE */
      2          /* This file is autogenerated by the text-database code generator */
      3          
      4          #include <stdarg.h>
      5          #include <touchgfx/TextProvider.hpp>

   \                                 In section .text, align 2
   \   __vfp touchgfx::Font::~Font() noexcept
   \                     _ZN8touchgfx4FontD1Ev: (+1)
   \        0x0   0x4770             BX       LR

   \                                 In section .text, align 2
   \   __vfp touchgfx::Font::deleter ~Font() noexcept
   \                     _ZN8touchgfx4FontD0Ev: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x.... 0x....      BL       _ZN8touchgfx4FontD1Ev
   \        0xA   0x2110             MOVS     R1,#+16
   \        0xC   0x0020             MOVS     R0,R4
   \        0xE   0x.... 0x....      BL       _ZdlPvj
   \       0x12   0xBD10             POP      {R4,PC}

   \                                 In section .text, align 2
   \   __vfp touchgfx::GlyphNode const *touchgfx::Font::getGlyph(uint16_t) const
   \                     _ZNK8touchgfx4Font8getGlyphEt: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
   \        0x2   0x000A             MOVS     R2,R1
   \        0x4   0xB292             UXTH     R2,R2
   \        0x6   0x2A00             CMP      R2,#+0
   \        0x8   0xD101             BNE.N    ??getGlyph_0
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0xE00A             B.N      ??getGlyph_1
   \                     ??getGlyph_0: (+1)
   \        0xE   0x2200             MOVS     R2,#+0
   \       0x10   0x9201             STR      R2,[SP, #+4]
   \       0x12   0x2200             MOVS     R2,#+0
   \       0x14   0xF88D 0x2000      STRB     R2,[SP, #+0]
   \       0x18   0x466B             MOV      R3,SP
   \       0x1A   0xAA01             ADD      R2,SP,#+4
   \       0x1C   0xB289             UXTH     R1,R1
   \       0x1E   0x6804             LDR      R4,[R0, #+0]
   \       0x20   0x68A4             LDR      R4,[R4, #+8]
   \       0x22   0x47A0             BLX      R4
   \                     ??getGlyph_1: (+1)
   \       0x24   0xBD16             POP      {R1,R2,R4,PC}

   \                                 In section .text, align 2
   \   __vfp uint16_t touchgfx::Font::getFallbackChar() const
   \                     _ZNK8touchgfx4Font15getFallbackCharEv: (+1)
   \        0x0   0x8940             LDRH     R0,[R0, #+10]
   \        0x2   0x4770             BX       LR

   \                                 In section .text, align 2
   \   __vfp uint16_t touchgfx::Font::getEllipsisChar() const
   \                     _ZNK8touchgfx4Font15getEllipsisCharEv: (+1)
   \        0x0   0x8980             LDRH     R0,[R0, #+12]
   \        0x2   0x4770             BX       LR

   \                                 In section .text, align 2
   \   __vfp uint16_t touchgfx::Font::getFontHeight() const
   \                     _ZNK8touchgfx4Font13getFontHeightEv: (+1)
   \        0x0   0x8880             LDRH     R0,[R0, #+4]
   \        0x2   0x4770             BX       LR

   \                                 In section .text, align 2
   \   __vfp uint16_t touchgfx::Font::getMinimumTextHeight() const
   \                     _ZNK8touchgfx4Font20getMinimumTextHeightEv: (+1)
   \        0x0   0x8881             LDRH     R1,[R0, #+4]
   \        0x2   0x7980             LDRB     R0,[R0, #+6]
   \        0x4   0x1808             ADDS     R0,R1,R0
   \        0x6   0xB280             UXTH     R0,R0
   \        0x8   0x4770             BX       LR

   \                                 In section .text, align 2
   \   __vfp uint8_t touchgfx::Font::getBitsPerPixel() const
   \                     _ZNK8touchgfx4Font15getBitsPerPixelEv: (+1)
   \        0x0   0x79C0             LDRB     R0,[R0, #+7]
   \        0x2   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \        0x6   0x4770             BX       LR

   \                                 In section .text, align 2
   \   __vfp uint8_t touchgfx::Font::getByteAlignRow() const
   \                     _ZNK8touchgfx4Font15getByteAlignRowEv: (+1)
   \        0x0   0x79C0             LDRB     R0,[R0, #+7]
   \        0x2   0xB2C0             UXTB     R0,R0
   \        0x4   0x09C0             LSRS     R0,R0,#+7
   \        0x6   0x4770             BX       LR

   \                                 In section .text, align 2
   \   __vfp int8_t touchgfx::Font::getKerning(uint16_t, touchgfx::GlyphNode const *) const
   \                     _ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR

   \                                 In section .text, align 2
   \   __vfp uint16_t const *touchgfx::Font::getGSUBTable() const
   \                     _ZNK8touchgfx4Font12getGSUBTableEv: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR

   \                                 In section .text, align 2
   \   __vfp touchgfx::FontContextualFormsTable const *touchgfx::Font::getContextualFormsTable() const
   \                     _ZNK8touchgfx4Font23getContextualFormsTableEv: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR
      6          #include <touchgfx/Texts.hpp>
      7          #include <touchgfx/TypedText.hpp>

   \                                 In section .text, align 4
   \   __vfp void touchgfx::TypedText::registerTypedTextDatabase(touchgfx::TypedText::TypedTextData const *, touchgfx::Font const *const *, uint16_t)
   \                     _ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt: (+1)
   \        0x0   0x4B03             LDR.N    R3,??registerTypedTextDatabase_0
   \        0x2   0x6018             STR      R0,[R3, #+0]
   \        0x4   0x4803             LDR.N    R0,??registerTypedTextDatabase_0+0x4
   \        0x6   0x6001             STR      R1,[R0, #+0]
   \        0x8   0x4803             LDR.N    R0,??registerTypedTextDatabase_0+0x8
   \        0xA   0x8002             STRH     R2,[R0, #+0]
   \        0xC   0x4770             BX       LR
   \        0xE   0xBF00             Nop
   \                     ??registerTypedTextDatabase_0:
   \       0x10   0x....'....        DC32     _ZN8touchgfx9TypedText10typedTextsE
   \       0x14   0x....'....        DC32     _ZN8touchgfx9TypedText5fontsE
   \       0x18   0x....'....        DC32     _ZN8touchgfx9TypedText18numberOfTypedTextsE
      8          #include <touchgfx/Unicode.hpp>
      9          #include <touchgfx/hal/HAL.hpp>
     10          #include <touchgfx/lcd/LCD.hpp>
     11          #include <texts/TypedTextDatabase.hpp>
     12          

   \                                 In section .text, align 2, keep-with-next
     13          uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
     14          {
   \                     _ZNK8touchgfx4Font14getStringWidthEPKtz: (+1)
   \        0x0   0xB40C             PUSH     {R2,R3}
   \        0x2   0xB580             PUSH     {R7,LR}
   \        0x4   0x000A             MOVS     R2,R1
     15              va_list pArg;
     16              va_start(pArg, text);
   \        0x6   0xAB02             ADD      R3,SP,#+8
     17              uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
   \        0x8   0x2100             MOVS     R1,#+0
   \        0xA   0x.... 0x....      BL       _ZNK8touchgfx4Font17getStringWidthLTREhPKt9__va_list
     18              va_end(pArg);
     19              return width;
   \        0xE   0xB280             UXTH     R0,R0
   \       0x10   0xBC02             POP      {R1}
   \       0x12   0xF85D 0xFB0C      LDR      PC,[SP], #+12
     20          }
     21          

   \                                 In section .text, align 2, keep-with-next
     22          uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
     23          {
   \                     _ZNK8touchgfx4Font14getStringWidthEhPKtz: (+1)
   \        0x0   0xB408             PUSH     {R3}
   \        0x2   0xB500             PUSH     {LR}
     24              va_list pArg;
     25              va_start(pArg, text);
   \        0x4   0xAB01             ADD      R3,SP,#+4
     26              uint16_t width = getStringWidthLTR(textDirection, text, pArg);
   \        0x6   0xB2C9             UXTB     R1,R1
   \        0x8   0x.... 0x....      BL       _ZNK8touchgfx4Font17getStringWidthLTREhPKt9__va_list
     27              va_end(pArg);
     28              return width;
   \        0xC   0xB280             UXTH     R0,R0
   \        0xE   0xF85D 0xFB08      LDR      PC,[SP], #+8
     29          }
     30          

   \                                 In section .text, align 2, keep-with-next
     31          touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
     32          {
   \                     _ZN8touchgfx12TextProvider15getNextLigatureEh: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
     33              if (fontGsubTable && nextCharacters.peekChar())
   \        0x4   0x6C60             LDR      R0,[R4, #+68]
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD061             BEQ.N    ??getNextLigature_0
   \        0xA   0xF114 0x0522      ADDS     R5,R4,#+34
   \        0xE   0x8AE8             LDRH     R0,[R5, #+22]
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD106             BNE.N    ??getNextLigature_1
   \       0x14   0x22C0             MOVS     R2,#+192
   \       0x16   0x....             LDR.N    R1,??DataTable4
   \       0x18   0x....             LDR.N    R0,??DataTable4_1
   \       0x1A   0x.... 0x....      BL       __aeabi_assert
   \       0x1E   0x.... 0x....      BL       __iar_EmptyStepPoint
   \                     ??getNextLigature_1: (+1)
   \       0x22   0x8AA8             LDRH     R0,[R5, #+20]
   \       0x24   0xF835 0x0010      LDRH     R0,[R5, R0, LSL #+1]
   \       0x28   0xB280             UXTH     R0,R0
   \       0x2A   0x2800             CMP      R0,#+0
   \       0x2C   0xD04F             BEQ.N    ??getNextLigature_0
     34              {
     35                  substituteGlyphs();
   \       0x2E   0x0020             MOVS     R0,R4
   \       0x30   0x.... 0x....      BL       _ZN8touchgfx12TextProvider16substituteGlyphsEv
     36                  if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
   \       0x34   0x2501             MOVS     R5,#+1
   \       0x36   0xF114 0x0622      ADDS     R6,R4,#+34
   \       0x3A   0x0028             MOVS     R0,R5
   \       0x3C   0x8AF1             LDRH     R1,[R6, #+22]
   \       0x3E   0xB280             UXTH     R0,R0
   \       0x40   0x4288             CMP      R0,R1
   \       0x42   0xD306             BCC.N    ??getNextLigature_2
   \       0x44   0x22C5             MOVS     R2,#+197
   \       0x46   0x....             LDR.N    R1,??DataTable4_2
   \       0x48   0x....             LDR.N    R0,??DataTable4_3
   \       0x4A   0x.... 0x....      BL       __aeabi_assert
   \       0x4E   0x.... 0x....      BL       __iar_EmptyStepPoint
   \                     ??getNextLigature_2: (+1)
   \       0x52   0x8AB0             LDRH     R0,[R6, #+20]
   \       0x54   0x182D             ADDS     R5,R5,R0
   \       0x56   0x0028             MOVS     R0,R5
   \       0x58   0xB280             UXTH     R0,R0
   \       0x5A   0x280A             CMP      R0,#+10
   \       0x5C   0xD201             BCS.N    ??getNextLigature_3
   \       0x5E   0xB2AD             UXTH     R5,R5
   \       0x60   0xE001             B.N      ??getNextLigature_4
   \                     ??getNextLigature_3: (+1)
   \       0x62   0xB2AD             UXTH     R5,R5
   \       0x64   0x3D0A             SUBS     R5,R5,#+10
   \                     ??getNextLigature_4: (+1)
   \       0x66   0xF836 0x0015      LDRH     R0,[R6, R5, LSL #+1]
   \       0x6A   0xF640 0x153F      MOVW     R5,#+2367
   \       0x6E   0x0029             MOVS     R1,R5
   \       0x70   0xB280             UXTH     R0,R0
   \       0x72   0x4288             CMP      R0,R1
   \       0x74   0xD12B             BNE.N    ??getNextLigature_0
     37                  {
     38                      nextCharacters.replaceAt1(nextCharacters.peekChar());
   \       0x76   0xF114 0x0622      ADDS     R6,R4,#+34
   \       0x7A   0x8AF0             LDRH     R0,[R6, #+22]
   \       0x7C   0x2800             CMP      R0,#+0
   \       0x7E   0xD106             BNE.N    ??getNextLigature_5
   \       0x80   0x22C0             MOVS     R2,#+192
   \       0x82   0x....             LDR.N    R1,??DataTable4
   \       0x84   0x....             LDR.N    R0,??DataTable4_1
   \       0x86   0x.... 0x....      BL       __aeabi_assert
   \       0x8A   0x.... 0x....      BL       __iar_EmptyStepPoint
   \                     ??getNextLigature_5: (+1)
   \       0x8E   0x8AB0             LDRH     R0,[R6, #+20]
   \       0x90   0xF836 0x6010      LDRH     R6,[R6, R0, LSL #+1]
   \       0x94   0xF114 0x0722      ADDS     R7,R4,#+34
   \       0x98   0x8AF8             LDRH     R0,[R7, #+22]
   \       0x9A   0x2802             CMP      R0,#+2
   \       0x9C   0xDA07             BGE.N    ??getNextLigature_6
   \       0x9E   0xF240 0x120D      MOVW     R2,#+269
   \       0xA2   0x....             LDR.N    R1,??DataTable4_4
   \       0xA4   0x....             LDR.N    R0,??DataTable4_5
   \       0xA6   0x.... 0x....      BL       __aeabi_assert
   \       0xAA   0x.... 0x....      BL       __iar_EmptyStepPoint
   \                     ??getNextLigature_6: (+1)
   \       0xAE   0x8AB8             LDRH     R0,[R7, #+20]
   \       0xB0   0x1C40             ADDS     R0,R0,#+1
   \       0xB2   0x0001             MOVS     R1,R0
   \       0xB4   0xB289             UXTH     R1,R1
   \       0xB6   0x290A             CMP      R1,#+10
   \       0xB8   0xD201             BCS.N    ??getNextLigature_7
   \       0xBA   0xB280             UXTH     R0,R0
   \       0xBC   0xE000             B.N      ??getNextLigature_8
   \                     ??getNextLigature_7: (+1)
   \       0xBE   0x2000             MOVS     R0,#+0
   \                     ??getNextLigature_8: (+1)
   \       0xC0   0xF827 0x6010      STRH     R6,[R7, R0, LSL #+1]
     39                      nextCharacters.replaceAt0(0x093F);
   \       0xC4   0xF114 0x0022      ADDS     R0,R4,#+34
   \       0xC8   0x8A81             LDRH     R1,[R0, #+20]
   \       0xCA   0xF820 0x5011      STRH     R5,[R0, R1, LSL #+1]
     40                  }
     41              }
     42              return getNextChar();
   \                     ??getNextLigature_0: (+1)
   \       0xCE   0x0020             MOVS     R0,R4
   \       0xD0   0x.... 0x....      BL       _ZN8touchgfx12TextProvider11getNextCharEv
   \       0xD4   0xBDF2             POP      {R1,R4-R7,PC}
     43          }
     44          

   \                                 In section .text, align 2, keep-with-next
     45          void touchgfx::TextProvider::initializeInternal()
     46          {
   \                     _ZN8touchgfx12TextProvider18initializeInternalEv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     47              fillInputBuffer();
   \        0x2   0x.... 0x....      BL       _ZN8touchgfx12TextProvider15fillInputBufferEv
     48          }
   \        0x6   0xBD01             POP      {R0,PC}
     49          

   \                                 In section .text, align 2, keep-with-next
     50          void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
     51          {
   \                     _ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz: (+1)
   \        0x0   0xB507             PUSH     {R0-R2,LR}
   \        0x2   0xB082             SUB      SP,SP,#+8
   \        0x4   0x001A             MOVS     R2,R3
   \        0x6   0x9B06             LDR      R3,[SP, #+24]
     52              va_list pArg;
     53              va_start(pArg, format);
   \        0x8   0xA908             ADD      R1,SP,#+32
     54              drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
   \        0xA   0x9101             STR      R1,[SP, #+4]
   \        0xC   0x9907             LDR      R1,[SP, #+28]
   \        0xE   0x9100             STR      R1,[SP, #+0]
   \       0x10   0xA903             ADD      R1,SP,#+12
   \       0x12   0x.... 0x....      BL       _ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKt9__va_list
     55              va_end(pArg);
     56          }
   \       0x16   0xB005             ADD      SP,SP,#+20
   \       0x18   0xBD00             POP      {PC}
     57          
     58          //Default typed text database
     59          extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];
     60          
     61          TEXT_LOCATION_FLASH_PRAGMA

   \                                 In section TextFlashSection, align 4, root
     62          KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE = {
   \                     texts_all_languages:
   \        0x0   0x0073 0x0063      DC16 115, 99, 114, 101, 101, 110, 49, 0, 115, 99, 114, 101, 101, 110

   \               0x0072 0x006

   \              5 0x0065 0x00

   \              6E 0x0031 0x0

   \              000 0x0073 0x

   \              0063 0x0072 0

   \              x0065 0x0065 

   \              0x006E
   \       0x1C   0x0032 0x0000      DC16 50, 0, 65, 0, 66, 0

   \               0x0041 0x000

   \              0 0x0042 0x00

   \              00
     63              0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x31, 0x0, // @0 "screen1"
     64              0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x32, 0x0, // @8 "screen2"
     65              0x41, 0x0, // @16 "A"
     66              0x42, 0x0 // @18 "B"
     67          };
     68          TEXT_LOCATION_FLASH_PRAGMA
     69          KEEP extern uint32_t const indicesGb[] TEXT_LOCATION_FLASH_ATTRIBUTE;
     70          
     71          //array holding dynamically installed languages
     72          struct TranslationHeader
     73          {
     74              uint32_t offset_to_texts;
     75              uint32_t offset_to_indices;
     76              uint32_t offset_to_typedtext;
     77          };

   \                                 In section .bss, align 4
     78          static const TranslationHeader* languagesArray[1] = { 0 };
   \                     languagesArray:
   \        0x0                      DS8 4
     79          
     80          //Compiled and linked in languages

   \                                 In section .rodata, align 4
     81          static const uint32_t* const staticLanguageIndices[] = {
   \                     staticLanguageIndices:
   \        0x0   0x....'....        DC32 indicesGb
     82              indicesGb
     83          };
     84          

   \                                 In section .bss, align 2
     85          touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
   \                     _ZN8touchgfx5Texts15currentLanguageE:
   \        0x0                      DS8 2

   \                                 In section .bss, align 4
     86          static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
   \                     currentLanguagePtr:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
     87          static const uint32_t* currentLanguageIndices = 0;
   \                     currentLanguageIndices:
   \        0x0                      DS8 4
     88          

   \                                 In section .text, align 2, keep-with-next
     89          void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
     90          {
   \                     _ZN8touchgfx5Texts11setLanguageEt: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
     91              const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
   \        0x2   0x2400             MOVS     R4,#+0
     92              if (id < 1)
   \        0x4   0x0001             MOVS     R1,R0
   \        0x6   0xB289             UXTH     R1,R1
   \        0x8   0x2900             CMP      R1,#+0
   \        0xA   0xD125             BNE.N    ??setLanguage_0
     93              {
     94                  if (languagesArray[id] != 0)
   \        0xC   0x....             LDR.N    R2,??DataTable4_6
   \        0xE   0x0001             MOVS     R1,R0
   \       0x10   0xB289             UXTH     R1,R1
   \       0x12   0xF852 0x1021      LDR      R1,[R2, R1, LSL #+2]
   \       0x16   0x2900             CMP      R1,#+0
   \       0x18   0xD00F             BEQ.N    ??setLanguage_1
     95                  {
     96                      // Dynamic translation is added
     97                      const TranslationHeader* translation = languagesArray[id];
   \       0x1A   0x0001             MOVS     R1,R0
   \       0x1C   0xB289             UXTH     R1,R1
   \       0x1E   0xF852 0x1021      LDR      R1,[R2, R1, LSL #+2]
     98                      currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
   \       0x22   0x680A             LDR      R2,[R1, #+0]
   \       0x24   0x440A             ADD      R2,R1,R2
   \       0x26   0x....             LDR.N    R3,??DataTable4_7
   \       0x28   0x601A             STR      R2,[R3, #+0]
     99                      currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
   \       0x2A   0x684A             LDR      R2,[R1, #+4]
   \       0x2C   0x440A             ADD      R2,R1,R2
   \       0x2E   0x....             LDR.N    R3,??DataTable4_8
   \       0x30   0x601A             STR      R2,[R3, #+0]
    100                      currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
   \       0x32   0x688A             LDR      R2,[R1, #+8]
   \       0x34   0xEB01 0x0402      ADD      R4,R1,R2
   \       0x38   0xE00E             B.N      ??setLanguage_0
    101                  }
    102                  else
    103                  {
    104                      // Compiled and linked in languages
    105                      currentLanguagePtr = texts_all_languages;
   \                     ??setLanguage_1: (+1)
   \       0x3A   0x....             LDR.N    R1,??DataTable4_9
   \       0x3C   0x....             LDR.N    R2,??DataTable4_7
   \       0x3E   0x6011             STR      R1,[R2, #+0]
    106                      currentLanguageIndices = staticLanguageIndices[id];
   \       0x40   0x....             LDR.N    R1,??DataTable4_10
   \       0x42   0x0002             MOVS     R2,R0
   \       0x44   0xB292             UXTH     R2,R2
   \       0x46   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
   \       0x4A   0x....             LDR.N    R2,??DataTable4_8
   \       0x4C   0x6011             STR      R1,[R2, #+0]
    107                      currentLanguageTypedText = typedTextDatabaseArray[id];
   \       0x4E   0x....             LDR.N    R1,??DataTable4_11
   \       0x50   0x0002             MOVS     R2,R0
   \       0x52   0xB292             UXTH     R2,R2
   \       0x54   0xF851 0x4022      LDR      R4,[R1, R2, LSL #+2]
    108                  }
    109              }
    110          
    111              if (currentLanguageTypedText)
   \                     ??setLanguage_0: (+1)
   \       0x58   0x2C00             CMP      R4,#+0
   \       0x5A   0xD00C             BEQ.N    ??setLanguage_2
    112              {
    113                  currentLanguage = id;
   \       0x5C   0x....             LDR.N    R1,??DataTable4_12
   \       0x5E   0x8008             STRH     R0,[R1, #+0]
    114                  touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
    115                                                                 TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
   \       0x60   0x.... 0x....      BL       _ZN17TypedTextDatabase15getInstanceSizeEv
   \       0x64   0x0005             MOVS     R5,R0
   \       0x66   0x.... 0x....      BL       _ZN17TypedTextDatabase8getFontsEv
   \       0x6A   0x0001             MOVS     R1,R0
   \       0x6C   0x002A             MOVS     R2,R5
   \       0x6E   0xB292             UXTH     R2,R2
   \       0x70   0x0020             MOVS     R0,R4
   \       0x72   0x.... 0x....      BL       _ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt
    116              }
    117          }
   \                     ??setLanguage_2: (+1)
   \       0x76   0xBD31             POP      {R0,R4,R5,PC}
    118          

   \                                 In section .text, align 2, keep-with-next
    119          void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
    120          {
    121              languagesArray[id] = (const TranslationHeader*)translation;
   \                     _ZN8touchgfx5Texts14setTranslationEtPKv: (+1)
   \        0x0   0x....             LDR.N    R2,??DataTable4_6
   \        0x2   0xB280             UXTH     R0,R0
   \        0x4   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
    122          }
   \        0x8   0x4770             BX       LR
    123          

   \                                 In section .text, align 2, keep-with-next
    124          const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
    125          {
    126              return &currentLanguagePtr[currentLanguageIndices[id]];
   \                     _ZNK8touchgfx5Texts7getTextEt: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable4_7
   \        0x2   0x6800             LDR      R0,[R0, #+0]
   \        0x4   0x....             LDR.N    R2,??DataTable4_8
   \        0x6   0x6812             LDR      R2,[R2, #+0]
   \        0x8   0xB289             UXTH     R1,R1
   \        0xA   0xF852 0x1021      LDR      R1,[R2, R1, LSL #+2]
   \        0xE   0xEB00 0x0041      ADD      R0,R0,R1, LSL #+1
   \       0x12   0x4770             BX       LR
    127          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \        0x0   0x....'....        DC32     _ZZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEvEs_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \        0x0   0x....'....        DC32     _ZZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEvEs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \        0x0   0x....'....        DC32     _ZZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEtEs_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \        0x0   0x....'....        DC32     _ZZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEtEs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \        0x0   0x....'....        DC32     _ZZN8touchgfx12TextProvider14circularBufferILj10EE10replaceAt1EtEs_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \        0x0   0x....'....        DC32     _ZZN8touchgfx12TextProvider14circularBufferILj10EE10replaceAt1EtEs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \        0x0   0x....'....        DC32     languagesArray

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \        0x0   0x....'....        DC32     currentLanguagePtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \        0x0   0x....'....        DC32     currentLanguageIndices

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \        0x0   0x....'....        DC32     texts_all_languages

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \        0x0   0x....'....        DC32     staticLanguageIndices

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \        0x0   0x....'....        DC32     typedTextDatabaseArray

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \        0x0   0x....'....        DC32     _ZN8touchgfx5Texts15currentLanguageE

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   touchgfx::Font::deleter ~Font() noexcept
         8   -> operator delete(void *, unsigned int) noexcept
         8   -> touchgfx::Font::~Font() noexcept
       0   touchgfx::Font::getBitsPerPixel() const
       0   touchgfx::Font::getByteAlignRow() const
       0   touchgfx::Font::getContextualFormsTable() const
       0   touchgfx::Font::getEllipsisChar() const
       0   touchgfx::Font::getFallbackChar() const
       0   touchgfx::Font::getFontHeight() const
       0   touchgfx::Font::getGSUBTable() const
      16   touchgfx::Font::getGlyph(uint16_t) const
        16   -- Indirect call
       0   touchgfx::Font::getKerning(uint16_t, touchgfx::GlyphNode const *) const
       0   touchgfx::Font::getMinimumTextHeight() const
      16   touchgfx::Font::getStringWidth(uint16_t const *, ...) const
        16   -> touchgfx::Font::getStringWidthLTR(uint8_t, uint16_t const *, va_list) const
       8   touchgfx::Font::getStringWidth(uint8_t, uint16_t const *, ...) const
         8   -> touchgfx::Font::getStringWidthLTR(uint8_t, uint16_t const *, va_list) const
       0   touchgfx::Font::~Font() noexcept
      24   touchgfx::LCD::drawString(touchgfx::Rect, touchgfx::Rect const &, touchgfx::LCD::StringVisuals const &, uint16_t const *, ...)
        24   -> touchgfx::LCD::drawStringLTR(touchgfx::Rect const &, touchgfx::Rect const &, touchgfx::LCD::StringVisuals const &, uint16_t const *, va_list)
      24   touchgfx::TextProvider::getNextLigature(uint8_t)
        24   -> __aeabi_assert
        24   -> __iar_EmptyStepPoint
        24   -> touchgfx::TextProvider::getNextChar()
        24   -> touchgfx::TextProvider::substituteGlyphs()
       8   touchgfx::TextProvider::initializeInternal()
         8   -> touchgfx::TextProvider::fillInputBuffer()
       0   touchgfx::Texts::getText(uint16_t) const
      16   touchgfx::Texts::setLanguage(uint16_t)
        16   -> TypedTextDatabase::getFonts()
        16   -> TypedTextDatabase::getInstanceSize()
        16   -> touchgfx::TypedText::registerTypedTextDatabase(touchgfx::TypedText::TypedTextData const *, touchgfx::Font const *const *, uint16_t)
       0   touchgfx::Texts::setTranslation(uint16_t, void const *)
       0   touchgfx::TypedText::registerTypedTextDatabase(touchgfx::TypedText::TypedTextData const *, touchgfx::Font const *const *, uint16_t)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
       4  currentLanguageIndices
       4  currentLanguagePtr
       4  languagesArray
       4  staticLanguageIndices
      40  texts_all_languages
      20  touchgfx::Font::deleter ~Font() noexcept
       8  touchgfx::Font::getBitsPerPixel() const
       8  touchgfx::Font::getByteAlignRow() const
       4  touchgfx::Font::getContextualFormsTable() const
       4  touchgfx::Font::getEllipsisChar() const
       4  touchgfx::Font::getFallbackChar() const
       4  touchgfx::Font::getFontHeight() const
       4  touchgfx::Font::getGSUBTable() const
      38  touchgfx::Font::getGlyph(uint16_t) const
       4  touchgfx::Font::getKerning(uint16_t, touchgfx::GlyphNode const *) const
      10  touchgfx::Font::getMinimumTextHeight() const
      22  touchgfx::Font::getStringWidth(uint16_t const *, ...) const
      18  touchgfx::Font::getStringWidth(uint8_t, uint16_t const *, ...) const
       2  touchgfx::Font::~Font() noexcept
      26  touchgfx::LCD::drawString(touchgfx::Rect, touchgfx::Rect const &, touchgfx::LCD::StringVisuals const &, uint16_t const *, ...)
     214  touchgfx::TextProvider::getNextLigature(uint8_t)
       8  touchgfx::TextProvider::initializeInternal()
       2  touchgfx::Texts::currentLanguage
      20  touchgfx::Texts::getText(uint16_t) const
     120  touchgfx::Texts::setLanguage(uint16_t)
      10  touchgfx::Texts::setTranslation(uint16_t, void const *)
      28  touchgfx::TypedText::registerTypedTextDatabase(touchgfx::TypedText::TypedTextData const *, touchgfx::Font const *const *, uint16_t)
     548  -- Other

 
  14 bytes in section .bss
 552 bytes in section .rodata
 628 bytes in section .text
  40 bytes in section TextFlashSection
 
 490 bytes of CODE  memory (+ 138 bytes shared)
  44 bytes of CONST memory (+ 548 bytes shared)
  14 bytes of DATA  memory

Errors: none
Warnings: none
