###############################################################################
#
# IAR ANSI C/C++ Compiler V9.20.1.318/W64 for ARM         09/Feb/2022  10:51:28
# Copyright 1999-2021 IAR Systems AB.
#
#    Cpu mode           =  thumb
#    Endian             =  little
#    Source file        =
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\TouchGFX\generated\fonts\src\FontCache.cpp
#        [UTF-8]
#    Command line       =
#        -f
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\TouchGFX\generated\fonts\FontCache.o.rsp
#        (D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\TouchGFX\generated\fonts\src\FontCache.cpp
#        -D USE_HAL_DRIVER -D STM32H7B3xxQ -D USE_BPP=24 -lC
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\TouchGFX\generated\fonts
#        -lA
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\TouchGFX\generated\fonts
#        -o
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\TouchGFX\generated\fonts
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.0\arm\inc\c\DLib_Config_Full.h" -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Core/Inc\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/App\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/target/generated\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/target\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/STM32H7xx_HAL_Driver/Inc\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/STM32H7xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM4F\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/CMSIS/Device/ST/STM32H7xx/Include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/BSP/Components/Common\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Drivers/BSP/STM32H7B3I-DK\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../Middlewares/ST/touchgfx/framework/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/fonts/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/gui_generated/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/images/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/texts/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/gui/include\
#        -I
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/videos/include\
#        -Ol --c++ --no_exceptions --no_rtti --no_static_destruction
#        --source_encoding utf8 --text_out utf8 --utf8_text_in)
#        --dependencies=n
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\TouchGFX\generated\fonts\FontCache.o.d
#    Locale             =  C
#    List file          =
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\TouchGFX\generated\fonts\FontCache.lst
#    Object file        =
#        D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\TouchGFX\generated\fonts\FontCache.o
#    Runtime model:        
#      __CPP_Exceptions =  Disabled
#      __CPP_Language   =  C++14
#      __CPP_Library    =  DLib
#      __CPP_Runtime    =  1
#      __SystemLibrary  =  DLib
#      __dlib_version   =  6
#
###############################################################################

D:\001_Project\B_TouchGFX_Stm32\TouchGFX\MyApplication\TouchGFX\generated\fonts\src\FontCache.cpp
      1          /* DO NOT EDIT THIS FILE */
      2          /* This file is autogenerated by the text-database code generator */
      3          
      4          #include <cstring>
      5          #include <touchgfx/TextProvider.hpp>

   \                                 In section .text, align 2
   \   __vfp touchgfx::Font &touchgfx::Font::operator=(touchgfx::Font const &) noexcept
   \                     _ZN8touchgfx4FontaSERKS0_: (+1)
   \        0x0   0x888A             LDRH     R2,[R1, #+4]
   \        0x2   0x8082             STRH     R2,[R0, #+4]
   \        0x4   0x798A             LDRB     R2,[R1, #+6]
   \        0x6   0x7182             STRB     R2,[R0, #+6]
   \        0x8   0x79CA             LDRB     R2,[R1, #+7]
   \        0xA   0x79C3             LDRB     R3,[R0, #+7]
   \        0xC   0xF362 0x0306      BFI      R3,R2,#+0,#+7
   \       0x10   0x71C3             STRB     R3,[R0, #+7]
   \       0x12   0x79C2             LDRB     R2,[R0, #+7]
   \       0x14   0xF012 0x027F      ANDS     R2,R2,#0x7F
   \       0x18   0x79CB             LDRB     R3,[R1, #+7]
   \       0x1A   0xF013 0x0380      ANDS     R3,R3,#0x80
   \       0x1E   0x431A             ORRS     R2,R3,R2
   \       0x20   0x71C2             STRB     R2,[R0, #+7]
   \       0x22   0x7A0A             LDRB     R2,[R1, #+8]
   \       0x24   0x7202             STRB     R2,[R0, #+8]
   \       0x26   0x7A4A             LDRB     R2,[R1, #+9]
   \       0x28   0x7242             STRB     R2,[R0, #+9]
   \       0x2A   0x894A             LDRH     R2,[R1, #+10]
   \       0x2C   0x8142             STRH     R2,[R0, #+10]
   \       0x2E   0x8989             LDRH     R1,[R1, #+12]
   \       0x30   0x8181             STRH     R1,[R0, #+12]
   \       0x32   0x4770             BX       LR
      6          #include <touchgfx/Utils.hpp>
      7          #include <fonts/CachedFont.hpp>

   \                                 In section .text, align 4
   \   __vfp touchgfx::TypedText::TypedText(touchgfx::TypedText const &) noexcept
   \                     _ZN8touchgfx9TypedTextC1ERKS0_: (+1)
   \        0x0   0x4A02             LDR.N    R2,??TypedText_0
   \        0x2   0x6002             STR      R2,[R0, #+0]
   \        0x4   0x8889             LDRH     R1,[R1, #+4]
   \        0x6   0x8081             STRH     R1,[R0, #+4]
   \        0x8   0x4770             BX       LR
   \        0xA   0xBF00             Nop
   \                     ??TypedText_0:
   \        0xC   0x....'....        DC32     _ZTVN8touchgfx9TypedTextE+0x8

   \                                 In section .text, align 2
   \   __vfp touchgfx::TypedText::~TypedText() noexcept
   \                     _ZN8touchgfx9TypedTextD1Ev: (+1)
   \        0x0   0x4770             BX       LR

   \                                 In section .text, align 2
   \   __vfp touchgfx::TypedText::deleter ~TypedText() noexcept
   \                     _ZN8touchgfx9TypedTextD0Ev: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x.... 0x....      BL       _ZN8touchgfx9TypedTextD1Ev
   \        0xA   0x2108             MOVS     R1,#+8
   \        0xC   0x0020             MOVS     R0,R4
   \        0xE   0x.... 0x....      BL       _ZdlPvj
   \       0x12   0xBD10             POP      {R4,PC}

   \                                 In section .text, align 2
   \   __vfp touchgfx::ConstFont &touchgfx::ConstFont::operator=(touchgfx::ConstFont &&) noexcept
   \                     _ZN8touchgfx9ConstFontaSEOS0_: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0029             MOVS     R1,R5
   \        0x8   0x0020             MOVS     R0,R4
   \        0xA   0x.... 0x....      BL       _ZN8touchgfx4FontaSERKS0_
   \        0xE   0x6928             LDR      R0,[R5, #+16]
   \       0x10   0x6120             STR      R0,[R4, #+16]
   \       0x12   0x8AA8             LDRH     R0,[R5, #+20]
   \       0x14   0x82A0             STRH     R0,[R4, #+20]
   \       0x16   0x0020             MOVS     R0,R4
   \       0x18   0xBD32             POP      {R1,R4,R5,PC}

   \                                 In section .text, align 2
   \   __vfp touchgfx::GeneratedFont &touchgfx::GeneratedFont::operator=(touchgfx::GeneratedFont &&) noexcept
   \                     _ZN8touchgfx13GeneratedFontaSEOS0_: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0029             MOVS     R1,R5
   \        0x8   0x0020             MOVS     R0,R4
   \        0xA   0x.... 0x....      BL       _ZN8touchgfx9ConstFontaSEOS0_
   \        0xE   0x69A8             LDR      R0,[R5, #+24]
   \       0x10   0x61A0             STR      R0,[R4, #+24]
   \       0x12   0x69E8             LDR      R0,[R5, #+28]
   \       0x14   0x61E0             STR      R0,[R4, #+28]
   \       0x16   0x6A28             LDR      R0,[R5, #+32]
   \       0x18   0x6220             STR      R0,[R4, #+32]
   \       0x1A   0x6A68             LDR      R0,[R5, #+36]
   \       0x1C   0x6260             STR      R0,[R4, #+36]
   \       0x1E   0x0020             MOVS     R0,R4
   \       0x20   0xBD32             POP      {R1,R4,R5,PC}

   \                                 In section .text, align 2
   \   __vfp touchgfx::CachedFont &touchgfx::CachedFont::operator=(touchgfx::CachedFont &&) noexcept
   \                     _ZN8touchgfx10CachedFontaSEOS0_: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0029             MOVS     R1,R5
   \        0x8   0x0020             MOVS     R0,R4
   \        0xA   0x.... 0x....      BL       _ZN8touchgfx13GeneratedFontaSEOS0_
   \        0xE   0x8D28             LDRH     R0,[R5, #+40]
   \       0x10   0x8520             STRH     R0,[R4, #+40]
   \       0x12   0x6AE8             LDR      R0,[R5, #+44]
   \       0x14   0x62E0             STR      R0,[R4, #+44]
   \       0x16   0x6B28             LDR      R0,[R5, #+48]
   \       0x18   0x6320             STR      R0,[R4, #+48]
   \       0x1A   0x0020             MOVS     R0,R4
   \       0x1C   0xBD32             POP      {R1,R4,R5,PC}

   \                                 In section .text, align 4
   \   __vfp touchgfx::CachedFont::CachedFont(touchgfx::BinaryFontData const *, uint16_t, touchgfx::FontCache *, touchgfx::GeneratedFont const *)
   \                     _ZN8touchgfx10CachedFontC1EPKNS_14BinaryFontDataEtPNS_9FontCacheEPKNS_13GeneratedFontE: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
   \        0x2   0xB08B             SUB      SP,SP,#+44
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x0015             MOVS     R5,R2
   \        0x8   0x001E             MOVS     R6,R3
   \        0xA   0x9F10             LDR      R7,[SP, #+64]
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0x900A             STR      R0,[SP, #+40]
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0x9009             STR      R0,[SP, #+36]
   \       0x14   0x8CC8             LDRH     R0,[R1, #+38]
   \       0x16   0x9008             STR      R0,[SP, #+32]
   \       0x18   0x8C88             LDRH     R0,[R1, #+36]
   \       0x1A   0x9007             STR      R0,[SP, #+28]
   \       0x1C   0x2000             MOVS     R0,#+0
   \       0x1E   0x9006             STR      R0,[SP, #+24]
   \       0x20   0x2000             MOVS     R0,#+0
   \       0x22   0x9005             STR      R0,[SP, #+20]
   \       0x24   0xF891 0x0023      LDRB     R0,[R1, #+35]
   \       0x28   0x9004             STR      R0,[SP, #+16]
   \       0x2A   0xF891 0x0022      LDRB     R0,[R1, #+34]
   \       0x2E   0x9003             STR      R0,[SP, #+12]
   \       0x30   0xF891 0x0021      LDRB     R0,[R1, #+33]
   \       0x34   0xB2C0             UXTB     R0,R0
   \       0x36   0x09C0             LSRS     R0,R0,#+7
   \       0x38   0x9002             STR      R0,[SP, #+8]
   \       0x3A   0xF891 0x0021      LDRB     R0,[R1, #+33]
   \       0x3E   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \       0x42   0x9001             STR      R0,[SP, #+4]
   \       0x44   0xF891 0x0020      LDRB     R0,[R1, #+32]
   \       0x48   0x9000             STR      R0,[SP, #+0]
   \       0x4A   0x8BCB             LDRH     R3,[R1, #+30]
   \       0x4C   0x8B8A             LDRH     R2,[R1, #+28]
   \       0x4E   0x2100             MOVS     R1,#+0
   \       0x50   0x0020             MOVS     R0,R4
   \       0x52   0x.... 0x....      BL       _ZN8touchgfx13GeneratedFontC2EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE
   \       0x56   0x4804             LDR.N    R0,??CachedFont_0
   \       0x58   0x6020             STR      R0,[R4, #+0]
   \       0x5A   0x8525             STRH     R5,[R4, #+40]
   \       0x5C   0x62E6             STR      R6,[R4, #+44]
   \       0x5E   0x6327             STR      R7,[R4, #+48]
   \       0x60   0x0020             MOVS     R0,R4
   \       0x62   0xB00B             ADD      SP,SP,#+44
   \       0x64   0xBDF0             POP      {R4-R7,PC}
   \       0x66   0xBF00             Nop
   \                     ??CachedFont_0:
   \       0x68   0x....'....        DC32     _ZTVN8touchgfx10CachedFontE+0x8
      8          #include <fonts/FontCache.hpp>
      9          #include <texts/TypedTextDatabase.hpp>
     10          
     11          namespace touchgfx
     12          {

   \                                 In section .text, align 2, keep-with-next
   \   __vfp touchgfx::FontCache::subobject FontCache()
   \                     _ZN8touchgfx9FontCacheC2Ev: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x.... 0x....      BL       _ZN8touchgfx9FontCacheC1Ev
   \        0x6   0xBD02             POP      {R1,PC}

   \                                 In section .text, align 2, keep-with-next
     13          FontCache::FontCache()
     14              : memorySize(0), memory(0), top(0), gsubStart(0), reader(0)
     15          {
   \                     _ZN8touchgfx9FontCacheC1Ev: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
   \        0x2   0x6181             STR      R1,[R0, #+24]
   \        0x4   0x2100             MOVS     R1,#+0
   \        0x6   0x61C1             STR      R1,[R0, #+28]
   \        0x8   0x2100             MOVS     R1,#+0
   \        0xA   0x6201             STR      R1,[R0, #+32]
   \        0xC   0x2100             MOVS     R1,#+0
   \        0xE   0x6241             STR      R1,[R0, #+36]
   \       0x10   0x2100             MOVS     R1,#+0
   \       0x12   0x6281             STR      R1,[R0, #+40]
     16          }
   \       0x14   0x4770             BX       LR
     17          

   \                                 In section .text, align 2, keep-with-next
     18          void FontCache::clear(bool keepGsubOrContextTable /* = false */)
     19          {
   \                     _ZN8touchgfx9FontCache5clearEb: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0005             MOVS     R5,R0
   \        0x4   0x000C             MOVS     R4,R1
     20              memset(fontTable, 0, sizeof(fontTable));
   \        0x6   0x2218             MOVS     R2,#+24
   \        0x8   0x2100             MOVS     R1,#+0
   \        0xA   0x0028             MOVS     R0,R5
   \        0xC   0x.... 0x....      BL       _ZN8touchgfx6memsetEPvhj
     21          
     22              // Top is beginning of memory, no glyphs are cached yet
     23              top = memory;
   \       0x10   0x69E8             LDR      R0,[R5, #+28]
   \       0x12   0x6228             STR      R0,[R5, #+32]
     24          
     25              if (!keepGsubOrContextTable)
   \       0x14   0xB2E4             UXTB     R4,R4
   \       0x16   0x2C00             CMP      R4,#+0
   \       0x18   0xD107             BNE.N    ??clear_0
     26              {
     27                  // gsubStart points to end of memory (nothing loaded yet)
     28                  gsubStart = memory + memorySize;
   \       0x1A   0x69E8             LDR      R0,[R5, #+28]
   \       0x1C   0x69A9             LDR      R1,[R5, #+24]
   \       0x1E   0x4408             ADD      R0,R0,R1
   \       0x20   0x6268             STR      R0,[R5, #+36]
     29          
     30                  // Round down to 32bit address
     31                  gsubStart = (uint8_t*)((uintptr_t)gsubStart & ~(uintptr_t)0x3);
   \       0x22   0x6A68             LDR      R0,[R5, #+36]
   \       0x24   0x0880             LSRS     R0,R0,#+2
   \       0x26   0x0080             LSLS     R0,R0,#+2
   \       0x28   0x6268             STR      R0,[R5, #+36]
     32              }
     33          }
   \                     ??clear_0: (+1)
   \       0x2A   0xBD31             POP      {R0,R4,R5,PC}
     34          

   \                                 In section .text, align 2, keep-with-next
     35          void FontCache::setMemory(uint8_t* _memory, uint32_t size)
     36          {
   \                     _ZN8touchgfx9FontCache9setMemoryEPhj: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     37              memory = _memory;
   \        0x2   0x61C1             STR      R1,[R0, #+28]
     38              memorySize = size;
   \        0x4   0x6182             STR      R2,[R0, #+24]
     39          
     40              clear();
   \        0x6   0x2100             MOVS     R1,#+0
   \        0x8   0x.... 0x....      BL       _ZN8touchgfx9FontCache5clearEb
     41          }
   \        0xC   0xBD01             POP      {R0,PC}
     42          

   \                                 In section .text, align 2, keep-with-next
     43          void FontCache::setReader(FontDataReader* _reader)
     44          {
     45              reader = _reader;
   \                     _ZN8touchgfx9FontCache9setReaderEPNS_14FontDataReaderE: (+1)
   \        0x0   0x6281             STR      R1,[R0, #+40]
     46          }
   \        0x2   0x4770             BX       LR
     47          

   \                                 In section .text, align 2, keep-with-next
     48          const GlyphNode* FontCache::getGlyph(Unicode::UnicodeChar unicode, FontId font) const
     49          {
     50              GlyphNode* g = (GlyphNode*)fontTable[font].first;
   \                     _ZNK8touchgfx9FontCache8getGlyphEtt: (+1)
   \        0x0   0xB292             UXTH     R2,R2
   \        0x2   0xF850 0x0032      LDR      R0,[R0, R2, LSL #+3]
   \        0x6   0xE001             B.N      ??getGlyph_0
     51              while (g)
     52              {
     53                  if (g->unicode == unicode)
     54                  {
     55                      return g;
     56                  }
     57                  GlyphNode** next = (GlyphNode**)((uint8_t*)g + SizeGlyphNode);
   \                     ??getGlyph_1: (+1)
   \        0x8   0x3010             ADDS     R0,R0,#+16
     58                  g = *next;
   \        0xA   0x6800             LDR      R0,[R0, #+0]
   \                     ??getGlyph_0: (+1)
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD005             BEQ.N    ??getGlyph_2
   \       0x10   0x8882             LDRH     R2,[R0, #+4]
   \       0x12   0x000B             MOVS     R3,R1
   \       0x14   0xB29B             UXTH     R3,R3
   \       0x16   0x429A             CMP      R2,R3
   \       0x18   0xD1F6             BNE.N    ??getGlyph_1
   \       0x1A   0xE000             B.N      ??getGlyph_3
     59              }
     60              return 0;
   \                     ??getGlyph_2: (+1)
   \       0x1C   0x2000             MOVS     R0,#+0
   \                     ??getGlyph_3: (+1)
   \       0x1E   0x4770             BX       LR
     61          }
     62          

   \                                 In section .text, align 2, keep-with-next
     63          void FontCache::open()
     64          {
   \                     _ZN8touchgfx9FontCache4openEv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x0001             MOVS     R1,R0
     65              if (reader)
   \        0x4   0x6A88             LDR      R0,[R1, #+40]
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD004             BEQ.N    ??open_0
     66              {
     67                  reader->open();
   \        0xA   0x6A88             LDR      R0,[R1, #+40]
   \        0xC   0x6A89             LDR      R1,[R1, #+40]
   \        0xE   0x6809             LDR      R1,[R1, #+0]
   \       0x10   0x6889             LDR      R1,[R1, #+8]
   \       0x12   0x4788             BLX      R1
     68              }
     69          }
   \                     ??open_0: (+1)
   \       0x14   0xBD01             POP      {R0,PC}
     70          

   \                                 In section .text, align 2, keep-with-next
     71          void FontCache::close()
     72          {
   \                     _ZN8touchgfx9FontCache5closeEv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x0001             MOVS     R1,R0
     73              if (reader)
   \        0x4   0x6A88             LDR      R0,[R1, #+40]
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD004             BEQ.N    ??close_0
     74              {
     75                  reader->close();
   \        0xA   0x6A88             LDR      R0,[R1, #+40]
   \        0xC   0x6A89             LDR      R1,[R1, #+40]
   \        0xE   0x6809             LDR      R1,[R1, #+0]
   \       0x10   0x68C9             LDR      R1,[R1, #+12]
   \       0x12   0x4788             BLX      R1
     76              }
     77          }
   \                     ??close_0: (+1)
   \       0x14   0xBD01             POP      {R0,PC}
     78          

   \                                 In section .text, align 2, keep-with-next
     79          void FontCache::initializeCachedFont(TypedText t, CachedFont* font, bool loadGsubOrContextTable /*= false*/)
     80          {
   \                     _ZN8touchgfx9FontCache20initializeCachedFontENS_9TypedTextEPNS_10CachedFontEb: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0xB08E             SUB      SP,SP,#+56
   \        0x6   0x0006             MOVS     R6,R0
   \        0x8   0x0015             MOVS     R5,R2
   \        0xA   0x001C             MOVS     R4,R3
     81              // Get font index from typed text
     82              FontId fontId = t.getFontId();
   \        0xC   0x000F             MOVS     R7,R1
   \        0xE   0x46B9             MOV      R9,R7
   \       0x10   0x.... 0x....      LDR.W    R8,??DataTable3
   \       0x14   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD108             BNE.N    ??initializeCachedFont_0
   \       0x1C   0x22AE             MOVS     R2,#+174
   \       0x1E   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \       0x22   0x.... 0x....      LDR.W    R0,??DataTable3_2
   \       0x26   0x.... 0x....      BL       __aeabi_assert
   \       0x2A   0x.... 0x....      BL       __iar_EmptyStepPoint
   \                     ??initializeCachedFont_0: (+1)
   \       0x2E   0xF8B9 0x0004      LDRH     R0,[R9, #+4]
   \       0x32   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \       0x36   0x8809             LDRH     R1,[R1, #+0]
   \       0x38   0x4288             CMP      R0,R1
   \       0x3A   0xD308             BCC.N    ??initializeCachedFont_1
   \       0x3C   0x22AF             MOVS     R2,#+175
   \       0x3E   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \       0x42   0x.... 0x....      LDR.W    R0,??DataTable3_4
   \       0x46   0x.... 0x....      BL       __aeabi_assert
   \       0x4A   0x.... 0x....      BL       __iar_EmptyStepPoint
   \                     ??initializeCachedFont_1: (+1)
   \       0x4E   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \       0x52   0x88B9             LDRH     R1,[R7, #+4]
   \       0x54   0xF810 0x8011      LDRB     R8,[R0, R1, LSL #+1]
     83              // Reset to start of file
     84              open();
   \       0x58   0x0030             MOVS     R0,R6
   \       0x5A   0x.... 0x....      BL       _ZN8touchgfx9FontCache4openEv
     85              setPosition(0);
   \       0x5E   0x2100             MOVS     R1,#+0
   \       0x60   0x0030             MOVS     R0,R6
   \       0x62   0x.... 0x....      BL       _ZN8touchgfx9FontCache11setPositionEj
     86          
     87              assert(sizeof(touchgfx::BinaryFontData) < MAX_BUFFER_SIZE);
     88              readData(buffer, sizeof(touchgfx::BinaryFontData));
   \       0x66   0x2228             MOVS     R2,#+40
   \       0x68   0xF116 0x0130      ADDS     R1,R6,#+48
   \       0x6C   0x0030             MOVS     R0,R6
   \       0x6E   0x.... 0x....      BL       _ZN8touchgfx9FontCache8readDataEPvj
     89              const struct touchgfx::BinaryFontData* binaryFontData = reinterpret_cast<const struct touchgfx::BinaryFontData*>(buffer);
   \       0x72   0xF116 0x0730      ADDS     R7,R6,#+48
     90          
     91              const Font** flashFonts = TypedTextDatabase::getFonts();
   \       0x76   0x.... 0x....      BL       _ZN17TypedTextDatabase8getFontsEv
     92              const GeneratedFont* flashFont = static_cast<const GeneratedFont*>(flashFonts[fontId]);
   \       0x7A   0x4641             MOV      R1,R8
   \       0x7C   0xB289             UXTH     R1,R1
   \       0x7E   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
     93              *font = CachedFont(reinterpret_cast<const struct touchgfx::BinaryFontData*>(buffer), fontId, this, flashFont);
   \       0x82   0x9000             STR      R0,[SP, #+0]
   \       0x84   0x0033             MOVS     R3,R6
   \       0x86   0x4642             MOV      R2,R8
   \       0x88   0xB292             UXTH     R2,R2
   \       0x8A   0xF116 0x0130      ADDS     R1,R6,#+48
   \       0x8E   0xA801             ADD      R0,SP,#+4
   \       0x90   0x.... 0x....      BL       _ZN8touchgfx10CachedFontC1EPKNS_14BinaryFontDataEtPNS_9FontCacheEPKNS_13GeneratedFontE
   \       0x94   0x0001             MOVS     R1,R0
   \       0x96   0x0028             MOVS     R0,R5
   \       0x98   0x.... 0x....      BL       _ZN8touchgfx10CachedFontaSEOS0_
     94          
     95              if (loadGsubOrContextTable && (binaryFontData->offsetToGSUB != 0))
   \       0x9C   0x0020             MOVS     R0,R4
   \       0x9E   0xB2C0             UXTB     R0,R0
   \       0xA0   0x2800             CMP      R0,#+0
   \       0xA2   0xD033             BEQ.N    ??initializeCachedFont_2
   \       0xA4   0x6978             LDR      R0,[R7, #+20]
   \       0xA6   0x2800             CMP      R0,#+0
   \       0xA8   0xD030             BEQ.N    ??initializeCachedFont_2
     96              {
     97                  setPosition(binaryFontData->offsetToGSUB);
   \       0xAA   0x6979             LDR      R1,[R7, #+20]
   \       0xAC   0x0030             MOVS     R0,R6
   \       0xAE   0x.... 0x....      BL       _ZN8touchgfx9FontCache11setPositionEj
     98          
     99                  const uint32_t sizeOfGSUB = (binaryFontData->offsetToArabicTable != 0 ? binaryFontData->offsetToArabicTable : binaryFontData->sizeOfFontData) - binaryFontData->offsetToGSUB;
   \       0xB2   0x69B8             LDR      R0,[R7, #+24]
   \       0xB4   0x2800             CMP      R0,#+0
   \       0xB6   0xD001             BEQ.N    ??initializeCachedFont_3
   \       0xB8   0x69B8             LDR      R0,[R7, #+24]
   \       0xBA   0xE000             B.N      ??initializeCachedFont_4
   \                     ??initializeCachedFont_3: (+1)
   \       0xBC   0x6878             LDR      R0,[R7, #+4]
   \                     ??initializeCachedFont_4: (+1)
   \       0xBE   0xF8D7 0x8014      LDR      R8,[R7, #+20]
   \       0xC2   0xEBB0 0x0808      SUBS     R8,R0,R8
    100          
    101                  if (top + sizeOfGSUB < gsubStart) // Room for this GSUB table
   \       0xC6   0x6A30             LDR      R0,[R6, #+32]
   \       0xC8   0x4440             ADD      R0,R0,R8
   \       0xCA   0x6A71             LDR      R1,[R6, #+36]
   \       0xCC   0x4288             CMP      R0,R1
   \       0xCE   0xD218             BCS.N    ??initializeCachedFont_5
    102                  {
    103                      uint8_t* const gsubPosition = gsubStart - sizeOfGSUB;
   \       0xD0   0x6A70             LDR      R0,[R6, #+36]
   \       0xD2   0xF1D8 0x0100      RSBS     R1,R8,#+0
   \       0xD6   0xEB00 0x0901      ADD      R9,R0,R1
    104                      readData(gsubPosition, sizeOfGSUB);
   \       0xDA   0x4642             MOV      R2,R8
   \       0xDC   0x4649             MOV      R1,R9
   \       0xDE   0x0030             MOVS     R0,R6
   \       0xE0   0x.... 0x....      BL       _ZN8touchgfx9FontCache8readDataEPvj
    105                      font->setGSUBTable(reinterpret_cast<uint16_t*>(gsubPosition));
   \       0xE4   0x4649             MOV      R1,R9
   \       0xE6   0x0028             MOVS     R0,R5
   \       0xE8   0x682A             LDR      R2,[R5, #+0]
   \       0xEA   0x6D12             LDR      R2,[R2, #+80]
   \       0xEC   0x4790             BLX      R2
    106                      gsubStart -= sizeOfGSUB;
   \       0xEE   0x6A70             LDR      R0,[R6, #+36]
   \       0xF0   0xF1D8 0x0800      RSBS     R8,R8,#+0
   \       0xF4   0x4440             ADD      R0,R0,R8
   \       0xF6   0x6270             STR      R0,[R6, #+36]
    107          
    108                      // Round down to 32bit address
    109                      gsubStart = (uint8_t*)((uintptr_t)gsubStart & ~(uintptr_t)0x3);
   \       0xF8   0x6A70             LDR      R0,[R6, #+36]
   \       0xFA   0x0880             LSRS     R0,R0,#+2
   \       0xFC   0x0080             LSLS     R0,R0,#+2
   \       0xFE   0x6270             STR      R0,[R6, #+36]
   \      0x100   0xE004             B.N      ??initializeCachedFont_2
    110                  }
    111                  else
    112                  {
    113                      font->setGSUBTable(0);
   \                     ??initializeCachedFont_5: (+1)
   \      0x102   0x2100             MOVS     R1,#+0
   \      0x104   0x0028             MOVS     R0,R5
   \      0x106   0x682A             LDR      R2,[R5, #+0]
   \      0x108   0x6D12             LDR      R2,[R2, #+80]
   \      0x10A   0x4790             BLX      R2
    114                  }
    115              }
    116          
    117              if (loadGsubOrContextTable && (binaryFontData->offsetToArabicTable != 0))
   \                     ??initializeCachedFont_2: (+1)
   \      0x10C   0xB2E4             UXTB     R4,R4
   \      0x10E   0x2C00             CMP      R4,#+0
   \      0x110   0xD04C             BEQ.N    ??initializeCachedFont_6
   \      0x112   0x69B8             LDR      R0,[R7, #+24]
   \      0x114   0x2800             CMP      R0,#+0
   \      0x116   0xD049             BEQ.N    ??initializeCachedFont_6
    118              {
    119                  setPosition(binaryFontData->offsetToArabicTable);
   \      0x118   0x69B9             LDR      R1,[R7, #+24]
   \      0x11A   0x0030             MOVS     R0,R6
   \      0x11C   0x.... 0x....      BL       _ZN8touchgfx9FontCache11setPositionEj
    120          
    121                  const uint32_t sizeTableData = binaryFontData->sizeOfFontData - binaryFontData->offsetToArabicTable;
   \      0x120   0x6878             LDR      R0,[R7, #+4]
   \      0x122   0x69BC             LDR      R4,[R7, #+24]
   \      0x124   0x1B04             SUBS     R4,R0,R4
    122          
    123                  if (top + sizeTableData + sizeof(FontContextualFormsTable) < gsubStart) // Room for the ContextualFormsTables
   \      0x126   0x6A30             LDR      R0,[R6, #+32]
   \      0x128   0x4420             ADD      R0,R0,R4
   \      0x12A   0x3020             ADDS     R0,R0,#+32
   \      0x12C   0x6A71             LDR      R1,[R6, #+36]
   \      0x12E   0x4288             CMP      R0,R1
   \      0x130   0xD237             BCS.N    ??initializeCachedFont_7
    124                  {
    125                      // Allocate FontContextualFormsTable first
    126                      gsubStart -= sizeof(FontContextualFormsTable);
   \      0x132   0x6A70             LDR      R0,[R6, #+36]
   \      0x134   0x3820             SUBS     R0,R0,#+32
   \      0x136   0x6270             STR      R0,[R6, #+36]
    127                      // Round down to 32bit address
    128                      gsubStart = (uint8_t*)((uintptr_t)gsubStart & ~(uintptr_t)0x3);
   \      0x138   0x6A70             LDR      R0,[R6, #+36]
   \      0x13A   0x0880             LSRS     R0,R0,#+2
   \      0x13C   0x0080             LSLS     R0,R0,#+2
   \      0x13E   0x6270             STR      R0,[R6, #+36]
    129          
    130                      FontContextualFormsTable* table = (FontContextualFormsTable*)gsubStart;
   \      0x140   0x6A77             LDR      R7,[R6, #+36]
    131                      font->setContextualFormsTable(table);
   \      0x142   0x0039             MOVS     R1,R7
   \      0x144   0x0028             MOVS     R0,R5
   \      0x146   0x682A             LDR      R2,[R5, #+0]
   \      0x148   0x6D52             LDR      R2,[R2, #+84]
   \      0x14A   0x4790             BLX      R2
    132                      gsubStart -= sizeTableData;
   \      0x14C   0x6A70             LDR      R0,[R6, #+36]
   \      0x14E   0x4261             RSBS     R1,R4,#+0
   \      0x150   0x4408             ADD      R0,R0,R1
   \      0x152   0x6270             STR      R0,[R6, #+36]
    133                      readData(gsubStart, sizeTableData);
   \      0x154   0x0022             MOVS     R2,R4
   \      0x156   0x6A71             LDR      R1,[R6, #+36]
   \      0x158   0x0030             MOVS     R0,R6
   \      0x15A   0x.... 0x....      BL       _ZN8touchgfx9FontCache8readDataEPvj
    134          
    135                      // Set pointers in table
    136                      const uint16_t* const base = (const uint16_t*)gsubStart;
   \      0x15E   0x6A70             LDR      R0,[R6, #+36]
    137                      // First elements in binary font are offsets to arrays in 16bit words
    138                      table->contextualForms4Long = (FontContextualFormsTable::arrayOf5UnicodesPtr)(base + base[0]);
   \      0x160   0x8801             LDRH     R1,[R0, #+0]
   \      0x162   0xEB00 0x0141      ADD      R1,R0,R1, LSL #+1
   \      0x166   0x6039             STR      R1,[R7, #+0]
    139                      table->contextualForms3Long = (FontContextualFormsTable::arrayOf5UnicodesPtr)(base + base[1]);
   \      0x168   0x8841             LDRH     R1,[R0, #+2]
   \      0x16A   0xEB00 0x0141      ADD      R1,R0,R1, LSL #+1
   \      0x16E   0x6079             STR      R1,[R7, #+4]
    140                      table->contextualForms2Long = (FontContextualFormsTable::arrayOf5UnicodesPtr)(base + base[2]);
   \      0x170   0x8881             LDRH     R1,[R0, #+4]
   \      0x172   0xEB00 0x0141      ADD      R1,R0,R1, LSL #+1
   \      0x176   0x60B9             STR      R1,[R7, #+8]
    141                      table->contextualForms0621_063a = (FontContextualFormsTable::arrayOf4UnicodesPtr)(base + base[3]);
   \      0x178   0x88C1             LDRH     R1,[R0, #+6]
   \      0x17A   0xEB00 0x0141      ADD      R1,R0,R1, LSL #+1
   \      0x17E   0x60F9             STR      R1,[R7, #+12]
    142                      table->contextualForms0641_064a = (FontContextualFormsTable::arrayOf4UnicodesPtr)(base + base[4]);
   \      0x180   0x8901             LDRH     R1,[R0, #+8]
   \      0x182   0xEB00 0x0141      ADD      R1,R0,R1, LSL #+1
   \      0x186   0x6139             STR      R1,[R7, #+16]
    143                      table->contextualForms06XX = (FontContextualFormsTable::arrayOf5UnicodesPtr)(base + base[5]);
   \      0x188   0x8941             LDRH     R1,[R0, #+10]
   \      0x18A   0xEB00 0x0141      ADD      R1,R0,R1, LSL #+1
   \      0x18E   0x6179             STR      R1,[R7, #+20]
    144                      table->contextualForms4LongSize = base[6];
   \      0x190   0x8981             LDRH     R1,[R0, #+12]
   \      0x192   0x8339             STRH     R1,[R7, #+24]
    145                      table->contextualForms3LongSize = base[7];
   \      0x194   0x89C1             LDRH     R1,[R0, #+14]
   \      0x196   0x8379             STRH     R1,[R7, #+26]
    146                      table->contextualForms2LongSize = base[8];
   \      0x198   0x8A01             LDRH     R1,[R0, #+16]
   \      0x19A   0x83B9             STRH     R1,[R7, #+28]
    147                      table->contextualForms06XXSize = base[9];
   \      0x19C   0x8A40             LDRH     R0,[R0, #+18]
   \      0x19E   0x83F8             STRH     R0,[R7, #+30]
   \      0x1A0   0xE004             B.N      ??initializeCachedFont_6
    148                  }
    149                  else
    150                  {
    151                      font->setContextualFormsTable(0);
   \                     ??initializeCachedFont_7: (+1)
   \      0x1A2   0x2100             MOVS     R1,#+0
   \      0x1A4   0x0028             MOVS     R0,R5
   \      0x1A6   0x682A             LDR      R2,[R5, #+0]
   \      0x1A8   0x6D52             LDR      R2,[R2, #+84]
   \      0x1AA   0x4790             BLX      R2
    152                  }
    153              }
    154          
    155              close();
   \                     ??initializeCachedFont_6: (+1)
   \      0x1AC   0x0030             MOVS     R0,R6
   \      0x1AE   0x.... 0x....      BL       _ZN8touchgfx9FontCache5closeEv
    156          }
   \      0x1B2   0xB00F             ADD      SP,SP,#+60
   \      0x1B4   0xE8BD 0x83F0      POP      {R4-R9,PC}
    157          

   \                                 In section .text, align 2, keep-with-next
    158          bool FontCache::cacheString(TypedText t, const Unicode::UnicodeChar* string)
    159          {
   \                     _ZN8touchgfx9FontCache11cacheStringENS_9TypedTextEPKt: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
    160              open();
   \        0x8   0x0020             MOVS     R0,R4
   \        0xA   0x.... 0x....      BL       _ZN8touchgfx9FontCache4openEv
    161              if (!createSortedString(string))
   \        0xE   0x0031             MOVS     R1,R6
   \       0x10   0x0020             MOVS     R0,R4
   \       0x12   0x.... 0x....      BL       _ZN8touchgfx9FontCache18createSortedStringEPKt
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD104             BNE.N    ??cacheString_0
    162              {
    163                  close();
   \       0x1A   0x0020             MOVS     R0,R4
   \       0x1C   0x.... 0x....      BL       _ZN8touchgfx9FontCache5closeEv
    164                  return false;
   \       0x20   0x2000             MOVS     R0,#+0
   \       0x22   0xE00D             B.N      ??cacheString_1
    165              }
    166              const bool result = cacheSortedString(t);
   \                     ??cacheString_0: (+1)
   \       0x24   0x0029             MOVS     R1,R5
   \       0x26   0x4668             MOV      R0,SP
   \       0x28   0x.... 0x....      BL       _ZN8touchgfx9TypedTextC1ERKS0_
   \       0x2C   0x0001             MOVS     R1,R0
   \       0x2E   0x0020             MOVS     R0,R4
   \       0x30   0x.... 0x....      BL       _ZN8touchgfx9FontCache17cacheSortedStringENS_9TypedTextE
   \       0x34   0x0005             MOVS     R5,R0
    167              close();
   \       0x36   0x0020             MOVS     R0,R4
   \       0x38   0x.... 0x....      BL       _ZN8touchgfx9FontCache5closeEv
    168              return result;
   \       0x3C   0x0028             MOVS     R0,R5
   \       0x3E   0xB2C0             UXTB     R0,R0
   \                     ??cacheString_1: (+1)
   \       0x40   0xBD76             POP      {R1,R2,R4-R6,PC}
    169          }
    170          

   \                                 In section .text, align 2, keep-with-next
    171          bool FontCache::cacheLigatures(CachedFont* font, TypedText t, const Unicode::UnicodeChar* string)
    172          {
   \                     _ZN8touchgfx9FontCache14cacheLigaturesEPNS_10CachedFontENS_9TypedTextEPKt: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB084             SUB      SP,SP,#+16
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
   \        0x8   0x0016             MOVS     R6,R2
   \        0xA   0x001F             MOVS     R7,R3
    173              open();
   \        0xC   0x0020             MOVS     R0,R4
   \        0xE   0x.... 0x....      BL       _ZN8touchgfx9FontCache4openEv
    174              if (!createSortedLigatures(font, t, string, 0, 0))
   \       0x12   0x0031             MOVS     R1,R6
   \       0x14   0xA802             ADD      R0,SP,#+8
   \       0x16   0x.... 0x....      BL       _ZN8touchgfx9TypedTextC1ERKS0_
   \       0x1A   0x2100             MOVS     R1,#+0
   \       0x1C   0x9101             STR      R1,[SP, #+4]
   \       0x1E   0x2100             MOVS     R1,#+0
   \       0x20   0x9100             STR      R1,[SP, #+0]
   \       0x22   0x003B             MOVS     R3,R7
   \       0x24   0x0002             MOVS     R2,R0
   \       0x26   0x0029             MOVS     R1,R5
   \       0x28   0x0020             MOVS     R0,R4
   \       0x2A   0x.... 0x....      BL       _ZN8touchgfx9FontCache21createSortedLigaturesEPNS_10CachedFontENS_9TypedTextEPKtz
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD104             BNE.N    ??cacheLigatures_0
    175              {
    176                  close();
   \       0x32   0x0020             MOVS     R0,R4
   \       0x34   0x.... 0x....      BL       _ZN8touchgfx9FontCache5closeEv
    177                  return false;
   \       0x38   0x2000             MOVS     R0,#+0
   \       0x3A   0xE00D             B.N      ??cacheLigatures_1
    178              }
    179              const bool result = cacheSortedString(t);
   \                     ??cacheLigatures_0: (+1)
   \       0x3C   0x0031             MOVS     R1,R6
   \       0x3E   0x4668             MOV      R0,SP
   \       0x40   0x.... 0x....      BL       _ZN8touchgfx9TypedTextC1ERKS0_
   \       0x44   0x0001             MOVS     R1,R0
   \       0x46   0x0020             MOVS     R0,R4
   \       0x48   0x.... 0x....      BL       _ZN8touchgfx9FontCache17cacheSortedStringENS_9TypedTextE
   \       0x4C   0x0005             MOVS     R5,R0
    180              close();
   \       0x4E   0x0020             MOVS     R0,R4
   \       0x50   0x.... 0x....      BL       _ZN8touchgfx9FontCache5closeEv
    181              return result;
   \       0x54   0x0028             MOVS     R0,R5
   \       0x56   0xB2C0             UXTB     R0,R0
   \                     ??cacheLigatures_1: (+1)
   \       0x58   0xB005             ADD      SP,SP,#+20
   \       0x5A   0xBDF0             POP      {R4-R7,PC}
    182          }
    183          

   \                                 In section .text, align 2, keep-with-next
    184          bool FontCache::cacheSortedString(TypedText t)
    185          {
   \                     _ZN8touchgfx9FontCache17cacheSortedStringENS_9TypedTextE: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0xB084             SUB      SP,SP,#+16
   \        0x6   0x0006             MOVS     R6,R0
   \        0x8   0x000C             MOVS     R4,R1
    186              setPosition(8); // Skip font index and size
   \        0xA   0x2108             MOVS     R1,#+8
   \        0xC   0x0030             MOVS     R0,R6
   \        0xE   0x.... 0x....      BL       _ZN8touchgfx9FontCache11setPositionEj
    187              uint32_t glyphNodeOffset;
    188              uint32_t dummy;
    189              readData(&glyphNodeOffset, sizeof(uint32_t)); // offsetToTable
   \       0x12   0x2204             MOVS     R2,#+4
   \       0x14   0xA903             ADD      R1,SP,#+12
   \       0x16   0x0030             MOVS     R0,R6
   \       0x18   0x.... 0x....      BL       _ZN8touchgfx9FontCache8readDataEPvj
    190              readData(&dummy, sizeof(uint32_t));           // offsetToKerning
   \       0x1C   0x2204             MOVS     R2,#+4
   \       0x1E   0xA902             ADD      R1,SP,#+8
   \       0x20   0x0030             MOVS     R0,R6
   \       0x22   0x.... 0x....      BL       _ZN8touchgfx9FontCache8readDataEPvj
    191              readData(&glyphDataOffset, sizeof(uint32_t)); // offsetToGlyphs
   \       0x26   0x2204             MOVS     R2,#+4
   \       0x28   0xF116 0x0170      ADDS     R1,R6,#+112
   \       0x2C   0x0030             MOVS     R0,R6
   \       0x2E   0x.... 0x....      BL       _ZN8touchgfx9FontCache8readDataEPvj
    192              readData(&dummy, sizeof(uint32_t));           // offsetToGlyphs
   \       0x32   0x2204             MOVS     R2,#+4
   \       0x34   0xA902             ADD      R1,SP,#+8
   \       0x36   0x0030             MOVS     R0,R6
   \       0x38   0x.... 0x....      BL       _ZN8touchgfx9FontCache8readDataEPvj
    193              readData(&dummy, sizeof(uint32_t));           // offsetToArabicTable
   \       0x3C   0x2204             MOVS     R2,#+4
   \       0x3E   0xA902             ADD      R1,SP,#+8
   \       0x40   0x0030             MOVS     R0,R6
   \       0x42   0x.... 0x....      BL       _ZN8touchgfx9FontCache8readDataEPvj
    194              readData(&numGlyphs, sizeof(uint16_t));       // numberOfGlyphs
   \       0x46   0x2202             MOVS     R2,#+2
   \       0x48   0xF116 0x0174      ADDS     R1,R6,#+116
   \       0x4C   0x0030             MOVS     R0,R6
   \       0x4E   0x.... 0x....      BL       _ZN8touchgfx9FontCache8readDataEPvj
    195          
    196              FontId fontId = t.getFontId();                 // Get font index from typed text
   \       0x52   0x0025             MOVS     R5,R4
   \       0x54   0x46A9             MOV      R9,R5
   \       0x56   0x.... 0x....      LDR.W    R7,??DataTable3
   \       0x5A   0x6838             LDR      R0,[R7, #+0]
   \       0x5C   0x2800             CMP      R0,#+0
   \       0x5E   0xD108             BNE.N    ??cacheSortedString_0
   \       0x60   0x22AE             MOVS     R2,#+174
   \       0x62   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \       0x66   0x.... 0x....      LDR.W    R0,??DataTable3_2
   \       0x6A   0x.... 0x....      BL       __aeabi_assert
   \       0x6E   0x.... 0x....      BL       __iar_EmptyStepPoint
   \                     ??cacheSortedString_0: (+1)
   \       0x72   0x.... 0x....      LDR.W    R8,??DataTable3_3
   \       0x76   0xF8B9 0x0004      LDRH     R0,[R9, #+4]
   \       0x7A   0xF8B8 0x1000      LDRH     R1,[R8, #+0]
   \       0x7E   0x4288             CMP      R0,R1
   \       0x80   0xD308             BCC.N    ??cacheSortedString_1
   \       0x82   0x22AF             MOVS     R2,#+175
   \       0x84   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \       0x88   0x.... 0x....      LDR.W    R0,??DataTable3_4
   \       0x8C   0x.... 0x....      BL       __aeabi_assert
   \       0x90   0x.... 0x....      BL       __iar_EmptyStepPoint
   \                     ??cacheSortedString_1: (+1)
   \       0x94   0x6838             LDR      R0,[R7, #+0]
   \       0x96   0x88A9             LDRH     R1,[R5, #+4]
   \       0x98   0xF810 0x5011      LDRB     R5,[R0, R1, LSL #+1]
    197              uint32_t bpp = t.getFont()->getBitsPerPixel(); // Get BPP from standard font
   \       0x9C   0x46A1             MOV      R9,R4
   \       0x9E   0x6838             LDR      R0,[R7, #+0]
   \       0xA0   0x2800             CMP      R0,#+0
   \       0xA2   0xD108             BNE.N    ??cacheSortedString_2
   \       0xA4   0x22AE             MOVS     R2,#+174
   \       0xA6   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \       0xAA   0x.... 0x....      LDR.W    R0,??DataTable3_2
   \       0xAE   0x.... 0x....      BL       __aeabi_assert
   \       0xB2   0x.... 0x....      BL       __iar_EmptyStepPoint
   \                     ??cacheSortedString_2: (+1)
   \       0xB6   0xF8B9 0x0004      LDRH     R0,[R9, #+4]
   \       0xBA   0xF8B8 0x1000      LDRH     R1,[R8, #+0]
   \       0xBE   0x4288             CMP      R0,R1
   \       0xC0   0xD308             BCC.N    ??cacheSortedString_3
   \       0xC2   0x22AF             MOVS     R2,#+175
   \       0xC4   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \       0xC8   0x.... 0x....      LDR.W    R0,??DataTable3_4
   \       0xCC   0x.... 0x....      BL       __aeabi_assert
   \       0xD0   0x.... 0x....      BL       __iar_EmptyStepPoint
   \                     ??cacheSortedString_3: (+1)
   \       0xD4   0x.... 0x....      LDR.W    R0,??DataTable3_5
   \       0xD8   0x6800             LDR      R0,[R0, #+0]
   \       0xDA   0x6839             LDR      R1,[R7, #+0]
   \       0xDC   0x88A2             LDRH     R2,[R4, #+4]
   \       0xDE   0xF811 0x1012      LDRB     R1,[R1, R2, LSL #+1]
   \       0xE2   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \       0xE6   0x6801             LDR      R1,[R0, #+0]
   \       0xE8   0x6B49             LDR      R1,[R1, #+52]
   \       0xEA   0x4788             BLX      R1
   \       0xEC   0x0007             MOVS     R7,R0
    198          
    199              setPosition(glyphNodeOffset); // Go to glyph nodes for font
   \       0xEE   0x9903             LDR      R1,[SP, #+12]
   \       0xF0   0x0030             MOVS     R0,R6
   \       0xF2   0x.... 0x....      BL       _ZN8touchgfx9FontCache11setPositionEj
    200              currentFileGlyphNumber = 0;
   \       0xF6   0x2000             MOVS     R0,#+0
   \       0xF8   0xF8A6 0x0076      STRH     R0,[R6, #+118]
    201              currentFileGlyphNode.unicode = 0; // Force reading of first glyph
   \       0xFC   0x2000             MOVS     R0,#+0
   \       0xFE   0xF8A6 0x007C      STRH     R0,[R6, #+124]
    202          
    203              const Unicode::UnicodeChar* string = sortedString;
   \      0x102   0xF8D6 0x802C      LDR      R8,[R6, #+44]
    204              Unicode::UnicodeChar last = 0;
   \      0x106   0x2100             MOVS     R1,#+0
    205              GlyphNode* firstNewGlyph = 0;
   \      0x108   0x2400             MOVS     R4,#+0
    206              bool outOfMemory = false;
   \      0x10A   0x2000             MOVS     R0,#+0
   \      0x10C   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \      0x110   0xE009             B.N      ??cacheSortedString_4
    207              while (*string)
    208              {
    209                  Unicode::UnicodeChar ch = *string;
    210                  if (ch != last)
    211                  {
    212                      if (!contains(ch, fontId))
    213                      {
    214                          insert(ch, fontId, bpp, outOfMemory);
    215                          if (outOfMemory)
    216                          {
    217                              break;
    218                          }
    219                          if (firstNewGlyph == 0)
   \                     ??cacheSortedString_5: (+1)
   \      0x112   0x2C00             CMP      R4,#+0
   \      0x114   0xD104             BNE.N    ??cacheSortedString_6
    220                          {
    221                              firstNewGlyph = (GlyphNode*)fontTable[fontId].last;
   \      0x116   0x0028             MOVS     R0,R5
   \      0x118   0xB280             UXTH     R0,R0
   \      0x11A   0xEB06 0x00C0      ADD      R0,R6,R0, LSL #+3
   \      0x11E   0x6844             LDR      R4,[R0, #+4]
    222                          }
    223                      }
    224                  }
    225                  last = ch;
   \                     ??cacheSortedString_6: (+1)
   \      0x120   0x4649             MOV      R1,R9
    226                  string++;
   \      0x122   0xF118 0x0802      ADDS     R8,R8,#+2
   \                     ??cacheSortedString_4: (+1)
   \      0x126   0xF8B8 0x0000      LDRH     R0,[R8, #+0]
   \      0x12A   0x2800             CMP      R0,#+0
   \      0x12C   0xD01D             BEQ.N    ??cacheSortedString_7
   \      0x12E   0xF8B8 0x9000      LDRH     R9,[R8, #+0]
   \      0x132   0x4648             MOV      R0,R9
   \      0x134   0xB280             UXTH     R0,R0
   \      0x136   0xB289             UXTH     R1,R1
   \      0x138   0x4288             CMP      R0,R1
   \      0x13A   0xD0F1             BEQ.N    ??cacheSortedString_6
   \      0x13C   0x002A             MOVS     R2,R5
   \      0x13E   0xB292             UXTH     R2,R2
   \      0x140   0x4649             MOV      R1,R9
   \      0x142   0xB289             UXTH     R1,R1
   \      0x144   0x0030             MOVS     R0,R6
   \      0x146   0x.... 0x....      BL       _ZNK8touchgfx9FontCache8containsEtt
   \      0x14A   0x2800             CMP      R0,#+0
   \      0x14C   0xD1E8             BNE.N    ??cacheSortedString_6
   \      0x14E   0xA801             ADD      R0,SP,#+4
   \      0x150   0x9000             STR      R0,[SP, #+0]
   \      0x152   0x003B             MOVS     R3,R7
   \      0x154   0x002A             MOVS     R2,R5
   \      0x156   0xB292             UXTH     R2,R2
   \      0x158   0x4649             MOV      R1,R9
   \      0x15A   0xB289             UXTH     R1,R1
   \      0x15C   0x0030             MOVS     R0,R6
   \      0x15E   0x.... 0x....      BL       _ZN8touchgfx9FontCache6insertEttjRb
   \      0x162   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \      0x166   0x2800             CMP      R0,#+0
   \      0x168   0xD0D3             BEQ.N    ??cacheSortedString_5
    227              }
    228          
    229              cacheData(bpp, firstNewGlyph);
   \                     ??cacheSortedString_7: (+1)
   \      0x16A   0x0022             MOVS     R2,R4
   \      0x16C   0x0039             MOVS     R1,R7
   \      0x16E   0x0030             MOVS     R0,R6
   \      0x170   0x.... 0x....      BL       _ZN8touchgfx9FontCache9cacheDataEjPNS_9GlyphNodeE
    230              return !outOfMemory;
   \      0x174   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \      0x178   0x2800             CMP      R0,#+0
   \      0x17A   0xD101             BNE.N    ??cacheSortedString_8
   \      0x17C   0x2001             MOVS     R0,#+1
   \      0x17E   0xE000             B.N      ??cacheSortedString_9
   \                     ??cacheSortedString_8: (+1)
   \      0x180   0x2000             MOVS     R0,#+0
   \                     ??cacheSortedString_9: (+1)
   \      0x182   0xB2C0             UXTB     R0,R0
   \      0x184   0xB005             ADD      SP,SP,#+20
   \      0x186   0xE8BD 0x83F0      POP      {R4-R9,PC}
    231          }
    232          

   \                                 In section .text, align 2, keep-with-next
    233          bool FontCache::contains(Unicode::UnicodeChar unicode, FontId font) const
    234          {
    235              GlyphNode* g = (GlyphNode*)fontTable[font].first;
   \                     _ZNK8touchgfx9FontCache8containsEtt: (+1)
   \        0x0   0xB292             UXTH     R2,R2
   \        0x2   0xF850 0x0032      LDR      R0,[R0, R2, LSL #+3]
   \        0x6   0xE001             B.N      ??contains_0
    236              while (g)
    237              {
    238                  if (g->unicode == unicode)
    239                  {
    240                      return true;
    241                  }
    242                  GlyphNode** next = (GlyphNode**)((uint8_t*)g + SizeGlyphNode);
   \                     ??contains_1: (+1)
   \        0x8   0x3010             ADDS     R0,R0,#+16
    243                  g = *next;
   \        0xA   0x6800             LDR      R0,[R0, #+0]
   \                     ??contains_0: (+1)
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD006             BEQ.N    ??contains_2
   \       0x10   0x8882             LDRH     R2,[R0, #+4]
   \       0x12   0x000B             MOVS     R3,R1
   \       0x14   0xB29B             UXTH     R3,R3
   \       0x16   0x429A             CMP      R2,R3
   \       0x18   0xD1F6             BNE.N    ??contains_1
   \       0x1A   0x2001             MOVS     R0,#+1
   \       0x1C   0xE000             B.N      ??contains_3
    244              }
    245              return false;
   \                     ??contains_2: (+1)
   \       0x1E   0x2000             MOVS     R0,#+0
   \                     ??contains_3: (+1)
   \       0x20   0x4770             BX       LR
    246          }
    247          

   \                                 In section .text, align 2, keep-with-next
    248          void FontCache::insert(Unicode::UnicodeChar unicode, FontId font, uint32_t bpp, bool& outOfMemory)
    249          {
   \                     _ZN8touchgfx9FontCache6insertEttjRb: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x0015             MOVS     R5,R2
    250              // Insert new glyphnode and glyph after last for font.
    251              uint8_t* oldTop = top;
   \        0x6   0x6A26             LDR      R6,[R4, #+32]
    252              top = copyGlyph(top, unicode, font, bpp, outOfMemory);
   \        0x8   0x9806             LDR      R0,[SP, #+24]
   \        0xA   0x9001             STR      R0,[SP, #+4]
   \        0xC   0x9300             STR      R3,[SP, #+0]
   \        0xE   0x002B             MOVS     R3,R5
   \       0x10   0xB29B             UXTH     R3,R3
   \       0x12   0x000A             MOVS     R2,R1
   \       0x14   0xB292             UXTH     R2,R2
   \       0x16   0x6A21             LDR      R1,[R4, #+32]
   \       0x18   0x0020             MOVS     R0,R4
   \       0x1A   0x.... 0x....      BL       _ZN8touchgfx9FontCache9copyGlyphEPhttjRb
   \       0x1E   0x6220             STR      R0,[R4, #+32]
    253          
    254              if (top == oldTop)
   \       0x20   0x6A20             LDR      R0,[R4, #+32]
   \       0x22   0x42B0             CMP      R0,R6
   \       0x24   0xD01A             BEQ.N    ??insert_0
    255              {
    256                  return;
    257              }
    258          
    259              if (fontTable[font].last == 0)
   \                     ??insert_1: (+1)
   \       0x26   0x0028             MOVS     R0,R5
   \       0x28   0xB280             UXTH     R0,R0
   \       0x2A   0xEB04 0x00C0      ADD      R0,R4,R0, LSL #+3
   \       0x2E   0x6840             LDR      R0,[R0, #+4]
   \       0x30   0x2800             CMP      R0,#+0
   \       0x32   0xD108             BNE.N    ??insert_2
    260              {
    261                  // First glyph
    262                  fontTable[font].first = oldTop;
   \       0x34   0x0028             MOVS     R0,R5
   \       0x36   0xB280             UXTH     R0,R0
   \       0x38   0xF844 0x6030      STR      R6,[R4, R0, LSL #+3]
    263                  fontTable[font].last = oldTop;
   \       0x3C   0xB2AD             UXTH     R5,R5
   \       0x3E   0xEB04 0x00C5      ADD      R0,R4,R5, LSL #+3
   \       0x42   0x6046             STR      R6,[R0, #+4]
   \       0x44   0xE00A             B.N      ??insert_3
    264              }
    265              else
    266              {
    267                  // Set next pointer of old last glyph
    268                  uint8_t** old_next = (uint8_t**)(fontTable[font].last + SizeGlyphNode);
   \                     ??insert_2: (+1)
   \       0x46   0x0028             MOVS     R0,R5
   \       0x48   0xB280             UXTH     R0,R0
   \       0x4A   0xEB04 0x00C0      ADD      R0,R4,R0, LSL #+3
   \       0x4E   0x6840             LDR      R0,[R0, #+4]
   \       0x50   0x3010             ADDS     R0,R0,#+16
    269                  *old_next = oldTop;
   \       0x52   0x6006             STR      R6,[R0, #+0]
    270          
    271                  // Save new glyph as last glyph
    272                  fontTable[font].last = oldTop;
   \       0x54   0xB2AD             UXTH     R5,R5
   \       0x56   0xEB04 0x00C5      ADD      R0,R4,R5, LSL #+3
   \       0x5A   0x6046             STR      R6,[R0, #+4]
    273              }
    274          }
   \                     ??insert_3: (+1)
   \                     ??insert_0: (+1)
   \       0x5C   0xBD73             POP      {R0,R1,R4-R6,PC}
    275          

   \                                 In section .text, align 2, keep-with-next
    276          uint8_t* FontCache::copyGlyph(uint8_t* top, Unicode::UnicodeChar unicode, FontId font, uint32_t bpp, bool& outOfMemory)
    277          {
   \                     _ZN8touchgfx9FontCache9copyGlyphEPhttjRb: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0005             MOVS     R5,R0
   \        0x4   0x000C             MOVS     R4,R1
   \        0x6   0x0016             MOVS     R6,R2
   \        0x8   0xE00A             B.N      ??copyGlyph_0
    278              while (currentFileGlyphNumber < numGlyphs && currentFileGlyphNode.unicode < unicode)
    279              {
    280                  readData(&currentFileGlyphNode, sizeof(GlyphNode));
   \                     ??copyGlyph_1: (+1)
   \        0xA   0x220E             MOVS     R2,#+14
   \        0xC   0xF115 0x0178      ADDS     R1,R5,#+120
   \       0x10   0x0028             MOVS     R0,R5
   \       0x12   0x.... 0x....      BL       _ZN8touchgfx9FontCache8readDataEPvj
    281                  currentFileGlyphNumber++;
   \       0x16   0xF8B5 0x0076      LDRH     R0,[R5, #+118]
   \       0x1A   0x1C40             ADDS     R0,R0,#+1
   \       0x1C   0xF8A5 0x0076      STRH     R0,[R5, #+118]
    282              }
   \                     ??copyGlyph_0: (+1)
   \       0x20   0xF8B5 0x0076      LDRH     R0,[R5, #+118]
   \       0x24   0xF8B5 0x1074      LDRH     R1,[R5, #+116]
   \       0x28   0x4288             CMP      R0,R1
   \       0x2A   0xD205             BCS.N    ??copyGlyph_2
   \       0x2C   0xF8B5 0x007C      LDRH     R0,[R5, #+124]
   \       0x30   0x0031             MOVS     R1,R6
   \       0x32   0xB289             UXTH     R1,R1
   \       0x34   0x4288             CMP      R0,R1
   \       0x36   0xD3E8             BCC.N    ??copyGlyph_1
    283              if (currentFileGlyphNode.unicode != unicode)
   \                     ??copyGlyph_2: (+1)
   \       0x38   0xF8B5 0x007C      LDRH     R0,[R5, #+124]
   \       0x3C   0xB2B6             UXTH     R6,R6
   \       0x3E   0x42B0             CMP      R0,R6
   \       0x40   0xD001             BEQ.N    ??copyGlyph_3
    284              {
    285                  // GlyphNode not found
    286                  return top;
   \       0x42   0x0020             MOVS     R0,R4
   \       0x44   0xE033             B.N      ??copyGlyph_4
    287              }
   \                     ??copyGlyph_3: (+1)
   \       0x46   0x9E04             LDR      R6,[SP, #+16]
    288          
    289              // GlyphNode found
    290              uint32_t glyphSize = ((currentFileGlyphNode.width() + 1) & ~1) * currentFileGlyphNode.height() * bpp / 8;
   \       0x48   0xF115 0x0078      ADDS     R0,R5,#+120
   \       0x4C   0x7B41             LDRB     R1,[R0, #+13]
   \       0x4E   0x0149             LSLS     R1,R1,#+5
   \       0x50   0xF411 0x7180      ANDS     R1,R1,#0x100
   \       0x54   0x7980             LDRB     R0,[R0, #+6]
   \       0x56   0x4301             ORRS     R1,R0,R1
   \       0x58   0xF115 0x0078      ADDS     R0,R5,#+120
   \       0x5C   0x7B42             LDRB     R2,[R0, #+13]
   \       0x5E   0x0112             LSLS     R2,R2,#+4
   \       0x60   0xF412 0x7280      ANDS     R2,R2,#0x100
   \       0x64   0x79C0             LDRB     R0,[R0, #+7]
   \       0x66   0x4302             ORRS     R2,R0,R2
   \       0x68   0xB289             UXTH     R1,R1
   \       0x6A   0x1C49             ADDS     R1,R1,#+1
   \       0x6C   0xF031 0x0101      BICS     R1,R1,#0x1
   \       0x70   0xB292             UXTH     R2,R2
   \       0x72   0x4351             MULS     R1,R2,R1
   \       0x74   0xFB06 0xF601      MUL      R6,R6,R1
   \       0x78   0x08F6             LSRS     R6,R6,#+3
    291              glyphSize = (glyphSize + 3) & ~0x03;
   \       0x7A   0x1CF6             ADDS     R6,R6,#+3
   \       0x7C   0x08B6             LSRS     R6,R6,#+2
   \       0x7E   0x00B6             LSLS     R6,R6,#+2
    292              uint32_t requiredMem = SizeGlyphNode + 4 + glyphSize; // GlyphNode + next ptr + glyph
   \       0x80   0x3614             ADDS     R6,R6,#+20
    293          
    294              // Is space available before sortedString
    295              if (top + requiredMem > (uint8_t*)sortedString)
   \       0x82   0x6AE8             LDR      R0,[R5, #+44]
   \       0x84   0xEB04 0x0106      ADD      R1,R4,R6
   \       0x88   0x4288             CMP      R0,R1
   \       0x8A   0xD204             BCS.N    ??copyGlyph_5
   \       0x8C   0x9805             LDR      R0,[SP, #+20]
    296              {
    297                  outOfMemory = true;
   \       0x8E   0x2101             MOVS     R1,#+1
   \       0x90   0x7001             STRB     R1,[R0, #+0]
    298                  return top;
   \       0x92   0x0020             MOVS     R0,R4
   \       0x94   0xE00B             B.N      ??copyGlyph_4
    299              }
    300          
    301              *(GlyphNode*)top = currentFileGlyphNode;
   \                     ??copyGlyph_5: (+1)
   \       0x96   0x0020             MOVS     R0,R4
   \       0x98   0xF115 0x0178      ADDS     R1,R5,#+120
   \       0x9C   0x220E             MOVS     R2,#+14
   \       0x9E   0x.... 0x....      BL       __aeabi_memcpy
    302          
    303              // Clear next pointer
    304              uint8_t** next = (uint8_t**)(top + SizeGlyphNode);
   \       0xA2   0xF114 0x0010      ADDS     R0,R4,#+16
    305              *next = 0;
   \       0xA6   0x2100             MOVS     R1,#+0
   \       0xA8   0x6001             STR      R1,[R0, #+0]
    306              top += requiredMem;
   \       0xAA   0xEB04 0x0006      ADD      R0,R4,R6
    307              return top;
   \                     ??copyGlyph_4: (+1)
   \       0xAE   0xBD70             POP      {R4-R6,PC}
    308          }
    309          

   \                                 In section .text, align 2, keep-with-next
    310          void FontCache::cacheData(uint32_t bpp, GlyphNode* first)
    311          {
   \                     _ZN8touchgfx9FontCache9cacheDataEjPNS_9GlyphNodeE: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0005             MOVS     R5,R0
   \        0x4   0x000E             MOVS     R6,R1
   \        0x6   0x0014             MOVS     R4,R2
    312              GlyphNode* gn = first;
   \        0x8   0xE02C             B.N      ??cacheData_0
    313              while (gn)
    314              {
    315                  uint8_t* p = (uint8_t*)gn;
   \                     ??cacheData_1: (+1)
   \        0xA   0x0020             MOVS     R0,R4
    316                  if (gn->dataOffset != 0xFFFFFFFF)
   \        0xC   0x6821             LDR      R1,[R4, #+0]
   \        0xE   0xF111 0x0F01      CMN      R1,#+1
   \       0x12   0xD024             BEQ.N    ??cacheData_2
    317                  {
    318                      p += SizeGlyphNode;
   \       0x14   0x3010             ADDS     R0,R0,#+16
    319                      // Next pointer
    320                      p += 4;
   \       0x16   0x1D07             ADDS     R7,R0,#+4
    321          
    322                      // Seek and copy
    323                      setPosition(glyphDataOffset + gn->dataOffset);
   \       0x18   0x6821             LDR      R1,[R4, #+0]
   \       0x1A   0x6F28             LDR      R0,[R5, #+112]
   \       0x1C   0x1809             ADDS     R1,R1,R0
   \       0x1E   0x0028             MOVS     R0,R5
   \       0x20   0x.... 0x....      BL       _ZN8touchgfx9FontCache11setPositionEj
    324                      uint32_t glyphSize = ((gn->width() + 1) & ~1) * gn->height() * bpp / 8;
   \       0x24   0x0020             MOVS     R0,R4
   \       0x26   0x7B42             LDRB     R2,[R0, #+13]
   \       0x28   0x0152             LSLS     R2,R2,#+5
   \       0x2A   0xF412 0x7280      ANDS     R2,R2,#0x100
   \       0x2E   0x7980             LDRB     R0,[R0, #+6]
   \       0x30   0x4302             ORRS     R2,R0,R2
   \       0x32   0x0020             MOVS     R0,R4
   \       0x34   0x7B41             LDRB     R1,[R0, #+13]
   \       0x36   0x0109             LSLS     R1,R1,#+4
   \       0x38   0xF411 0x7180      ANDS     R1,R1,#0x100
   \       0x3C   0x79C0             LDRB     R0,[R0, #+7]
   \       0x3E   0x4301             ORRS     R1,R0,R1
   \       0x40   0xB292             UXTH     R2,R2
   \       0x42   0x1C52             ADDS     R2,R2,#+1
   \       0x44   0xF032 0x0201      BICS     R2,R2,#0x1
   \       0x48   0xB289             UXTH     R1,R1
   \       0x4A   0x434A             MULS     R2,R1,R2
   \       0x4C   0x4372             MULS     R2,R6,R2
   \       0x4E   0x08D2             LSRS     R2,R2,#+3
    325                      readData(p, glyphSize);
   \       0x50   0x0039             MOVS     R1,R7
   \       0x52   0x0028             MOVS     R0,R5
   \       0x54   0x.... 0x....      BL       _ZN8touchgfx9FontCache8readDataEPvj
    326          
    327                      // Mark glyphNode as cached
    328                      gn->dataOffset = 0xFFFFFFFF;
   \       0x58   0xF05F 0x30FF      MOVS     R0,#+4294967295
   \       0x5C   0x6020             STR      R0,[R4, #+0]
    329                  }
    330          
    331                  GlyphNode** next = (GlyphNode**)((uint8_t*)gn + SizeGlyphNode);
   \                     ??cacheData_2: (+1)
   \       0x5E   0xF114 0x0010      ADDS     R0,R4,#+16
    332                  gn = *next;
   \       0x62   0x6804             LDR      R4,[R0, #+0]
    333              }
   \                     ??cacheData_0: (+1)
   \       0x64   0x2C00             CMP      R4,#+0
   \       0x66   0xD1D0             BNE.N    ??cacheData_1
    334          }
   \       0x68   0xBDF1             POP      {R0,R4-R7,PC}
    335          

   \                                 In section .text, align 2, keep-with-next
    336          bool FontCache::createSortedString(const Unicode::UnicodeChar* string)
    337          {
   \                     _ZN8touchgfx9FontCache18createSortedStringEPKt: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    338              int length = Unicode::strlen(string);
   \        0x6   0x0028             MOVS     R0,R5
   \        0x8   0x.... 0x....      BL       _ZN8touchgfx7Unicode6strlenEPKt
    339              // Sorted string is allocated at end of buffer
    340              sortedString = (Unicode::UnicodeChar*)(gsubStart - (length + 1) * 2);
   \        0xC   0x6A62             LDR      R2,[R4, #+36]
   \        0xE   0x1C40             ADDS     R0,R0,#+1
   \       0x10   0xF07F 0x0101      MVNS     R1,#+1
   \       0x14   0x4348             MULS     R0,R1,R0
   \       0x16   0x4410             ADD      R0,R2,R0
   \       0x18   0x62E0             STR      R0,[R4, #+44]
    341              if ((uint8_t*)sortedString < top)
   \       0x1A   0x6AE0             LDR      R0,[R4, #+44]
   \       0x1C   0x6A21             LDR      R1,[R4, #+32]
   \       0x1E   0x4288             CMP      R0,R1
   \       0x20   0xD201             BCS.N    ??createSortedString_0
    342              {
    343                  // Unable to allocate string buffer in end of memory
    344                  return false;
   \       0x22   0x2000             MOVS     R0,#+0
   \       0x24   0xE00F             B.N      ??createSortedString_1
    345              }
    346              int n = 0;
   \                     ??createSortedString_0: (+1)
   \       0x26   0x2100             MOVS     R1,#+0
    347              Unicode::UnicodeChar* uc = sortedString;
   \       0x28   0x6AE2             LDR      R2,[R4, #+44]
   \       0x2A   0xE004             B.N      ??createSortedString_2
    348              while (*string)
    349              {
    350                  *uc++ = *string++;
   \                     ??createSortedString_3: (+1)
   \       0x2C   0x8828             LDRH     R0,[R5, #+0]
   \       0x2E   0x8010             STRH     R0,[R2, #+0]
   \       0x30   0x1CAD             ADDS     R5,R5,#+2
   \       0x32   0x1C92             ADDS     R2,R2,#+2
    351                  n++;
   \       0x34   0x1C49             ADDS     R1,R1,#+1
    352              }
   \                     ??createSortedString_2: (+1)
   \       0x36   0x8828             LDRH     R0,[R5, #+0]
   \       0x38   0x2800             CMP      R0,#+0
   \       0x3A   0xD1F7             BNE.N    ??createSortedString_3
    353              *uc = 0;
   \       0x3C   0x2000             MOVS     R0,#+0
   \       0x3E   0x8010             STRH     R0,[R2, #+0]
    354              return sortSortedString(n);
   \       0x40   0x0020             MOVS     R0,R4
   \       0x42   0x.... 0x....      BL       _ZN8touchgfx9FontCache16sortSortedStringEi
   \                     ??createSortedString_1: (+1)
   \       0x46   0xBD32             POP      {R1,R4,R5,PC}
    355          }
    356          

   \                                 In section .text, align 2, keep-with-next
    357          bool FontCache::createSortedLigatures(CachedFont* font, TypedText t, const Unicode::UnicodeChar* string, ...)
    358          {
   \                     _ZN8touchgfx9FontCache21createSortedLigaturesEPNS_10CachedFontENS_9TypedTextEPKtz: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0xB09A             SUB      SP,SP,#+104
   \        0x6   0x0005             MOVS     R5,R0
   \        0x8   0x4689             MOV      R9,R1
   \        0xA   0x0014             MOVS     R4,R2
   \        0xC   0x001E             MOVS     R6,R3
    359              va_list pArg;
    360              va_start(pArg, string);
   \        0xE   0xAF22             ADD      R7,SP,#+136
    361              TextProvider tp;
   \       0x10   0xA801             ADD      R0,SP,#+4
   \       0x12   0x.... 0x....      BL       _ZN8touchgfx12TextProviderC1Ev
    362              tp.initialize(string, pArg, font->getGSUBTable(), font->getContextualFormsTable());
   \       0x16   0x4648             MOV      R0,R9
   \       0x18   0xF8D9 0x1000      LDR      R1,[R9, #+0]
   \       0x1C   0x6C89             LDR      R1,[R1, #+72]
   \       0x1E   0x4788             BLX      R1
   \       0x20   0x4680             MOV      R8,R0
   \       0x22   0x4648             MOV      R0,R9
   \       0x24   0xF8D9 0x1000      LDR      R1,[R9, #+0]
   \       0x28   0x6C49             LDR      R1,[R1, #+68]
   \       0x2A   0x4788             BLX      R1
   \       0x2C   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \       0x30   0x0003             MOVS     R3,R0
   \       0x32   0x003A             MOVS     R2,R7
   \       0x34   0x0031             MOVS     R1,R6
   \       0x36   0xA801             ADD      R0,SP,#+4
   \       0x38   0x.... 0x....      BL       _ZN8touchgfx12TextProvider10initializeEPKt9__va_listS2_PKNS_24FontContextualFormsTableE
    363              va_end(pArg);
    364              Unicode::UnicodeChar ligature;
    365              sortedString = (Unicode::UnicodeChar*)(gsubStart);
   \       0x3C   0x6A68             LDR      R0,[R5, #+36]
   \       0x3E   0x62E8             STR      R0,[R5, #+44]
    366              if ((uint8_t*)(sortedString - 1) < top)
   \       0x40   0x6AE8             LDR      R0,[R5, #+44]
   \       0x42   0x1E80             SUBS     R0,R0,#+2
   \       0x44   0x6A29             LDR      R1,[R5, #+32]
   \       0x46   0x4288             CMP      R0,R1
   \       0x48   0xD201             BCS.N    ??createSortedLigatures_0
    367              {
    368                  return false;
   \       0x4A   0x2000             MOVS     R0,#+0
   \       0x4C   0xE044             B.N      ??createSortedLigatures_1
    369              }
    370              *--sortedString = 0;
   \                     ??createSortedLigatures_0: (+1)
   \       0x4E   0x6AE8             LDR      R0,[R5, #+44]
   \       0x50   0x1E80             SUBS     R0,R0,#+2
   \       0x52   0x62E8             STR      R0,[R5, #+44]
   \       0x54   0x2000             MOVS     R0,#+0
   \       0x56   0x6AE9             LDR      R1,[R5, #+44]
   \       0x58   0x8008             STRH     R0,[R1, #+0]
    371              int n = 0;
   \       0x5A   0x2600             MOVS     R6,#+0
   \       0x5C   0xE005             B.N      ??createSortedLigatures_2
    372              while ((ligature = tp.getNextLigature(t.getTextDirection())) != 0)
    373              {
    374                  if ((uint8_t*)(sortedString - 1) < top)
    375                  {
    376                      return false;
    377                  }
    378                  *--sortedString = ligature;
   \                     ??createSortedLigatures_3: (+1)
   \       0x5E   0x6AE8             LDR      R0,[R5, #+44]
   \       0x60   0x1E80             SUBS     R0,R0,#+2
   \       0x62   0x62E8             STR      R0,[R5, #+44]
   \       0x64   0x6AE8             LDR      R0,[R5, #+44]
   \       0x66   0x8001             STRH     R1,[R0, #+0]
    379                  n++;
   \       0x68   0x1C76             ADDS     R6,R6,#+1
   \                     ??createSortedLigatures_2: (+1)
   \       0x6A   0x0027             MOVS     R7,R4
   \       0x6C   0x46B9             MOV      R9,R7
   \       0x6E   0x.... 0x....      LDR.W    R8,??DataTable3
   \       0x72   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \       0x76   0x2800             CMP      R0,#+0
   \       0x78   0xD106             BNE.N    ??createSortedLigatures_4
   \       0x7A   0x22AE             MOVS     R2,#+174
   \       0x7C   0x....             LDR.N    R1,??DataTable3_1
   \       0x7E   0x....             LDR.N    R0,??DataTable3_2
   \       0x80   0x.... 0x....      BL       __aeabi_assert
   \       0x84   0x.... 0x....      BL       __iar_EmptyStepPoint
   \                     ??createSortedLigatures_4: (+1)
   \       0x88   0xF8B9 0x0004      LDRH     R0,[R9, #+4]
   \       0x8C   0x....             LDR.N    R1,??DataTable3_3
   \       0x8E   0x8809             LDRH     R1,[R1, #+0]
   \       0x90   0x4288             CMP      R0,R1
   \       0x92   0xD306             BCC.N    ??createSortedLigatures_5
   \       0x94   0x22AF             MOVS     R2,#+175
   \       0x96   0x....             LDR.N    R1,??DataTable3_1
   \       0x98   0x....             LDR.N    R0,??DataTable3_4
   \       0x9A   0x.... 0x....      BL       __aeabi_assert
   \       0x9E   0x.... 0x....      BL       __iar_EmptyStepPoint
   \                     ??createSortedLigatures_5: (+1)
   \       0xA2   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \       0xA6   0x88B9             LDRH     R1,[R7, #+4]
   \       0xA8   0xEB00 0x0041      ADD      R0,R0,R1, LSL #+1
   \       0xAC   0x7840             LDRB     R0,[R0, #+1]
   \       0xAE   0xF3C0 0x0181      UBFX     R1,R0,#+2,#+2
   \       0xB2   0xB2C9             UXTB     R1,R1
   \       0xB4   0xA801             ADD      R0,SP,#+4
   \       0xB6   0x.... 0x....      BL       _ZN8touchgfx12TextProvider15getNextLigatureEh
   \       0xBA   0x0001             MOVS     R1,R0
   \       0xBC   0xB280             UXTH     R0,R0
   \       0xBE   0x2800             CMP      R0,#+0
   \       0xC0   0xD006             BEQ.N    ??createSortedLigatures_6
   \       0xC2   0x6AE8             LDR      R0,[R5, #+44]
   \       0xC4   0x1E80             SUBS     R0,R0,#+2
   \       0xC6   0x6A2A             LDR      R2,[R5, #+32]
   \       0xC8   0x4290             CMP      R0,R2
   \       0xCA   0xD2C8             BCS.N    ??createSortedLigatures_3
   \       0xCC   0x2000             MOVS     R0,#+0
   \       0xCE   0xE003             B.N      ??createSortedLigatures_1
    380              }
    381              return sortSortedString(n);
   \                     ??createSortedLigatures_6: (+1)
   \       0xD0   0x0031             MOVS     R1,R6
   \       0xD2   0x0028             MOVS     R0,R5
   \       0xD4   0x.... 0x....      BL       _ZN8touchgfx9FontCache16sortSortedStringEi
   \                     ??createSortedLigatures_1: (+1)
   \       0xD8   0xB01B             ADD      SP,SP,#+108
   \       0xDA   0xE8BD 0x83F0      POP      {R4-R9,PC}
    382          }
    383          

   \                                 In section .text, align 2, keep-with-next
    384          bool FontCache::sortSortedString(int n)
    385          {
   \                     _ZN8touchgfx9FontCache16sortSortedStringEi: (+1)
   \        0x0   0xB470             PUSH     {R4-R6}
    386              Unicode::UnicodeChar* uc = sortedString;
   \        0x2   0x6AC2             LDR      R2,[R0, #+44]
    387              for (int i = 0; i < n - 1; i++)
   \        0x4   0x2300             MOVS     R3,#+0
   \        0x6   0xE000             B.N      ??sortSortedString_0
   \                     ??sortSortedString_1: (+1)
   \        0x8   0x1C5B             ADDS     R3,R3,#+1
   \                     ??sortSortedString_0: (+1)
   \        0xA   0x1E48             SUBS     R0,R1,#+1
   \        0xC   0x4283             CMP      R3,R0
   \        0xE   0xDA1C             BGE.N    ??sortSortedString_2
    388              {
    389                  bool swapped = false;
   \       0x10   0x2000             MOVS     R0,#+0
    390                  for (int j = 0; j < n - i - 1; j++)
   \       0x12   0x2400             MOVS     R4,#+0
   \       0x14   0xE012             B.N      ??sortSortedString_3
    391                  {
    392                      if (uc[j] > uc[j + 1])
   \                     ??sortSortedString_4: (+1)
   \       0x16   0xEB02 0x0544      ADD      R5,R2,R4, LSL #+1
   \       0x1A   0x886D             LDRH     R5,[R5, #+2]
   \       0x1C   0xF832 0x6014      LDRH     R6,[R2, R4, LSL #+1]
   \       0x20   0x42B5             CMP      R5,R6
   \       0x22   0xD20A             BCS.N    ??sortSortedString_5
    393                      {
    394                          Unicode::UnicodeChar temp = uc[j];
   \       0x24   0xF832 0x0014      LDRH     R0,[R2, R4, LSL #+1]
    395                          uc[j] = uc[j + 1];
   \       0x28   0xEB02 0x0544      ADD      R5,R2,R4, LSL #+1
   \       0x2C   0x886D             LDRH     R5,[R5, #+2]
   \       0x2E   0xF822 0x5014      STRH     R5,[R2, R4, LSL #+1]
    396                          uc[j + 1] = temp;
   \       0x32   0xEB02 0x0544      ADD      R5,R2,R4, LSL #+1
   \       0x36   0x8068             STRH     R0,[R5, #+2]
    397                          swapped = true;
   \       0x38   0x2001             MOVS     R0,#+1
    398                      }
    399                  }
   \                     ??sortSortedString_5: (+1)
   \       0x3A   0x1C64             ADDS     R4,R4,#+1
   \                     ??sortSortedString_3: (+1)
   \       0x3C   0x1ACD             SUBS     R5,R1,R3
   \       0x3E   0x1E6D             SUBS     R5,R5,#+1
   \       0x40   0x42AC             CMP      R4,R5
   \       0x42   0xDBE8             BLT.N    ??sortSortedString_4
    400          
    401                  // If no two elements were swapped by inner loop, then break
    402                  if (!swapped)
   \       0x44   0xB2C0             UXTB     R0,R0
   \       0x46   0x2800             CMP      R0,#+0
   \       0x48   0xD1DE             BNE.N    ??sortSortedString_1
    403                  {
    404                      break;
    405                  }
    406              }
    407              return true;
   \                     ??sortSortedString_2: (+1)
   \       0x4A   0x2001             MOVS     R0,#+1
   \       0x4C   0xBC70             POP      {R4-R6}
   \       0x4E   0x4770             BX       LR
    408          }
    409          

   \                                 In section .text, align 2, keep-with-next
    410          void FontCache::setPosition(uint32_t position)
    411          {
   \                     _ZN8touchgfx9FontCache11setPositionEj: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x0002             MOVS     R2,R0
    412              if (reader)
   \        0x4   0x6A90             LDR      R0,[R2, #+40]
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD004             BEQ.N    ??setPosition_0
    413              {
    414                  reader->setPosition(position);
   \        0xA   0x6A90             LDR      R0,[R2, #+40]
   \        0xC   0x6A92             LDR      R2,[R2, #+40]
   \        0xE   0x6812             LDR      R2,[R2, #+0]
   \       0x10   0x6912             LDR      R2,[R2, #+16]
   \       0x12   0x4790             BLX      R2
    415              }
    416          }
   \                     ??setPosition_0: (+1)
   \       0x14   0xBD01             POP      {R0,PC}
    417          

   \                                 In section .text, align 2, keep-with-next
    418          void FontCache::readData(void* out, uint32_t numberOfBytes)
    419          {
   \                     _ZN8touchgfx9FontCache8readDataEPvj: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x0003             MOVS     R3,R0
    420              if (reader)
   \        0x4   0x6A98             LDR      R0,[R3, #+40]
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD004             BEQ.N    ??readData_0
    421              {
    422                  reader->readData(out, numberOfBytes);
   \        0xA   0x6A98             LDR      R0,[R3, #+40]
   \        0xC   0x6A9B             LDR      R3,[R3, #+40]
   \        0xE   0x681B             LDR      R3,[R3, #+0]
   \       0x10   0x695B             LDR      R3,[R3, #+20]
   \       0x12   0x4798             BLX      R3
    423              }
    424          }
   \                     ??readData_0: (+1)
   \       0x14   0xBD01             POP      {R0,PC}

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0x....'....        DC32     _ZN8touchgfx9TypedText10typedTextsE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \        0x0   0x....'....        DC32     _ZZNK8touchgfx9TypedText11assertValidEvEs_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \        0x0   0x....'....        DC32     _ZZNK8touchgfx9TypedText11assertValidEvEs_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \        0x0   0x....'....        DC32     _ZN8touchgfx9TypedText18numberOfTypedTextsE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \        0x0   0x....'....        DC32     _ZZNK8touchgfx9TypedText11assertValidEvEs_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \        0x0   0x....'....        DC32     _ZN8touchgfx9TypedText5fontsE
    425          } // namespace touchgfx

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      64   touchgfx::CachedFont::CachedFont(touchgfx::BinaryFontData const *, uint16_t, touchgfx::FontCache *, touchgfx::GeneratedFont const *)
        64   -> touchgfx::GeneratedFont::subobject GeneratedFont(touchgfx::GlyphNode const *, uint16_t, uint16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t const *const *, touchgfx::KerningNode const *, uint16_t const, uint16_t const, uint16_t const *const, touchgfx::FontContextualFormsTable const *)
      16   touchgfx::CachedFont::operator=(touchgfx::CachedFont &&) noexcept
        16   -> touchgfx::GeneratedFont::operator=(touchgfx::GeneratedFont &&) noexcept
      16   touchgfx::ConstFont::operator=(touchgfx::ConstFont &&) noexcept
        16   -> touchgfx::Font::operator=(touchgfx::Font const &) noexcept
       0   touchgfx::Font::operator=(touchgfx::Font const &) noexcept
       0   touchgfx::FontCache::FontCache()
      24   touchgfx::FontCache::cacheData(uint32_t, touchgfx::GlyphNode *)
        24   -> touchgfx::FontCache::readData(void *, uint32_t)
        24   -> touchgfx::FontCache::setPosition(uint32_t)
      40   touchgfx::FontCache::cacheLigatures(touchgfx::CachedFont *, touchgfx::TypedText, uint16_t const *)
        40   -> touchgfx::FontCache::cacheSortedString(touchgfx::TypedText)
        40   -> touchgfx::FontCache::close()
        40   -> touchgfx::FontCache::createSortedLigatures(touchgfx::CachedFont *, touchgfx::TypedText, uint16_t const *, ...)
        40   -> touchgfx::FontCache::open()
        40   -> touchgfx::TypedText::TypedText(touchgfx::TypedText const &) noexcept
      48   touchgfx::FontCache::cacheSortedString(touchgfx::TypedText)
        48   -- Indirect call
        48   -> __aeabi_assert
        48   -> __iar_EmptyStepPoint
        48   -> touchgfx::FontCache::cacheData(uint32_t, touchgfx::GlyphNode *)
        48   -> touchgfx::FontCache::contains(uint16_t, uint16_t) const
        48   -> touchgfx::FontCache::insert(uint16_t, uint16_t, uint32_t, bool &)
        48   -> touchgfx::FontCache::readData(void *, uint32_t)
        48   -> touchgfx::FontCache::setPosition(uint32_t)
      24   touchgfx::FontCache::cacheString(touchgfx::TypedText, uint16_t const *)
        24   -> touchgfx::FontCache::cacheSortedString(touchgfx::TypedText)
        24   -> touchgfx::FontCache::close()
        24   -> touchgfx::FontCache::createSortedString(uint16_t const *)
        24   -> touchgfx::FontCache::open()
        24   -> touchgfx::TypedText::TypedText(touchgfx::TypedText const &) noexcept
      16   touchgfx::FontCache::clear(bool)
        16   -> touchgfx::memset(void *, uint8_t, uint32_t)
       8   touchgfx::FontCache::close()
         8   -- Indirect call
       0   touchgfx::FontCache::contains(uint16_t, uint16_t) const
      16   touchgfx::FontCache::copyGlyph(uint8_t *, uint16_t, uint16_t, uint32_t, bool &)
        16   -> __aeabi_memcpy
        16   -> touchgfx::FontCache::readData(void *, uint32_t)
     136   touchgfx::FontCache::createSortedLigatures(touchgfx::CachedFont *, touchgfx::TypedText, uint16_t const *, ...)
       136   -- Indirect call
       136   -> __aeabi_assert
       136   -> __iar_EmptyStepPoint
       136   -> touchgfx::FontCache::sortSortedString(int)
       136   -> touchgfx::TextProvider::TextProvider()
       136   -> touchgfx::TextProvider::getNextLigature(uint8_t)
       136   -> touchgfx::TextProvider::initialize(uint16_t const *, va_list, uint16_t const *, touchgfx::FontContextualFormsTable const *)
      16   touchgfx::FontCache::createSortedString(uint16_t const *)
        16   -> touchgfx::FontCache::sortSortedString(int)
        16   -> touchgfx::Unicode::strlen(uint16_t const *)
       0   touchgfx::FontCache::getGlyph(uint16_t, uint16_t) const
      88   touchgfx::FontCache::initializeCachedFont(touchgfx::TypedText, touchgfx::CachedFont *, bool)
        88   -- Indirect call
        88   -> TypedTextDatabase::getFonts()
        88   -> __aeabi_assert
        88   -> __iar_EmptyStepPoint
        88   -> touchgfx::CachedFont::CachedFont(touchgfx::BinaryFontData const *, uint16_t, touchgfx::FontCache *, touchgfx::GeneratedFont const *)
        88   -> touchgfx::CachedFont::operator=(touchgfx::CachedFont &&) noexcept
        88   -> touchgfx::FontCache::close()
        88   -> touchgfx::FontCache::open()
        88   -> touchgfx::FontCache::readData(void *, uint32_t)
        88   -> touchgfx::FontCache::setPosition(uint32_t)
      24   touchgfx::FontCache::insert(uint16_t, uint16_t, uint32_t, bool &)
        24   -> touchgfx::FontCache::copyGlyph(uint8_t *, uint16_t, uint16_t, uint32_t, bool &)
       8   touchgfx::FontCache::open()
         8   -- Indirect call
       8   touchgfx::FontCache::readData(void *, uint32_t)
         8   -- Indirect call
       8   touchgfx::FontCache::setMemory(uint8_t *, uint32_t)
         8   -> touchgfx::FontCache::clear(bool)
       8   touchgfx::FontCache::setPosition(uint32_t)
         8   -- Indirect call
       0   touchgfx::FontCache::setReader(touchgfx::FontDataReader *)
      12   touchgfx::FontCache::sortSortedString(int)
       8   touchgfx::FontCache::subobject FontCache()
         8   -> touchgfx::FontCache::FontCache()
      16   touchgfx::GeneratedFont::operator=(touchgfx::GeneratedFont &&) noexcept
        16   -> touchgfx::ConstFont::operator=(touchgfx::ConstFont &&) noexcept
       0   touchgfx::TypedText::TypedText(touchgfx::TypedText const &) noexcept
       8   touchgfx::TypedText::deleter ~TypedText() noexcept
         8   -> operator delete(void *, unsigned int) noexcept
         8   -> touchgfx::TypedText::~TypedText() noexcept
       0   touchgfx::TypedText::~TypedText() noexcept


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
     108  touchgfx::CachedFont::CachedFont(touchgfx::BinaryFontData const *, uint16_t, touchgfx::FontCache *, touchgfx::GeneratedFont const *)
      30  touchgfx::CachedFont::operator=(touchgfx::CachedFont &&) noexcept
      26  touchgfx::ConstFont::operator=(touchgfx::ConstFont &&) noexcept
      52  touchgfx::Font::operator=(touchgfx::Font const &) noexcept
      22  touchgfx::FontCache::FontCache()
     106  touchgfx::FontCache::cacheData(uint32_t, touchgfx::GlyphNode *)
      92  touchgfx::FontCache::cacheLigatures(touchgfx::CachedFont *, touchgfx::TypedText, uint16_t const *)
     394  touchgfx::FontCache::cacheSortedString(touchgfx::TypedText)
      66  touchgfx::FontCache::cacheString(touchgfx::TypedText, uint16_t const *)
      44  touchgfx::FontCache::clear(bool)
      22  touchgfx::FontCache::close()
      34  touchgfx::FontCache::contains(uint16_t, uint16_t) const
     176  touchgfx::FontCache::copyGlyph(uint8_t *, uint16_t, uint16_t, uint32_t, bool &)
     222  touchgfx::FontCache::createSortedLigatures(touchgfx::CachedFont *, touchgfx::TypedText, uint16_t const *, ...)
      72  touchgfx::FontCache::createSortedString(uint16_t const *)
      32  touchgfx::FontCache::getGlyph(uint16_t, uint16_t) const
     440  touchgfx::FontCache::initializeCachedFont(touchgfx::TypedText, touchgfx::CachedFont *, bool)
      94  touchgfx::FontCache::insert(uint16_t, uint16_t, uint32_t, bool &)
      22  touchgfx::FontCache::open()
      22  touchgfx::FontCache::readData(void *, uint32_t)
      14  touchgfx::FontCache::setMemory(uint8_t *, uint32_t)
      22  touchgfx::FontCache::setPosition(uint32_t)
       4  touchgfx::FontCache::setReader(touchgfx::FontDataReader *)
      80  touchgfx::FontCache::sortSortedString(int)
       8  touchgfx::FontCache::subobject FontCache()
      34  touchgfx::GeneratedFont::operator=(touchgfx::GeneratedFont &&) noexcept
      16  touchgfx::TypedText::TypedText(touchgfx::TypedText const &) noexcept
      20  touchgfx::TypedText::deleter ~TypedText() noexcept
       2  touchgfx::TypedText::~TypedText() noexcept
     368  -- Other

 
   368 bytes in section .rodata
 2'300 bytes in section .text
 
 2'012 bytes of CODE  memory (+ 288 bytes shared)
     0 bytes of CONST memory (+ 368 bytes shared)

Errors: none
Warnings: none
