###############################################################################
#
# IAR ANSI C/C++ Compiler V9.20.1.318/W64 for ARM         07/Feb/2022  20:39:50
# Copyright 1999-2021 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        D:\99_Project\GitHub\TouchGFX\MyApplication\Middlewares\Third_Party\FreeRTOS\Source\list.c
#        [UTF-8]
#    Command line                 =
#        -f
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Middlewares\FreeRTOS\list.o.rsp
#        (D:\99_Project\GitHub\TouchGFX\MyApplication\Middlewares\Third_Party\FreeRTOS\Source\list.c
#        -D USE_HAL_DRIVER -D STM32H7B3xxQ -D USE_BPP=24 -lC
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\Middlewares\FreeRTOS
#        -lA
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\Middlewares\FreeRTOS
#        -o
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Middlewares\FreeRTOS
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.0\arm\inc\c\DLib_Config_Full.h" -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Core/Inc\ -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/App\ -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/target/generated\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/target\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/STM32H7xx_HAL_Driver/Inc\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/STM32H7xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM4F\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/CMSIS/Device/ST/STM32H7xx/Include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/BSP/Components/Common\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Drivers/BSP/STM32H7B3I-DK\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../Middlewares/ST/touchgfx/framework/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/fonts/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/gui_generated/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/images/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/texts/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/gui/include\
#        -I
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM/../TouchGFX/generated/videos/include\
#        -Ol --source_encoding utf8 --text_out utf8 --utf8_text_in)
#        --dependencies=n
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Middlewares\FreeRTOS\list.o.d
#    Locale                       =  C
#    List file                    =
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\List\Middlewares\FreeRTOS\list.lst
#    Object file                  =
#        D:\99_Project\GitHub\TouchGFX\MyApplication\EWARM\STM32H7B3I-DK\Obj\Middlewares\FreeRTOS\list.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_full_locale_support =  1
#      __dlib_version             =  6
#
###############################################################################

D:\99_Project\GitHub\TouchGFX\MyApplication\Middlewares\Third_Party\FreeRTOS\Source\list.c
      1          /*
      2           * FreeRTOS Kernel V10.3.1
      3           * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
      4           *
      5           * Permission is hereby granted, free of charge, to any person obtaining a copy of
      6           * this software and associated documentation files (the "Software"), to deal in
      7           * the Software without restriction, including without limitation the rights to
      8           * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
      9           * the Software, and to permit persons to whom the Software is furnished to do so,
     10           * subject to the following conditions:
     11           *
     12           * The above copyright notice and this permission notice shall be included in all
     13           * copies or substantial portions of the Software.
     14           *
     15           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     16           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
     17           * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
     18           * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
     19           * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
     20           * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
     21           *
     22           * http://www.FreeRTOS.org
     23           * http://aws.amazon.com/freertos
     24           *
     25           * 1 tab == 4 spaces!
     26           */
     27          
     28          
     29          #include <stdlib.h>
     30          #include "FreeRTOS.h"
     31          #include "list.h"
     32          
     33          /*-----------------------------------------------------------
     34           * PUBLIC LIST API documented in list.h
     35           *----------------------------------------------------------*/
     36          

   \                                 In section .text, align 2, keep-with-next
     37          void vListInitialise( List_t * const pxList )
     38          {
     39          	/* The list structure contains a list item which is used to mark the
     40          	end of the list.  To initialise the list the list end is inserted
     41          	as the only list entry. */
     42          	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   \                     vListInitialise: (+1)
   \        0x0   0xF110 0x0108      ADDS     R1,R0,#+8
   \        0x4   0x6041             STR      R1,[R0, #+4]
     43          
     44          	/* The list end value is the highest possible value in the list to
     45          	ensure it remains at the end of the list. */
     46          	pxList->xListEnd.xItemValue = portMAX_DELAY;
   \        0x6   0xF05F 0x31FF      MOVS     R1,#+4294967295
   \        0xA   0x6081             STR      R1,[R0, #+8]
     47          
     48          	/* The list end next and previous pointers point to itself so we know
     49          	when the list is empty. */
     50          	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   \        0xC   0xF110 0x0108      ADDS     R1,R0,#+8
   \       0x10   0x60C1             STR      R1,[R0, #+12]
     51          	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   \       0x12   0xF110 0x0108      ADDS     R1,R0,#+8
   \       0x16   0x6101             STR      R1,[R0, #+16]
     52          
     53          	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   \       0x18   0x2100             MOVS     R1,#+0
   \       0x1A   0x6001             STR      R1,[R0, #+0]
     54          
     55          	/* Write known values into the list if
     56          	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
     57          	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
     58          	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
     59          }
   \       0x1C   0x4770             BX       LR
     60          /*-----------------------------------------------------------*/
     61          

   \                                 In section .text, align 2, keep-with-next
     62          void vListInitialiseItem( ListItem_t * const pxItem )
     63          {
     64          	/* Make sure the list item is not recorded as being on a list. */
     65          	pxItem->pxContainer = NULL;
   \                     vListInitialiseItem: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
   \        0x2   0x6101             STR      R1,[R0, #+16]
     66          
     67          	/* Write known values into the list item if
     68          	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
     69          	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
     70          	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
     71          }
   \        0x4   0x4770             BX       LR
     72          /*-----------------------------------------------------------*/
     73          

   \                                 In section .text, align 2, keep-with-next
     74          void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
     75          {
     76          ListItem_t * const pxIndex = pxList->pxIndex;
   \                     vListInsertEnd: (+1)
   \        0x0   0x6842             LDR      R2,[R0, #+4]
     77          
     78          	/* Only effective when configASSERT() is also defined, these tests may catch
     79          	the list data structures being overwritten in memory.  They will not catch
     80          	data errors caused by incorrect configuration or use of FreeRTOS. */
     81          	listTEST_LIST_INTEGRITY( pxList );
     82          	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
     83          
     84          	/* Insert a new list item into pxList, but rather than sort the list,
     85          	makes the new list item the last item to be removed by a call to
     86          	listGET_OWNER_OF_NEXT_ENTRY(). */
     87          	pxNewListItem->pxNext = pxIndex;
   \        0x2   0x604A             STR      R2,[R1, #+4]
     88          	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   \        0x4   0x6893             LDR      R3,[R2, #+8]
   \        0x6   0x608B             STR      R3,[R1, #+8]
     89          
     90          	/* Only used during decision coverage testing. */
     91          	mtCOVERAGE_TEST_DELAY();
     92          
     93          	pxIndex->pxPrevious->pxNext = pxNewListItem;
   \        0x8   0x6893             LDR      R3,[R2, #+8]
   \        0xA   0x6059             STR      R1,[R3, #+4]
     94          	pxIndex->pxPrevious = pxNewListItem;
   \        0xC   0x6091             STR      R1,[R2, #+8]
     95          
     96          	/* Remember which list the item is in. */
     97          	pxNewListItem->pxContainer = pxList;
   \        0xE   0x6108             STR      R0,[R1, #+16]
     98          
     99          	( pxList->uxNumberOfItems )++;
   \       0x10   0x6801             LDR      R1,[R0, #+0]
   \       0x12   0x1C49             ADDS     R1,R1,#+1
   \       0x14   0x6001             STR      R1,[R0, #+0]
    100          }
   \       0x16   0x4770             BX       LR
    101          /*-----------------------------------------------------------*/
    102          

   \                                 In section .text, align 2, keep-with-next
    103          void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
    104          {
   \                     vListInsert: (+1)
   \        0x0   0xB410             PUSH     {R4}
    105          ListItem_t *pxIterator;
    106          const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   \        0x2   0x680B             LDR      R3,[R1, #+0]
    107          
    108          	/* Only effective when configASSERT() is also defined, these tests may catch
    109          	the list data structures being overwritten in memory.  They will not catch
    110          	data errors caused by incorrect configuration or use of FreeRTOS. */
    111          	listTEST_LIST_INTEGRITY( pxList );
    112          	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
    113          
    114          	/* Insert the new list item into the list, sorted in xItemValue order.
    115          
    116          	If the list already contains a list item with the same item value then the
    117          	new list item should be placed after it.  This ensures that TCBs which are
    118          	stored in ready lists (all of which have the same xItemValue value) get a
    119          	share of the CPU.  However, if the xItemValue is the same as the back marker
    120          	the iteration loop below will not end.  Therefore the value is checked
    121          	first, and the algorithm slightly modified if necessary. */
    122          	if( xValueOfInsertion == portMAX_DELAY )
   \        0x4   0xF113 0x0F01      CMN      R3,#+1
   \        0x8   0xD101             BNE.N    ??vListInsert_0
    123          	{
    124          		pxIterator = pxList->xListEnd.pxPrevious;
   \        0xA   0x6902             LDR      R2,[R0, #+16]
   \        0xC   0xE007             B.N      ??vListInsert_1
    125          	}
    126          	else
    127          	{
    128          		/* *** NOTE ***********************************************************
    129          		If you find your application is crashing here then likely causes are
    130          		listed below.  In addition see https://www.freertos.org/FAQHelp.html for
    131          		more tips, and ensure configASSERT() is defined!
    132          		https://www.freertos.org/a00110.html#configASSERT
    133          
    134          			1) Stack overflow -
    135          			   see https://www.freertos.org/Stacks-and-stack-overflow-checking.html
    136          			2) Incorrect interrupt priority assignment, especially on Cortex-M
    137          			   parts where numerically high priority values denote low actual
    138          			   interrupt priorities, which can seem counter intuitive.  See
    139          			   https://www.freertos.org/RTOS-Cortex-M3-M4.html and the definition
    140          			   of configMAX_SYSCALL_INTERRUPT_PRIORITY on
    141          			   https://www.freertos.org/a00110.html
    142          			3) Calling an API function from within a critical section or when
    143          			   the scheduler is suspended, or calling an API function that does
    144          			   not end in "FromISR" from an interrupt.
    145          			4) Using a queue or semaphore before it has been initialised or
    146          			   before the scheduler has been started (are interrupts firing
    147          			   before vTaskStartScheduler() has been called?).
    148          		**********************************************************************/
    149          
    150          		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
   \                     ??vListInsert_0: (+1)
   \        0xE   0xF110 0x0208      ADDS     R2,R0,#+8
   \       0x12   0xE000             B.N      ??vListInsert_2
   \                     ??vListInsert_3: (+1)
   \       0x14   0x6852             LDR      R2,[R2, #+4]
   \                     ??vListInsert_2: (+1)
   \       0x16   0x6854             LDR      R4,[R2, #+4]
   \       0x18   0x6824             LDR      R4,[R4, #+0]
   \       0x1A   0x42A3             CMP      R3,R4
   \       0x1C   0xD2FA             BCS.N    ??vListInsert_3
    151          		{
    152          			/* There is nothing to do here, just iterating to the wanted
    153          			insertion position. */
    154          		}
    155          	}
    156          
    157          	pxNewListItem->pxNext = pxIterator->pxNext;
   \                     ??vListInsert_1: (+1)
   \       0x1E   0x6853             LDR      R3,[R2, #+4]
   \       0x20   0x604B             STR      R3,[R1, #+4]
    158          	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   \       0x22   0x684B             LDR      R3,[R1, #+4]
   \       0x24   0x6099             STR      R1,[R3, #+8]
    159          	pxNewListItem->pxPrevious = pxIterator;
   \       0x26   0x608A             STR      R2,[R1, #+8]
    160          	pxIterator->pxNext = pxNewListItem;
   \       0x28   0x6051             STR      R1,[R2, #+4]
    161          
    162          	/* Remember which list the item is in.  This allows fast removal of the
    163          	item later. */
    164          	pxNewListItem->pxContainer = pxList;
   \       0x2A   0x6108             STR      R0,[R1, #+16]
    165          
    166          	( pxList->uxNumberOfItems )++;
   \       0x2C   0x6801             LDR      R1,[R0, #+0]
   \       0x2E   0x1C49             ADDS     R1,R1,#+1
   \       0x30   0x6001             STR      R1,[R0, #+0]
    167          }
   \       0x32   0xBC10             POP      {R4}
   \       0x34   0x4770             BX       LR
    168          /*-----------------------------------------------------------*/
    169          

   \                                 In section .text, align 2, keep-with-next
    170          UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
    171          {
    172          /* The list item knows which list it is in.  Obtain the list from the list
    173          item. */
    174          List_t * const pxList = pxItemToRemove->pxContainer;
   \                     uxListRemove: (+1)
   \        0x0   0x6901             LDR      R1,[R0, #+16]
    175          
    176          	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   \        0x2   0x6882             LDR      R2,[R0, #+8]
   \        0x4   0x6843             LDR      R3,[R0, #+4]
   \        0x6   0x609A             STR      R2,[R3, #+8]
    177          	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   \        0x8   0x6842             LDR      R2,[R0, #+4]
   \        0xA   0x6883             LDR      R3,[R0, #+8]
   \        0xC   0x605A             STR      R2,[R3, #+4]
    178          
    179          	/* Only used during decision coverage testing. */
    180          	mtCOVERAGE_TEST_DELAY();
    181          
    182          	/* Make sure the index is left pointing to a valid item. */
    183          	if( pxList->pxIndex == pxItemToRemove )
   \        0xE   0x684A             LDR      R2,[R1, #+4]
   \       0x10   0x4282             CMP      R2,R0
   \       0x12   0xD101             BNE.N    ??uxListRemove_0
    184          	{
    185          		pxList->pxIndex = pxItemToRemove->pxPrevious;
   \       0x14   0x6882             LDR      R2,[R0, #+8]
   \       0x16   0x604A             STR      R2,[R1, #+4]
    186          	}
    187          	else
    188          	{
    189          		mtCOVERAGE_TEST_MARKER();
    190          	}
    191          
    192          	pxItemToRemove->pxContainer = NULL;
   \                     ??uxListRemove_0: (+1)
   \       0x18   0x2200             MOVS     R2,#+0
   \       0x1A   0x6102             STR      R2,[R0, #+16]
    193          	( pxList->uxNumberOfItems )--;
   \       0x1C   0x6808             LDR      R0,[R1, #+0]
   \       0x1E   0x1E40             SUBS     R0,R0,#+1
   \       0x20   0x6008             STR      R0,[R1, #+0]
    194          
    195          	return pxList->uxNumberOfItems;
   \       0x22   0x6808             LDR      R0,[R1, #+0]
   \       0x24   0x4770             BX       LR
    196          }
    197          /*-----------------------------------------------------------*/
    198          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   uxListRemove
       0   vListInitialise
       0   vListInitialiseItem
       4   vListInsert
       0   vListInsertEnd


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      38  uxListRemove
      30  vListInitialise
       6  vListInitialiseItem
      54  vListInsert
      24  vListInsertEnd

 
 152 bytes in section .text
 
 152 bytes of CODE memory

Errors: none
Warnings: none
